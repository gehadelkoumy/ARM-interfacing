
All_cubeIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000351c  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003650  08003650  00013650  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036c0  080036c0  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080036c0  080036c0  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036c0  080036c0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036c0  080036c0  000136c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036c4  080036c4  000136c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080036c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000068  08003730  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08003730  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000019d3  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000bd4  00000000  00000000  00021a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000358  00000000  00000000  00022638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000290  00000000  00000000  00022990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002683  00000000  00000000  00022c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000023e3  00000000  00000000  000252a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009aae  00000000  00000000  00027686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00031134  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000105c  00000000  00000000  00031184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000068 	.word	0x20000068
 800014c:	00000000 	.word	0x00000000
 8000150:	08003634 	.word	0x08003634

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000006c 	.word	0x2000006c
 800016c:	08003634 	.word	0x08003634

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__gedf2>:
 800090c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000910:	e006      	b.n	8000920 <__cmpdf2+0x4>
 8000912:	bf00      	nop

08000914 <__ledf2>:
 8000914:	f04f 0c01 	mov.w	ip, #1
 8000918:	e002      	b.n	8000920 <__cmpdf2+0x4>
 800091a:	bf00      	nop

0800091c <__cmpdf2>:
 800091c:	f04f 0c01 	mov.w	ip, #1
 8000920:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000924:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000928:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800092c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000930:	bf18      	it	ne
 8000932:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000936:	d01b      	beq.n	8000970 <__cmpdf2+0x54>
 8000938:	b001      	add	sp, #4
 800093a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800093e:	bf0c      	ite	eq
 8000940:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000944:	ea91 0f03 	teqne	r1, r3
 8000948:	bf02      	ittt	eq
 800094a:	ea90 0f02 	teqeq	r0, r2
 800094e:	2000      	moveq	r0, #0
 8000950:	4770      	bxeq	lr
 8000952:	f110 0f00 	cmn.w	r0, #0
 8000956:	ea91 0f03 	teq	r1, r3
 800095a:	bf58      	it	pl
 800095c:	4299      	cmppl	r1, r3
 800095e:	bf08      	it	eq
 8000960:	4290      	cmpeq	r0, r2
 8000962:	bf2c      	ite	cs
 8000964:	17d8      	asrcs	r0, r3, #31
 8000966:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096a:	f040 0001 	orr.w	r0, r0, #1
 800096e:	4770      	bx	lr
 8000970:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d102      	bne.n	8000980 <__cmpdf2+0x64>
 800097a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800097e:	d107      	bne.n	8000990 <__cmpdf2+0x74>
 8000980:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d1d6      	bne.n	8000938 <__cmpdf2+0x1c>
 800098a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800098e:	d0d3      	beq.n	8000938 <__cmpdf2+0x1c>
 8000990:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <__aeabi_cdrcmple>:
 8000998:	4684      	mov	ip, r0
 800099a:	4610      	mov	r0, r2
 800099c:	4662      	mov	r2, ip
 800099e:	468c      	mov	ip, r1
 80009a0:	4619      	mov	r1, r3
 80009a2:	4663      	mov	r3, ip
 80009a4:	e000      	b.n	80009a8 <__aeabi_cdcmpeq>
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdcmpeq>:
 80009a8:	b501      	push	{r0, lr}
 80009aa:	f7ff ffb7 	bl	800091c <__cmpdf2>
 80009ae:	2800      	cmp	r0, #0
 80009b0:	bf48      	it	mi
 80009b2:	f110 0f00 	cmnmi.w	r0, #0
 80009b6:	bd01      	pop	{r0, pc}

080009b8 <__aeabi_dcmpeq>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff fff4 	bl	80009a8 <__aeabi_cdcmpeq>
 80009c0:	bf0c      	ite	eq
 80009c2:	2001      	moveq	r0, #1
 80009c4:	2000      	movne	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmplt>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffea 	bl	80009a8 <__aeabi_cdcmpeq>
 80009d4:	bf34      	ite	cc
 80009d6:	2001      	movcc	r0, #1
 80009d8:	2000      	movcs	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmple>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffe0 	bl	80009a8 <__aeabi_cdcmpeq>
 80009e8:	bf94      	ite	ls
 80009ea:	2001      	movls	r0, #1
 80009ec:	2000      	movhi	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpge>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffce 	bl	8000998 <__aeabi_cdrcmple>
 80009fc:	bf94      	ite	ls
 80009fe:	2001      	movls	r0, #1
 8000a00:	2000      	movhi	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_dcmpgt>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff ffc4 	bl	8000998 <__aeabi_cdrcmple>
 8000a10:	bf34      	ite	cc
 8000a12:	2001      	movcc	r0, #1
 8000a14:	2000      	movcs	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmpun>:
 8000a1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x10>
 8000a26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2a:	d10a      	bne.n	8000a42 <__aeabi_dcmpun+0x26>
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x20>
 8000a36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3a:	d102      	bne.n	8000a42 <__aeabi_dcmpun+0x26>
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	f04f 0001 	mov.w	r0, #1
 8000a46:	4770      	bx	lr

08000a48 <__aeabi_d2iz>:
 8000a48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a50:	d215      	bcs.n	8000a7e <__aeabi_d2iz+0x36>
 8000a52:	d511      	bpl.n	8000a78 <__aeabi_d2iz+0x30>
 8000a54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a5c:	d912      	bls.n	8000a84 <__aeabi_d2iz+0x3c>
 8000a5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	bf18      	it	ne
 8000a74:	4240      	negne	r0, r0
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a82:	d105      	bne.n	8000a90 <__aeabi_d2iz+0x48>
 8000a84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a88:	bf08      	it	eq
 8000a8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a8e:	4770      	bx	lr
 8000a90:	f04f 0000 	mov.w	r0, #0
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_d2uiz>:
 8000a98:	004a      	lsls	r2, r1, #1
 8000a9a:	d211      	bcs.n	8000ac0 <__aeabi_d2uiz+0x28>
 8000a9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa0:	d211      	bcs.n	8000ac6 <__aeabi_d2uiz+0x2e>
 8000aa2:	d50d      	bpl.n	8000ac0 <__aeabi_d2uiz+0x28>
 8000aa4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aac:	d40e      	bmi.n	8000acc <__aeabi_d2uiz+0x34>
 8000aae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aba:	fa23 f002 	lsr.w	r0, r3, r2
 8000abe:	4770      	bx	lr
 8000ac0:	f04f 0000 	mov.w	r0, #0
 8000ac4:	4770      	bx	lr
 8000ac6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aca:	d102      	bne.n	8000ad2 <__aeabi_d2uiz+0x3a>
 8000acc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ad0:	4770      	bx	lr
 8000ad2:	f04f 0000 	mov.w	r0, #0
 8000ad6:	4770      	bx	lr

08000ad8 <__aeabi_d2f>:
 8000ad8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000adc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae0:	bf24      	itt	cs
 8000ae2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aea:	d90d      	bls.n	8000b08 <__aeabi_d2f+0x30>
 8000aec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000afc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b00:	bf08      	it	eq
 8000b02:	f020 0001 	biceq.w	r0, r0, #1
 8000b06:	4770      	bx	lr
 8000b08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b0c:	d121      	bne.n	8000b52 <__aeabi_d2f+0x7a>
 8000b0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b12:	bfbc      	itt	lt
 8000b14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	4770      	bxlt	lr
 8000b1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b22:	f1c2 0218 	rsb	r2, r2, #24
 8000b26:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b32:	bf18      	it	ne
 8000b34:	f040 0001 	orrne.w	r0, r0, #1
 8000b38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b44:	ea40 000c 	orr.w	r0, r0, ip
 8000b48:	fa23 f302 	lsr.w	r3, r3, r2
 8000b4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b50:	e7cc      	b.n	8000aec <__aeabi_d2f+0x14>
 8000b52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b56:	d107      	bne.n	8000b68 <__aeabi_d2f+0x90>
 8000b58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b5c:	bf1e      	ittt	ne
 8000b5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b66:	4770      	bxne	lr
 8000b68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_frsub>:
 8000b78:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b7c:	e002      	b.n	8000b84 <__addsf3>
 8000b7e:	bf00      	nop

08000b80 <__aeabi_fsub>:
 8000b80:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b84 <__addsf3>:
 8000b84:	0042      	lsls	r2, r0, #1
 8000b86:	bf1f      	itttt	ne
 8000b88:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b8c:	ea92 0f03 	teqne	r2, r3
 8000b90:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b94:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b98:	d06a      	beq.n	8000c70 <__addsf3+0xec>
 8000b9a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b9e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba2:	bfc1      	itttt	gt
 8000ba4:	18d2      	addgt	r2, r2, r3
 8000ba6:	4041      	eorgt	r1, r0
 8000ba8:	4048      	eorgt	r0, r1
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	bfb8      	it	lt
 8000bae:	425b      	neglt	r3, r3
 8000bb0:	2b19      	cmp	r3, #25
 8000bb2:	bf88      	it	hi
 8000bb4:	4770      	bxhi	lr
 8000bb6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bbe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bce:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd2:	bf18      	it	ne
 8000bd4:	4249      	negne	r1, r1
 8000bd6:	ea92 0f03 	teq	r2, r3
 8000bda:	d03f      	beq.n	8000c5c <__addsf3+0xd8>
 8000bdc:	f1a2 0201 	sub.w	r2, r2, #1
 8000be0:	fa41 fc03 	asr.w	ip, r1, r3
 8000be4:	eb10 000c 	adds.w	r0, r0, ip
 8000be8:	f1c3 0320 	rsb	r3, r3, #32
 8000bec:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf4:	d502      	bpl.n	8000bfc <__addsf3+0x78>
 8000bf6:	4249      	negs	r1, r1
 8000bf8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bfc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c00:	d313      	bcc.n	8000c2a <__addsf3+0xa6>
 8000c02:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c06:	d306      	bcc.n	8000c16 <__addsf3+0x92>
 8000c08:	0840      	lsrs	r0, r0, #1
 8000c0a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c0e:	f102 0201 	add.w	r2, r2, #1
 8000c12:	2afe      	cmp	r2, #254	; 0xfe
 8000c14:	d251      	bcs.n	8000cba <__addsf3+0x136>
 8000c16:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c1e:	bf08      	it	eq
 8000c20:	f020 0001 	biceq.w	r0, r0, #1
 8000c24:	ea40 0003 	orr.w	r0, r0, r3
 8000c28:	4770      	bx	lr
 8000c2a:	0049      	lsls	r1, r1, #1
 8000c2c:	eb40 0000 	adc.w	r0, r0, r0
 8000c30:	3a01      	subs	r2, #1
 8000c32:	bf28      	it	cs
 8000c34:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c38:	d2ed      	bcs.n	8000c16 <__addsf3+0x92>
 8000c3a:	fab0 fc80 	clz	ip, r0
 8000c3e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c42:	ebb2 020c 	subs.w	r2, r2, ip
 8000c46:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4a:	bfaa      	itet	ge
 8000c4c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c50:	4252      	neglt	r2, r2
 8000c52:	4318      	orrge	r0, r3
 8000c54:	bfbc      	itt	lt
 8000c56:	40d0      	lsrlt	r0, r2
 8000c58:	4318      	orrlt	r0, r3
 8000c5a:	4770      	bx	lr
 8000c5c:	f092 0f00 	teq	r2, #0
 8000c60:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c64:	bf06      	itte	eq
 8000c66:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6a:	3201      	addeq	r2, #1
 8000c6c:	3b01      	subne	r3, #1
 8000c6e:	e7b5      	b.n	8000bdc <__addsf3+0x58>
 8000c70:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c78:	bf18      	it	ne
 8000c7a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c7e:	d021      	beq.n	8000cc4 <__addsf3+0x140>
 8000c80:	ea92 0f03 	teq	r2, r3
 8000c84:	d004      	beq.n	8000c90 <__addsf3+0x10c>
 8000c86:	f092 0f00 	teq	r2, #0
 8000c8a:	bf08      	it	eq
 8000c8c:	4608      	moveq	r0, r1
 8000c8e:	4770      	bx	lr
 8000c90:	ea90 0f01 	teq	r0, r1
 8000c94:	bf1c      	itt	ne
 8000c96:	2000      	movne	r0, #0
 8000c98:	4770      	bxne	lr
 8000c9a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c9e:	d104      	bne.n	8000caa <__addsf3+0x126>
 8000ca0:	0040      	lsls	r0, r0, #1
 8000ca2:	bf28      	it	cs
 8000ca4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ca8:	4770      	bx	lr
 8000caa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cae:	bf3c      	itt	cc
 8000cb0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bxcc	lr
 8000cb6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc2:	4770      	bx	lr
 8000cc4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cc8:	bf16      	itet	ne
 8000cca:	4608      	movne	r0, r1
 8000ccc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd0:	4601      	movne	r1, r0
 8000cd2:	0242      	lsls	r2, r0, #9
 8000cd4:	bf06      	itte	eq
 8000cd6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cda:	ea90 0f01 	teqeq	r0, r1
 8000cde:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_ui2f>:
 8000ce4:	f04f 0300 	mov.w	r3, #0
 8000ce8:	e004      	b.n	8000cf4 <__aeabi_i2f+0x8>
 8000cea:	bf00      	nop

08000cec <__aeabi_i2f>:
 8000cec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf0:	bf48      	it	mi
 8000cf2:	4240      	negmi	r0, r0
 8000cf4:	ea5f 0c00 	movs.w	ip, r0
 8000cf8:	bf08      	it	eq
 8000cfa:	4770      	bxeq	lr
 8000cfc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d00:	4601      	mov	r1, r0
 8000d02:	f04f 0000 	mov.w	r0, #0
 8000d06:	e01c      	b.n	8000d42 <__aeabi_l2f+0x2a>

08000d08 <__aeabi_ul2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f04f 0300 	mov.w	r3, #0
 8000d14:	e00a      	b.n	8000d2c <__aeabi_l2f+0x14>
 8000d16:	bf00      	nop

08000d18 <__aeabi_l2f>:
 8000d18:	ea50 0201 	orrs.w	r2, r0, r1
 8000d1c:	bf08      	it	eq
 8000d1e:	4770      	bxeq	lr
 8000d20:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d24:	d502      	bpl.n	8000d2c <__aeabi_l2f+0x14>
 8000d26:	4240      	negs	r0, r0
 8000d28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d2c:	ea5f 0c01 	movs.w	ip, r1
 8000d30:	bf02      	ittt	eq
 8000d32:	4684      	moveq	ip, r0
 8000d34:	4601      	moveq	r1, r0
 8000d36:	2000      	moveq	r0, #0
 8000d38:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d3c:	bf08      	it	eq
 8000d3e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d42:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d46:	fabc f28c 	clz	r2, ip
 8000d4a:	3a08      	subs	r2, #8
 8000d4c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d50:	db10      	blt.n	8000d74 <__aeabi_l2f+0x5c>
 8000d52:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d56:	4463      	add	r3, ip
 8000d58:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d64:	fa20 f202 	lsr.w	r2, r0, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	f020 0001 	biceq.w	r0, r0, #1
 8000d72:	4770      	bx	lr
 8000d74:	f102 0220 	add.w	r2, r2, #32
 8000d78:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7c:	f1c2 0220 	rsb	r2, r2, #32
 8000d80:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d84:	fa21 f202 	lsr.w	r2, r1, r2
 8000d88:	eb43 0002 	adc.w	r0, r3, r2
 8000d8c:	bf08      	it	eq
 8000d8e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d92:	4770      	bx	lr

08000d94 <__aeabi_fmul>:
 8000d94:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d98:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d9c:	bf1e      	ittt	ne
 8000d9e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da2:	ea92 0f0c 	teqne	r2, ip
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d06f      	beq.n	8000e8c <__aeabi_fmul+0xf8>
 8000dac:	441a      	add	r2, r3
 8000dae:	ea80 0c01 	eor.w	ip, r0, r1
 8000db2:	0240      	lsls	r0, r0, #9
 8000db4:	bf18      	it	ne
 8000db6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dba:	d01e      	beq.n	8000dfa <__aeabi_fmul+0x66>
 8000dbc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dc8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dcc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd4:	bf3e      	ittt	cc
 8000dd6:	0049      	lslcc	r1, r1, #1
 8000dd8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ddc:	005b      	lslcc	r3, r3, #1
 8000dde:	ea40 0001 	orr.w	r0, r0, r1
 8000de2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000de6:	2afd      	cmp	r2, #253	; 0xfd
 8000de8:	d81d      	bhi.n	8000e26 <__aeabi_fmul+0x92>
 8000dea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df2:	bf08      	it	eq
 8000df4:	f020 0001 	biceq.w	r0, r0, #1
 8000df8:	4770      	bx	lr
 8000dfa:	f090 0f00 	teq	r0, #0
 8000dfe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e02:	bf08      	it	eq
 8000e04:	0249      	lsleq	r1, r1, #9
 8000e06:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e0e:	3a7f      	subs	r2, #127	; 0x7f
 8000e10:	bfc2      	ittt	gt
 8000e12:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e16:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1a:	4770      	bxgt	lr
 8000e1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	3a01      	subs	r2, #1
 8000e26:	dc5d      	bgt.n	8000ee4 <__aeabi_fmul+0x150>
 8000e28:	f112 0f19 	cmn.w	r2, #25
 8000e2c:	bfdc      	itt	le
 8000e2e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e32:	4770      	bxle	lr
 8000e34:	f1c2 0200 	rsb	r2, r2, #0
 8000e38:	0041      	lsls	r1, r0, #1
 8000e3a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e3e:	f1c2 0220 	rsb	r2, r2, #32
 8000e42:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e46:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4a:	f140 0000 	adc.w	r0, r0, #0
 8000e4e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e52:	bf08      	it	eq
 8000e54:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e58:	4770      	bx	lr
 8000e5a:	f092 0f00 	teq	r2, #0
 8000e5e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e62:	bf02      	ittt	eq
 8000e64:	0040      	lsleq	r0, r0, #1
 8000e66:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6a:	3a01      	subeq	r2, #1
 8000e6c:	d0f9      	beq.n	8000e62 <__aeabi_fmul+0xce>
 8000e6e:	ea40 000c 	orr.w	r0, r0, ip
 8000e72:	f093 0f00 	teq	r3, #0
 8000e76:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7a:	bf02      	ittt	eq
 8000e7c:	0049      	lsleq	r1, r1, #1
 8000e7e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e82:	3b01      	subeq	r3, #1
 8000e84:	d0f9      	beq.n	8000e7a <__aeabi_fmul+0xe6>
 8000e86:	ea41 010c 	orr.w	r1, r1, ip
 8000e8a:	e78f      	b.n	8000dac <__aeabi_fmul+0x18>
 8000e8c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e90:	ea92 0f0c 	teq	r2, ip
 8000e94:	bf18      	it	ne
 8000e96:	ea93 0f0c 	teqne	r3, ip
 8000e9a:	d00a      	beq.n	8000eb2 <__aeabi_fmul+0x11e>
 8000e9c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea0:	bf18      	it	ne
 8000ea2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ea6:	d1d8      	bne.n	8000e5a <__aeabi_fmul+0xc6>
 8000ea8:	ea80 0001 	eor.w	r0, r0, r1
 8000eac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb0:	4770      	bx	lr
 8000eb2:	f090 0f00 	teq	r0, #0
 8000eb6:	bf17      	itett	ne
 8000eb8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ebc:	4608      	moveq	r0, r1
 8000ebe:	f091 0f00 	teqne	r1, #0
 8000ec2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ec6:	d014      	beq.n	8000ef2 <__aeabi_fmul+0x15e>
 8000ec8:	ea92 0f0c 	teq	r2, ip
 8000ecc:	d101      	bne.n	8000ed2 <__aeabi_fmul+0x13e>
 8000ece:	0242      	lsls	r2, r0, #9
 8000ed0:	d10f      	bne.n	8000ef2 <__aeabi_fmul+0x15e>
 8000ed2:	ea93 0f0c 	teq	r3, ip
 8000ed6:	d103      	bne.n	8000ee0 <__aeabi_fmul+0x14c>
 8000ed8:	024b      	lsls	r3, r1, #9
 8000eda:	bf18      	it	ne
 8000edc:	4608      	movne	r0, r1
 8000ede:	d108      	bne.n	8000ef2 <__aeabi_fmul+0x15e>
 8000ee0:	ea80 0001 	eor.w	r0, r0, r1
 8000ee4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ee8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef0:	4770      	bx	lr
 8000ef2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efa:	4770      	bx	lr

08000efc <__aeabi_fdiv>:
 8000efc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f00:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f04:	bf1e      	ittt	ne
 8000f06:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0a:	ea92 0f0c 	teqne	r2, ip
 8000f0e:	ea93 0f0c 	teqne	r3, ip
 8000f12:	d069      	beq.n	8000fe8 <__aeabi_fdiv+0xec>
 8000f14:	eba2 0203 	sub.w	r2, r2, r3
 8000f18:	ea80 0c01 	eor.w	ip, r0, r1
 8000f1c:	0249      	lsls	r1, r1, #9
 8000f1e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f22:	d037      	beq.n	8000f94 <__aeabi_fdiv+0x98>
 8000f24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f28:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f2c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f34:	428b      	cmp	r3, r1
 8000f36:	bf38      	it	cc
 8000f38:	005b      	lslcc	r3, r3, #1
 8000f3a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f3e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f42:	428b      	cmp	r3, r1
 8000f44:	bf24      	itt	cs
 8000f46:	1a5b      	subcs	r3, r3, r1
 8000f48:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f4c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f50:	bf24      	itt	cs
 8000f52:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f56:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f5e:	bf24      	itt	cs
 8000f60:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f64:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f68:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f6c:	bf24      	itt	cs
 8000f6e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f72:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f76:	011b      	lsls	r3, r3, #4
 8000f78:	bf18      	it	ne
 8000f7a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f7e:	d1e0      	bne.n	8000f42 <__aeabi_fdiv+0x46>
 8000f80:	2afd      	cmp	r2, #253	; 0xfd
 8000f82:	f63f af50 	bhi.w	8000e26 <__aeabi_fmul+0x92>
 8000f86:	428b      	cmp	r3, r1
 8000f88:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f8c:	bf08      	it	eq
 8000f8e:	f020 0001 	biceq.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f98:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f9c:	327f      	adds	r2, #127	; 0x7f
 8000f9e:	bfc2      	ittt	gt
 8000fa0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fa8:	4770      	bxgt	lr
 8000faa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fae:	f04f 0300 	mov.w	r3, #0
 8000fb2:	3a01      	subs	r2, #1
 8000fb4:	e737      	b.n	8000e26 <__aeabi_fmul+0x92>
 8000fb6:	f092 0f00 	teq	r2, #0
 8000fba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fbe:	bf02      	ittt	eq
 8000fc0:	0040      	lsleq	r0, r0, #1
 8000fc2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fc6:	3a01      	subeq	r2, #1
 8000fc8:	d0f9      	beq.n	8000fbe <__aeabi_fdiv+0xc2>
 8000fca:	ea40 000c 	orr.w	r0, r0, ip
 8000fce:	f093 0f00 	teq	r3, #0
 8000fd2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fd6:	bf02      	ittt	eq
 8000fd8:	0049      	lsleq	r1, r1, #1
 8000fda:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fde:	3b01      	subeq	r3, #1
 8000fe0:	d0f9      	beq.n	8000fd6 <__aeabi_fdiv+0xda>
 8000fe2:	ea41 010c 	orr.w	r1, r1, ip
 8000fe6:	e795      	b.n	8000f14 <__aeabi_fdiv+0x18>
 8000fe8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fec:	ea92 0f0c 	teq	r2, ip
 8000ff0:	d108      	bne.n	8001004 <__aeabi_fdiv+0x108>
 8000ff2:	0242      	lsls	r2, r0, #9
 8000ff4:	f47f af7d 	bne.w	8000ef2 <__aeabi_fmul+0x15e>
 8000ff8:	ea93 0f0c 	teq	r3, ip
 8000ffc:	f47f af70 	bne.w	8000ee0 <__aeabi_fmul+0x14c>
 8001000:	4608      	mov	r0, r1
 8001002:	e776      	b.n	8000ef2 <__aeabi_fmul+0x15e>
 8001004:	ea93 0f0c 	teq	r3, ip
 8001008:	d104      	bne.n	8001014 <__aeabi_fdiv+0x118>
 800100a:	024b      	lsls	r3, r1, #9
 800100c:	f43f af4c 	beq.w	8000ea8 <__aeabi_fmul+0x114>
 8001010:	4608      	mov	r0, r1
 8001012:	e76e      	b.n	8000ef2 <__aeabi_fmul+0x15e>
 8001014:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001018:	bf18      	it	ne
 800101a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800101e:	d1ca      	bne.n	8000fb6 <__aeabi_fdiv+0xba>
 8001020:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001024:	f47f af5c 	bne.w	8000ee0 <__aeabi_fmul+0x14c>
 8001028:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800102c:	f47f af3c 	bne.w	8000ea8 <__aeabi_fmul+0x114>
 8001030:	e75f      	b.n	8000ef2 <__aeabi_fmul+0x15e>
 8001032:	bf00      	nop

08001034 <__aeabi_f2iz>:
 8001034:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001038:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800103c:	d30f      	bcc.n	800105e <__aeabi_f2iz+0x2a>
 800103e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001042:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001046:	d90d      	bls.n	8001064 <__aeabi_f2iz+0x30>
 8001048:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800104c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001050:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001054:	fa23 f002 	lsr.w	r0, r3, r2
 8001058:	bf18      	it	ne
 800105a:	4240      	negne	r0, r0
 800105c:	4770      	bx	lr
 800105e:	f04f 0000 	mov.w	r0, #0
 8001062:	4770      	bx	lr
 8001064:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001068:	d101      	bne.n	800106e <__aeabi_f2iz+0x3a>
 800106a:	0242      	lsls	r2, r0, #9
 800106c:	d105      	bne.n	800107a <__aeabi_f2iz+0x46>
 800106e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001072:	bf08      	it	eq
 8001074:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001078:	4770      	bx	lr
 800107a:	f04f 0000 	mov.w	r0, #0
 800107e:	4770      	bx	lr

08001080 <MADC1_voidInit>:

//u16 arr[2] = {0,0};
//u16 arr[NumOfSequences] ;

void MADC1_voidInit(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
	/* Enable interrupt at the end of conversion */
	//SET_BIT(ADC1 -> CR1 , 5);
	
	/* Enable scan mode */
	SET_BIT(ADC1 -> CR1 , 8);
 8001084:	4b09      	ldr	r3, [pc, #36]	; (80010ac <MADC1_voidInit+0x2c>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	4a08      	ldr	r2, [pc, #32]	; (80010ac <MADC1_voidInit+0x2c>)
 800108a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800108e:	6053      	str	r3, [r2, #4]
	
	/* Regular channel sequence length (# of channels) */
	ADC1->SQR1 |= ((NumOfSequences - 1) << 20);
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <MADC1_voidInit+0x2c>)
 8001092:	4a06      	ldr	r2, [pc, #24]	; (80010ac <MADC1_voidInit+0x2c>)
 8001094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001096:	62d3      	str	r3, [r2, #44]	; 0x2c
	
	/* Continous conversion mode */
	SET_BIT(ADC1 -> CR2 , 1);
 8001098:	4b04      	ldr	r3, [pc, #16]	; (80010ac <MADC1_voidInit+0x2c>)
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	4a03      	ldr	r2, [pc, #12]	; (80010ac <MADC1_voidInit+0x2c>)
 800109e:	f043 0302 	orr.w	r3, r3, #2
 80010a2:	6093      	str	r3, [r2, #8]
	
	/* Enable DMA mode */
	//SET_BIT(ADC1 -> CR2 , 8);
	
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr
 80010ac:	40012400 	.word	0x40012400

080010b0 <MADC1_voidStartConversion>:


void MADC1_voidStartConversion(u8 Copy_u8ChannelID , u8 Copy_u8SeqID)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	460a      	mov	r2, r1
 80010ba:	71fb      	strb	r3, [r7, #7]
 80010bc:	4613      	mov	r3, r2
 80010be:	71bb      	strb	r3, [r7, #6]
	/* Sampling time */
	ADC1->SMPR2 |= ((SamplingTimeValue) << (Copy_u8ChannelID * 3));
 80010c0:	4b1f      	ldr	r3, [pc, #124]	; (8001140 <MADC1_voidStartConversion+0x90>)
 80010c2:	6919      	ldr	r1, [r3, #16]
 80010c4:	79fa      	ldrb	r2, [r7, #7]
 80010c6:	4613      	mov	r3, r2
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	4413      	add	r3, r2
 80010cc:	2207      	movs	r2, #7
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	4a1b      	ldr	r2, [pc, #108]	; (8001140 <MADC1_voidStartConversion+0x90>)
 80010d4:	430b      	orrs	r3, r1
 80010d6:	6113      	str	r3, [r2, #16]
	/* order of channels conversions */
	ADC1->SQR3 |= ((Copy_u8ChannelID) << ((Copy_u8SeqID - 1) * 5));
 80010d8:	4b19      	ldr	r3, [pc, #100]	; (8001140 <MADC1_voidStartConversion+0x90>)
 80010da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010dc:	79f8      	ldrb	r0, [r7, #7]
 80010de:	79bb      	ldrb	r3, [r7, #6]
 80010e0:	1e5a      	subs	r2, r3, #1
 80010e2:	4613      	mov	r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	4413      	add	r3, r2
 80010e8:	fa00 f303 	lsl.w	r3, r0, r3
 80010ec:	4a14      	ldr	r2, [pc, #80]	; (8001140 <MADC1_voidStartConversion+0x90>)
 80010ee:	430b      	orrs	r3, r1
 80010f0:	6353      	str	r3, [r2, #52]	; 0x34
	
	//MDMA_voidChannel1Start(&(ADC1->DR), arr , NumOfSequences);
	
	/* Enable ADC1 */
	SET_BIT(ADC1 -> CR2 , 0);
 80010f2:	4b13      	ldr	r3, [pc, #76]	; (8001140 <MADC1_voidStartConversion+0x90>)
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	4a12      	ldr	r2, [pc, #72]	; (8001140 <MADC1_voidStartConversion+0x90>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6093      	str	r3, [r2, #8]
	MSTK_voidSetBusyWait(1000);
 80010fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001102:	f000 fca7 	bl	8001a54 <MSTK_voidSetBusyWait>
	SET_BIT(ADC1 -> CR2 , 0);
 8001106:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <MADC1_voidStartConversion+0x90>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	4a0d      	ldr	r2, [pc, #52]	; (8001140 <MADC1_voidStartConversion+0x90>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	6093      	str	r3, [r2, #8]
	MSTK_voidSetBusyWait(1000);
 8001112:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001116:	f000 fc9d 	bl	8001a54 <MSTK_voidSetBusyWait>
	/* Reset calibration */
	//SET_BIT(ADC1 -> CR2 , 3);
	//while((GET_BIT(ADC->CR2 , 3)) == 1);
	
	/* Enable calibration */
	SET_BIT(ADC1 -> CR2 , 2);
 800111a:	4b09      	ldr	r3, [pc, #36]	; (8001140 <MADC1_voidStartConversion+0x90>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	4a08      	ldr	r2, [pc, #32]	; (8001140 <MADC1_voidStartConversion+0x90>)
 8001120:	f043 0304 	orr.w	r3, r3, #4
 8001124:	6093      	str	r3, [r2, #8]
	while((GET_BIT(ADC1->CR2 , 2)) == 1);
 8001126:	bf00      	nop
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <MADC1_voidStartConversion+0x90>)
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	089b      	lsrs	r3, r3, #2
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	2b01      	cmp	r3, #1
 8001134:	d0f8      	beq.n	8001128 <MADC1_voidStartConversion+0x78>
	
}
 8001136:	bf00      	nop
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40012400 	.word	0x40012400

08001144 <MADC1_u16ReadValue>:
//{
//	ADC1_GlobalPtr = ptr;
//}

u16 MADC1_u16ReadValue(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
    return (ADC1 -> DR);
 8001148:	4b03      	ldr	r3, [pc, #12]	; (8001158 <MADC1_u16ReadValue+0x14>)
 800114a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114c:	b29b      	uxth	r3, r3
}
 800114e:	4618      	mov	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40012400 	.word	0x40012400

0800115c <MAFIO_voidSetEXTIConfiguration>:
#include "AFIO/AFIO_config.h"
#include "AFIO/AFIO_private.h"


void	MAFIO_voidSetEXTIConfiguration(u8 Copy_u8EXTILine ,u8 Copy_u8PortMap)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	460a      	mov	r2, r1
 8001166:	71fb      	strb	r3, [r7, #7]
 8001168:	4613      	mov	r3, r2
 800116a:	71bb      	strb	r3, [r7, #6]
	u8 Local_u8RegIndex = 0 ;		
 800116c:	2300      	movs	r3, #0
 800116e:	73fb      	strb	r3, [r7, #15]
	/* Assign to EXTICRX register									*/
	if(Copy_u8EXTILine <= 3 )
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	2b03      	cmp	r3, #3
 8001174:	d802      	bhi.n	800117c <MAFIO_voidSetEXTIConfiguration+0x20>
	{
			Local_u8RegIndex = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	73fb      	strb	r3, [r7, #15]
 800117a:	e019      	b.n	80011b0 <MAFIO_voidSetEXTIConfiguration+0x54>
	}
	else if(Copy_u8EXTILine <= 7)
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	2b07      	cmp	r3, #7
 8001180:	d805      	bhi.n	800118e <MAFIO_voidSetEXTIConfiguration+0x32>
	{	
		Local_u8RegIndex = 1;
 8001182:	2301      	movs	r3, #1
 8001184:	73fb      	strb	r3, [r7, #15]
		
		/*bit0 to bit3 not 4 to 7*/
		Copy_u8EXTILine -= 4;
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	3b04      	subs	r3, #4
 800118a:	71fb      	strb	r3, [r7, #7]
 800118c:	e010      	b.n	80011b0 <MAFIO_voidSetEXTIConfiguration+0x54>
	}
	else if(Copy_u8EXTILine <= 11)
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	2b0b      	cmp	r3, #11
 8001192:	d805      	bhi.n	80011a0 <MAFIO_voidSetEXTIConfiguration+0x44>
	{
		Local_u8RegIndex = 2;
 8001194:	2302      	movs	r3, #2
 8001196:	73fb      	strb	r3, [r7, #15]
		/*4bits from 0 to 3*/
		Copy_u8EXTILine -= 8;
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	3b08      	subs	r3, #8
 800119c:	71fb      	strb	r3, [r7, #7]
 800119e:	e007      	b.n	80011b0 <MAFIO_voidSetEXTIConfiguration+0x54>
	
	}
	else if(Copy_u8EXTILine <= 15)
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	2b0f      	cmp	r3, #15
 80011a4:	d804      	bhi.n	80011b0 <MAFIO_voidSetEXTIConfiguration+0x54>
	{
		Local_u8RegIndex = 3;
 80011a6:	2303      	movs	r3, #3
 80011a8:	73fb      	strb	r3, [r7, #15]
		/*4bits from 0 to 3*/
		Copy_u8EXTILine -= 12;
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	3b0c      	subs	r3, #12
 80011ae:	71fb      	strb	r3, [r7, #7]
	}

	/*reset first --> (avoiding overwrite)*/
	AFIO->EXTICR[Local_u8RegIndex] &= ~((0b1111) << (Copy_u8EXTILine * 4));
 80011b0:	4a13      	ldr	r2, [pc, #76]	; (8001200 <MAFIO_voidSetEXTIConfiguration+0xa4>)
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
 80011b4:	3302      	adds	r3, #2
 80011b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	210f      	movs	r1, #15
 80011c0:	fa01 f303 	lsl.w	r3, r1, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	4618      	mov	r0, r3
 80011c8:	490d      	ldr	r1, [pc, #52]	; (8001200 <MAFIO_voidSetEXTIConfiguration+0xa4>)
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	4002      	ands	r2, r0
 80011ce:	3302      	adds	r3, #2
 80011d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	
	/*set*/
	AFIO->EXTICR[Local_u8RegIndex]  |= ((Copy_u8PortMap) << (Copy_u8EXTILine * 4));	
 80011d4:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <MAFIO_voidSetEXTIConfiguration+0xa4>)
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
 80011d8:	3302      	adds	r3, #2
 80011da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011de:	79b9      	ldrb	r1, [r7, #6]
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	fa01 f303 	lsl.w	r3, r1, r3
 80011e8:	4618      	mov	r0, r3
 80011ea:	4905      	ldr	r1, [pc, #20]	; (8001200 <MAFIO_voidSetEXTIConfiguration+0xa4>)
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	4302      	orrs	r2, r0
 80011f0:	3302      	adds	r3, #2
 80011f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011f6:	bf00      	nop
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr
 8001200:	40010000 	.word	0x40010000

08001204 <MGPIO_VoidSetPinDirection>:
#include "DIO/DIO_interface.h"
#include "DIO/DIO_private.h"
#include "DIO/DIO_config.h"

void MGPIO_VoidSetPinDirection(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Mode)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
 800120e:	460b      	mov	r3, r1
 8001210:	71bb      	strb	r3, [r7, #6]
 8001212:	4613      	mov	r3, r2
 8001214:	717b      	strb	r3, [r7, #5]
	switch(Copy_u8Port)
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	2b02      	cmp	r3, #2
 800121a:	d07a      	beq.n	8001312 <MGPIO_VoidSetPinDirection+0x10e>
 800121c:	2b02      	cmp	r3, #2
 800121e:	f300 80b6 	bgt.w	800138e <MGPIO_VoidSetPinDirection+0x18a>
 8001222:	2b00      	cmp	r3, #0
 8001224:	d002      	beq.n	800122c <MGPIO_VoidSetPinDirection+0x28>
 8001226:	2b01      	cmp	r3, #1
 8001228:	d03a      	beq.n	80012a0 <MGPIO_VoidSetPinDirection+0x9c>
		}
		
		break;

	}
}
 800122a:	e0b0      	b.n	800138e <MGPIO_VoidSetPinDirection+0x18a>
		if(Copy_u8Pin <= 7 )
 800122c:	79bb      	ldrb	r3, [r7, #6]
 800122e:	2b07      	cmp	r3, #7
 8001230:	d817      	bhi.n	8001262 <MGPIO_VoidSetPinDirection+0x5e>
			GPIOA_CRL &= ~ ( ( 0b1111 )  << ( Copy_u8Pin * 4 ));  /*Reset or clear pin (4bits)*/
 8001232:	4b59      	ldr	r3, [pc, #356]	; (8001398 <MGPIO_VoidSetPinDirection+0x194>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	79ba      	ldrb	r2, [r7, #6]
 8001238:	0092      	lsls	r2, r2, #2
 800123a:	210f      	movs	r1, #15
 800123c:	fa01 f202 	lsl.w	r2, r1, r2
 8001240:	43d2      	mvns	r2, r2
 8001242:	4611      	mov	r1, r2
 8001244:	4a54      	ldr	r2, [pc, #336]	; (8001398 <MGPIO_VoidSetPinDirection+0x194>)
 8001246:	400b      	ands	r3, r1
 8001248:	6013      	str	r3, [r2, #0]
			GPIOA_CRL |= ( Copy_u8Mode ) << ( Copy_u8Pin * 4 );   /*apply mode on pin (interface file)*/
 800124a:	4b53      	ldr	r3, [pc, #332]	; (8001398 <MGPIO_VoidSetPinDirection+0x194>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	7979      	ldrb	r1, [r7, #5]
 8001250:	79ba      	ldrb	r2, [r7, #6]
 8001252:	0092      	lsls	r2, r2, #2
 8001254:	fa01 f202 	lsl.w	r2, r1, r2
 8001258:	4611      	mov	r1, r2
 800125a:	4a4f      	ldr	r2, [pc, #316]	; (8001398 <MGPIO_VoidSetPinDirection+0x194>)
 800125c:	430b      	orrs	r3, r1
 800125e:	6013      	str	r3, [r2, #0]
		break;
 8001260:	e090      	b.n	8001384 <MGPIO_VoidSetPinDirection+0x180>
		else if(Copy_u8Pin <= 15 )
 8001262:	79bb      	ldrb	r3, [r7, #6]
 8001264:	2b0f      	cmp	r3, #15
 8001266:	f200 808d 	bhi.w	8001384 <MGPIO_VoidSetPinDirection+0x180>
			Copy_u8Pin = Copy_u8Pin - 8;
 800126a:	79bb      	ldrb	r3, [r7, #6]
 800126c:	3b08      	subs	r3, #8
 800126e:	71bb      	strb	r3, [r7, #6]
			GPIOA_CRH &= ~ ( ( 0b1111 )  << ( Copy_u8Pin * 4 ) );
 8001270:	4b4a      	ldr	r3, [pc, #296]	; (800139c <MGPIO_VoidSetPinDirection+0x198>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	79ba      	ldrb	r2, [r7, #6]
 8001276:	0092      	lsls	r2, r2, #2
 8001278:	210f      	movs	r1, #15
 800127a:	fa01 f202 	lsl.w	r2, r1, r2
 800127e:	43d2      	mvns	r2, r2
 8001280:	4611      	mov	r1, r2
 8001282:	4a46      	ldr	r2, [pc, #280]	; (800139c <MGPIO_VoidSetPinDirection+0x198>)
 8001284:	400b      	ands	r3, r1
 8001286:	6013      	str	r3, [r2, #0]
			GPIOA_CRH |= ( Copy_u8Mode ) << ( Copy_u8Pin * 4 );
 8001288:	4b44      	ldr	r3, [pc, #272]	; (800139c <MGPIO_VoidSetPinDirection+0x198>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	7979      	ldrb	r1, [r7, #5]
 800128e:	79ba      	ldrb	r2, [r7, #6]
 8001290:	0092      	lsls	r2, r2, #2
 8001292:	fa01 f202 	lsl.w	r2, r1, r2
 8001296:	4611      	mov	r1, r2
 8001298:	4a40      	ldr	r2, [pc, #256]	; (800139c <MGPIO_VoidSetPinDirection+0x198>)
 800129a:	430b      	orrs	r3, r1
 800129c:	6013      	str	r3, [r2, #0]
		break;
 800129e:	e071      	b.n	8001384 <MGPIO_VoidSetPinDirection+0x180>
		if(Copy_u8Pin <= 7 )
 80012a0:	79bb      	ldrb	r3, [r7, #6]
 80012a2:	2b07      	cmp	r3, #7
 80012a4:	d817      	bhi.n	80012d6 <MGPIO_VoidSetPinDirection+0xd2>
			GPIOB_CRL &= ~ ( ( 0b1111 )  << ( Copy_u8Pin * 4 ) );    /*Reset or clear pin*/
 80012a6:	4b3e      	ldr	r3, [pc, #248]	; (80013a0 <MGPIO_VoidSetPinDirection+0x19c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	79ba      	ldrb	r2, [r7, #6]
 80012ac:	0092      	lsls	r2, r2, #2
 80012ae:	210f      	movs	r1, #15
 80012b0:	fa01 f202 	lsl.w	r2, r1, r2
 80012b4:	43d2      	mvns	r2, r2
 80012b6:	4611      	mov	r1, r2
 80012b8:	4a39      	ldr	r2, [pc, #228]	; (80013a0 <MGPIO_VoidSetPinDirection+0x19c>)
 80012ba:	400b      	ands	r3, r1
 80012bc:	6013      	str	r3, [r2, #0]
			GPIOB_CRL |= ( Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;    /*apply mode on pin*/
 80012be:	4b38      	ldr	r3, [pc, #224]	; (80013a0 <MGPIO_VoidSetPinDirection+0x19c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	7979      	ldrb	r1, [r7, #5]
 80012c4:	79ba      	ldrb	r2, [r7, #6]
 80012c6:	0092      	lsls	r2, r2, #2
 80012c8:	fa01 f202 	lsl.w	r2, r1, r2
 80012cc:	4611      	mov	r1, r2
 80012ce:	4a34      	ldr	r2, [pc, #208]	; (80013a0 <MGPIO_VoidSetPinDirection+0x19c>)
 80012d0:	430b      	orrs	r3, r1
 80012d2:	6013      	str	r3, [r2, #0]
		break;
 80012d4:	e058      	b.n	8001388 <MGPIO_VoidSetPinDirection+0x184>
		else if(Copy_u8Pin <= 15 )
 80012d6:	79bb      	ldrb	r3, [r7, #6]
 80012d8:	2b0f      	cmp	r3, #15
 80012da:	d855      	bhi.n	8001388 <MGPIO_VoidSetPinDirection+0x184>
			Copy_u8Pin = Copy_u8Pin - 8;
 80012dc:	79bb      	ldrb	r3, [r7, #6]
 80012de:	3b08      	subs	r3, #8
 80012e0:	71bb      	strb	r3, [r7, #6]
			GPIOB_CRH &= ~ ( ( 0b1111 )  << ( Copy_u8Pin * 4 ) );
 80012e2:	4b30      	ldr	r3, [pc, #192]	; (80013a4 <MGPIO_VoidSetPinDirection+0x1a0>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	79ba      	ldrb	r2, [r7, #6]
 80012e8:	0092      	lsls	r2, r2, #2
 80012ea:	210f      	movs	r1, #15
 80012ec:	fa01 f202 	lsl.w	r2, r1, r2
 80012f0:	43d2      	mvns	r2, r2
 80012f2:	4611      	mov	r1, r2
 80012f4:	4a2b      	ldr	r2, [pc, #172]	; (80013a4 <MGPIO_VoidSetPinDirection+0x1a0>)
 80012f6:	400b      	ands	r3, r1
 80012f8:	6013      	str	r3, [r2, #0]
			GPIOB_CRH |= ( Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 80012fa:	4b2a      	ldr	r3, [pc, #168]	; (80013a4 <MGPIO_VoidSetPinDirection+0x1a0>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	7979      	ldrb	r1, [r7, #5]
 8001300:	79ba      	ldrb	r2, [r7, #6]
 8001302:	0092      	lsls	r2, r2, #2
 8001304:	fa01 f202 	lsl.w	r2, r1, r2
 8001308:	4611      	mov	r1, r2
 800130a:	4a26      	ldr	r2, [pc, #152]	; (80013a4 <MGPIO_VoidSetPinDirection+0x1a0>)
 800130c:	430b      	orrs	r3, r1
 800130e:	6013      	str	r3, [r2, #0]
		break;
 8001310:	e03a      	b.n	8001388 <MGPIO_VoidSetPinDirection+0x184>
		if(Copy_u8Pin <= 7 )
 8001312:	79bb      	ldrb	r3, [r7, #6]
 8001314:	2b07      	cmp	r3, #7
 8001316:	d817      	bhi.n	8001348 <MGPIO_VoidSetPinDirection+0x144>
			GPIOC_CRL &= ~ ( ( 0b1111 )  << ( Copy_u8Pin * 4 ) );// R M W
 8001318:	4b23      	ldr	r3, [pc, #140]	; (80013a8 <MGPIO_VoidSetPinDirection+0x1a4>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	79ba      	ldrb	r2, [r7, #6]
 800131e:	0092      	lsls	r2, r2, #2
 8001320:	210f      	movs	r1, #15
 8001322:	fa01 f202 	lsl.w	r2, r1, r2
 8001326:	43d2      	mvns	r2, r2
 8001328:	4611      	mov	r1, r2
 800132a:	4a1f      	ldr	r2, [pc, #124]	; (80013a8 <MGPIO_VoidSetPinDirection+0x1a4>)
 800132c:	400b      	ands	r3, r1
 800132e:	6013      	str	r3, [r2, #0]
			GPIOC_CRL |= ( Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 8001330:	4b1d      	ldr	r3, [pc, #116]	; (80013a8 <MGPIO_VoidSetPinDirection+0x1a4>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	7979      	ldrb	r1, [r7, #5]
 8001336:	79ba      	ldrb	r2, [r7, #6]
 8001338:	0092      	lsls	r2, r2, #2
 800133a:	fa01 f202 	lsl.w	r2, r1, r2
 800133e:	4611      	mov	r1, r2
 8001340:	4a19      	ldr	r2, [pc, #100]	; (80013a8 <MGPIO_VoidSetPinDirection+0x1a4>)
 8001342:	430b      	orrs	r3, r1
 8001344:	6013      	str	r3, [r2, #0]
		break;
 8001346:	e021      	b.n	800138c <MGPIO_VoidSetPinDirection+0x188>
		else if(Copy_u8Pin <= 15 )
 8001348:	79bb      	ldrb	r3, [r7, #6]
 800134a:	2b0f      	cmp	r3, #15
 800134c:	d81e      	bhi.n	800138c <MGPIO_VoidSetPinDirection+0x188>
			Copy_u8Pin = Copy_u8Pin - 8;
 800134e:	79bb      	ldrb	r3, [r7, #6]
 8001350:	3b08      	subs	r3, #8
 8001352:	71bb      	strb	r3, [r7, #6]
			GPIOC_CRH &= ~ ( ( 0b1111 )  << ( Copy_u8Pin * 4 ) );
 8001354:	4b15      	ldr	r3, [pc, #84]	; (80013ac <MGPIO_VoidSetPinDirection+0x1a8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	79ba      	ldrb	r2, [r7, #6]
 800135a:	0092      	lsls	r2, r2, #2
 800135c:	210f      	movs	r1, #15
 800135e:	fa01 f202 	lsl.w	r2, r1, r2
 8001362:	43d2      	mvns	r2, r2
 8001364:	4611      	mov	r1, r2
 8001366:	4a11      	ldr	r2, [pc, #68]	; (80013ac <MGPIO_VoidSetPinDirection+0x1a8>)
 8001368:	400b      	ands	r3, r1
 800136a:	6013      	str	r3, [r2, #0]
			GPIOC_CRH |= ( Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 800136c:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <MGPIO_VoidSetPinDirection+0x1a8>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	7979      	ldrb	r1, [r7, #5]
 8001372:	79ba      	ldrb	r2, [r7, #6]
 8001374:	0092      	lsls	r2, r2, #2
 8001376:	fa01 f202 	lsl.w	r2, r1, r2
 800137a:	4611      	mov	r1, r2
 800137c:	4a0b      	ldr	r2, [pc, #44]	; (80013ac <MGPIO_VoidSetPinDirection+0x1a8>)
 800137e:	430b      	orrs	r3, r1
 8001380:	6013      	str	r3, [r2, #0]
		break;
 8001382:	e003      	b.n	800138c <MGPIO_VoidSetPinDirection+0x188>
		break;
 8001384:	bf00      	nop
 8001386:	e002      	b.n	800138e <MGPIO_VoidSetPinDirection+0x18a>
		break;
 8001388:	bf00      	nop
 800138a:	e000      	b.n	800138e <MGPIO_VoidSetPinDirection+0x18a>
		break;
 800138c:	bf00      	nop
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	40010800 	.word	0x40010800
 800139c:	40010804 	.word	0x40010804
 80013a0:	40010c00 	.word	0x40010c00
 80013a4:	40010c04 	.word	0x40010c04
 80013a8:	40011000 	.word	0x40011000
 80013ac:	40011004 	.word	0x40011004

080013b0 <MGPIO_VoidSetPinValue>:


void MGPIO_VoidSetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Value)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
 80013ba:	460b      	mov	r3, r1
 80013bc:	71bb      	strb	r3, [r7, #6]
 80013be:	4613      	mov	r3, r2
 80013c0:	717b      	strb	r3, [r7, #5]
	switch(Copy_u8Port)
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d02a      	beq.n	800141e <MGPIO_VoidSetPinValue+0x6e>
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	dc3f      	bgt.n	800144c <MGPIO_VoidSetPinValue+0x9c>
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d002      	beq.n	80013d6 <MGPIO_VoidSetPinValue+0x26>
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d012      	beq.n	80013fa <MGPIO_VoidSetPinValue+0x4a>
			GPIOC_BRR = (1 << Copy_u8Pin);
		}
		break;

	}
}
 80013d4:	e03a      	b.n	800144c <MGPIO_VoidSetPinValue+0x9c>
		if( Copy_u8Value == HIGH )
 80013d6:	797b      	ldrb	r3, [r7, #5]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d105      	bne.n	80013e8 <MGPIO_VoidSetPinValue+0x38>
			GPIOA_BSRR = (1 << Copy_u8Pin);     /*speed up -- 0 has no effect*/
 80013dc:	79bb      	ldrb	r3, [r7, #6]
 80013de:	2201      	movs	r2, #1
 80013e0:	409a      	lsls	r2, r3
 80013e2:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <MGPIO_VoidSetPinValue+0xa8>)
 80013e4:	601a      	str	r2, [r3, #0]
		break;
 80013e6:	e02c      	b.n	8001442 <MGPIO_VoidSetPinValue+0x92>
		else if( Copy_u8Value == LOW )
 80013e8:	797b      	ldrb	r3, [r7, #5]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d129      	bne.n	8001442 <MGPIO_VoidSetPinValue+0x92>
			GPIOA_BRR = (1 << Copy_u8Pin);    /*speed up*/
 80013ee:	79bb      	ldrb	r3, [r7, #6]
 80013f0:	2201      	movs	r2, #1
 80013f2:	409a      	lsls	r2, r3
 80013f4:	4b19      	ldr	r3, [pc, #100]	; (800145c <MGPIO_VoidSetPinValue+0xac>)
 80013f6:	601a      	str	r2, [r3, #0]
		break;
 80013f8:	e023      	b.n	8001442 <MGPIO_VoidSetPinValue+0x92>
		if( Copy_u8Value == HIGH )
 80013fa:	797b      	ldrb	r3, [r7, #5]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d105      	bne.n	800140c <MGPIO_VoidSetPinValue+0x5c>
			GPIOB_BSRR = (1 << Copy_u8Pin);
 8001400:	79bb      	ldrb	r3, [r7, #6]
 8001402:	2201      	movs	r2, #1
 8001404:	409a      	lsls	r2, r3
 8001406:	4b16      	ldr	r3, [pc, #88]	; (8001460 <MGPIO_VoidSetPinValue+0xb0>)
 8001408:	601a      	str	r2, [r3, #0]
		break;
 800140a:	e01c      	b.n	8001446 <MGPIO_VoidSetPinValue+0x96>
		else if( Copy_u8Value == LOW )
 800140c:	797b      	ldrb	r3, [r7, #5]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d119      	bne.n	8001446 <MGPIO_VoidSetPinValue+0x96>
			GPIOB_BRR = (1 << Copy_u8Pin);
 8001412:	79bb      	ldrb	r3, [r7, #6]
 8001414:	2201      	movs	r2, #1
 8001416:	409a      	lsls	r2, r3
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <MGPIO_VoidSetPinValue+0xb4>)
 800141a:	601a      	str	r2, [r3, #0]
		break;
 800141c:	e013      	b.n	8001446 <MGPIO_VoidSetPinValue+0x96>
		if( Copy_u8Value == HIGH )
 800141e:	797b      	ldrb	r3, [r7, #5]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d105      	bne.n	8001430 <MGPIO_VoidSetPinValue+0x80>
			GPIOC_BSRR = (1 << Copy_u8Pin);
 8001424:	79bb      	ldrb	r3, [r7, #6]
 8001426:	2201      	movs	r2, #1
 8001428:	409a      	lsls	r2, r3
 800142a:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <MGPIO_VoidSetPinValue+0xb8>)
 800142c:	601a      	str	r2, [r3, #0]
		break;
 800142e:	e00c      	b.n	800144a <MGPIO_VoidSetPinValue+0x9a>
		else if( Copy_u8Value == LOW )
 8001430:	797b      	ldrb	r3, [r7, #5]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d109      	bne.n	800144a <MGPIO_VoidSetPinValue+0x9a>
			GPIOC_BRR = (1 << Copy_u8Pin);
 8001436:	79bb      	ldrb	r3, [r7, #6]
 8001438:	2201      	movs	r2, #1
 800143a:	409a      	lsls	r2, r3
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <MGPIO_VoidSetPinValue+0xbc>)
 800143e:	601a      	str	r2, [r3, #0]
		break;
 8001440:	e003      	b.n	800144a <MGPIO_VoidSetPinValue+0x9a>
		break;
 8001442:	bf00      	nop
 8001444:	e002      	b.n	800144c <MGPIO_VoidSetPinValue+0x9c>
		break;
 8001446:	bf00      	nop
 8001448:	e000      	b.n	800144c <MGPIO_VoidSetPinValue+0x9c>
		break;
 800144a:	bf00      	nop
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40010810 	.word	0x40010810
 800145c:	40010814 	.word	0x40010814
 8001460:	40010c10 	.word	0x40010c10
 8001464:	40010c14 	.word	0x40010c14
 8001468:	40011010 	.word	0x40011010
 800146c:	40011014 	.word	0x40011014

08001470 <MGPIO_u8GetPinValue>:


u8 MGPIO_u8GetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	460a      	mov	r2, r1
 800147a:	71fb      	strb	r3, [r7, #7]
 800147c:	4613      	mov	r3, r2
 800147e:	71bb      	strb	r3, [r7, #6]
	u8 LOC_u8Result = 0 ;   //return value
 8001480:	2300      	movs	r3, #0
 8001482:	73fb      	strb	r3, [r7, #15]

	switch(Copy_u8Port)
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	2b02      	cmp	r3, #2
 8001488:	d01a      	beq.n	80014c0 <MGPIO_u8GetPinValue+0x50>
 800148a:	2b02      	cmp	r3, #2
 800148c:	dc22      	bgt.n	80014d4 <MGPIO_u8GetPinValue+0x64>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d002      	beq.n	8001498 <MGPIO_u8GetPinValue+0x28>
 8001492:	2b01      	cmp	r3, #1
 8001494:	d00a      	beq.n	80014ac <MGPIO_u8GetPinValue+0x3c>
 8001496:	e01d      	b.n	80014d4 <MGPIO_u8GetPinValue+0x64>
	{
	/*get input data*/
	case GPIOA:
		LOC_u8Result = GET_BIT( GPIOA_IDR , Copy_u8Pin );
 8001498:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <MGPIO_u8GetPinValue+0x70>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	79bb      	ldrb	r3, [r7, #6]
 800149e:	fa22 f303 	lsr.w	r3, r2, r3
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	73fb      	strb	r3, [r7, #15]
		break;
 80014aa:	e013      	b.n	80014d4 <MGPIO_u8GetPinValue+0x64>
		
	case GPIOB:
		LOC_u8Result = GET_BIT( GPIOB_IDR , Copy_u8Pin );
 80014ac:	4b0d      	ldr	r3, [pc, #52]	; (80014e4 <MGPIO_u8GetPinValue+0x74>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	79bb      	ldrb	r3, [r7, #6]
 80014b2:	fa22 f303 	lsr.w	r3, r2, r3
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	73fb      	strb	r3, [r7, #15]
		break;
 80014be:	e009      	b.n	80014d4 <MGPIO_u8GetPinValue+0x64>
		
	case GPIOC:
		LOC_u8Result = GET_BIT( GPIOC_IDR , Copy_u8Pin );
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <MGPIO_u8GetPinValue+0x78>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	79bb      	ldrb	r3, [r7, #6]
 80014c6:	fa22 f303 	lsr.w	r3, r2, r3
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	f003 0301 	and.w	r3, r3, #1
 80014d0:	73fb      	strb	r3, [r7, #15]
		break;
 80014d2:	bf00      	nop
	}
	
	return LOC_u8Result;
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr
 80014e0:	40010808 	.word	0x40010808
 80014e4:	40010c08 	.word	0x40010c08
 80014e8:	40011008 	.word	0x40011008

080014ec <MEXTI_voidInit>:
#include "EXTI/EXTI_private.h"



void MEXTI_voidInit()
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
	#if 	EXTI_MODE	== 	RISING
		SET_BIT(EXTI -> RTSR , EXTI_LINE);
 80014f0:	4b07      	ldr	r3, [pc, #28]	; (8001510 <MEXTI_voidInit+0x24>)
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	4a06      	ldr	r2, [pc, #24]	; (8001510 <MEXTI_voidInit+0x24>)
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	6093      	str	r3, [r2, #8]
	#else 	
		#error "Wrong Mode"
	#endif
	
	/*Disable interrupt*/
	CLR_BIT(EXTI -> IMR , EXTI_LINE);
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <MEXTI_voidInit+0x24>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a03      	ldr	r2, [pc, #12]	; (8001510 <MEXTI_voidInit+0x24>)
 8001502:	f023 0301 	bic.w	r3, r3, #1
 8001506:	6013      	str	r3, [r2, #0]
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr
 8001510:	40010400 	.word	0x40010400

08001514 <MEXTI_voidSetSignalLatch>:
}

 
             /*changing mode & line in run time*/
void MEXTI_voidSetSignalLatch(u8 Copy_u8EXTILine , u8 Copy_u8EXTIMode)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	460a      	mov	r2, r1
 800151e:	71fb      	strb	r3, [r7, #7]
 8001520:	4613      	mov	r3, r2
 8001522:	71bb      	strb	r3, [r7, #6]
	switch(Copy_u8EXTIMode)
 8001524:	79bb      	ldrb	r3, [r7, #6]
 8001526:	2b02      	cmp	r3, #2
 8001528:	d01c      	beq.n	8001564 <MEXTI_voidSetSignalLatch+0x50>
 800152a:	2b02      	cmp	r3, #2
 800152c:	dc2f      	bgt.n	800158e <MEXTI_voidSetSignalLatch+0x7a>
 800152e:	2b00      	cmp	r3, #0
 8001530:	d002      	beq.n	8001538 <MEXTI_voidSetSignalLatch+0x24>
 8001532:	2b01      	cmp	r3, #1
 8001534:	d00b      	beq.n	800154e <MEXTI_voidSetSignalLatch+0x3a>
 8001536:	e02a      	b.n	800158e <MEXTI_voidSetSignalLatch+0x7a>
	{
		case RISING :
			SET_BIT(EXTI -> RTSR , Copy_u8EXTILine);
 8001538:	4b1c      	ldr	r3, [pc, #112]	; (80015ac <MEXTI_voidSetSignalLatch+0x98>)
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	79fa      	ldrb	r2, [r7, #7]
 800153e:	2101      	movs	r1, #1
 8001540:	fa01 f202 	lsl.w	r2, r1, r2
 8001544:	4611      	mov	r1, r2
 8001546:	4a19      	ldr	r2, [pc, #100]	; (80015ac <MEXTI_voidSetSignalLatch+0x98>)
 8001548:	430b      	orrs	r3, r1
 800154a:	6093      	str	r3, [r2, #8]
			break;
 800154c:	e01f      	b.n	800158e <MEXTI_voidSetSignalLatch+0x7a>
		
		case FALLING :
			SET_BIT(EXTI -> FTSR , Copy_u8EXTILine); 	
 800154e:	4b17      	ldr	r3, [pc, #92]	; (80015ac <MEXTI_voidSetSignalLatch+0x98>)
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	79fa      	ldrb	r2, [r7, #7]
 8001554:	2101      	movs	r1, #1
 8001556:	fa01 f202 	lsl.w	r2, r1, r2
 800155a:	4611      	mov	r1, r2
 800155c:	4a13      	ldr	r2, [pc, #76]	; (80015ac <MEXTI_voidSetSignalLatch+0x98>)
 800155e:	430b      	orrs	r3, r1
 8001560:	60d3      	str	r3, [r2, #12]
			break;
 8001562:	e014      	b.n	800158e <MEXTI_voidSetSignalLatch+0x7a>
		
		case ON_CHANGE :
			SET_BIT(EXTI -> RTSR , Copy_u8EXTILine);
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <MEXTI_voidSetSignalLatch+0x98>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	79fa      	ldrb	r2, [r7, #7]
 800156a:	2101      	movs	r1, #1
 800156c:	fa01 f202 	lsl.w	r2, r1, r2
 8001570:	4611      	mov	r1, r2
 8001572:	4a0e      	ldr	r2, [pc, #56]	; (80015ac <MEXTI_voidSetSignalLatch+0x98>)
 8001574:	430b      	orrs	r3, r1
 8001576:	6093      	str	r3, [r2, #8]
			SET_BIT(EXTI -> FTSR , Copy_u8EXTILine); 	
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <MEXTI_voidSetSignalLatch+0x98>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	79fa      	ldrb	r2, [r7, #7]
 800157e:	2101      	movs	r1, #1
 8001580:	fa01 f202 	lsl.w	r2, r1, r2
 8001584:	4611      	mov	r1, r2
 8001586:	4a09      	ldr	r2, [pc, #36]	; (80015ac <MEXTI_voidSetSignalLatch+0x98>)
 8001588:	430b      	orrs	r3, r1
 800158a:	60d3      	str	r3, [r2, #12]
			break;
 800158c:	bf00      	nop
	}
	SET_BIT(EXTI -> IMR , Copy_u8EXTILine);
 800158e:	4b07      	ldr	r3, [pc, #28]	; (80015ac <MEXTI_voidSetSignalLatch+0x98>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	79fa      	ldrb	r2, [r7, #7]
 8001594:	2101      	movs	r1, #1
 8001596:	fa01 f202 	lsl.w	r2, r1, r2
 800159a:	4611      	mov	r1, r2
 800159c:	4a03      	ldr	r2, [pc, #12]	; (80015ac <MEXTI_voidSetSignalLatch+0x98>)
 800159e:	430b      	orrs	r3, r1
 80015a0:	6013      	str	r3, [r2, #0]
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr
 80015ac:	40010400 	.word	0x40010400

080015b0 <EXTI_voidSetCallBack>:


void EXTI_voidSetCallBack(void (*ptr) (void) , u8 Copy_u8EXTILine)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	70fb      	strb	r3, [r7, #3]
	EXTI_GlobalPtr[Copy_u8EXTILine] = ptr;
 80015bc:	78fb      	ldrb	r3, [r7, #3]
 80015be:	4904      	ldr	r1, [pc, #16]	; (80015d0 <EXTI_voidSetCallBack+0x20>)
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr
 80015d0:	20000084 	.word	0x20000084

080015d4 <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
	EXTI_GlobalPtr[0]();
 80015d8:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <EXTI0_IRQHandler+0x1c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4798      	blx	r3
	/*clear pending bit*/
	SET_BIT(EXTI -> PR , 0);
 80015de:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <EXTI0_IRQHandler+0x20>)
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	4a04      	ldr	r2, [pc, #16]	; (80015f4 <EXTI0_IRQHandler+0x20>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6153      	str	r3, [r2, #20]
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000084 	.word	0x20000084
 80015f4:	40010400 	.word	0x40010400

080015f8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
	EXTI_GlobalPtr[1]();
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <EXTI1_IRQHandler+0x1c>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	4798      	blx	r3
	/*clear pending bit*/
	SET_BIT(EXTI -> PR , 1);
 8001602:	4b05      	ldr	r3, [pc, #20]	; (8001618 <EXTI1_IRQHandler+0x20>)
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	4a04      	ldr	r2, [pc, #16]	; (8001618 <EXTI1_IRQHandler+0x20>)
 8001608:	f043 0302 	orr.w	r3, r3, #2
 800160c:	6153      	str	r3, [r2, #20]
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000084 	.word	0x20000084
 8001618:	40010400 	.word	0x40010400

0800161c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
	EXTI_GlobalPtr[2]();
 8001620:	4b05      	ldr	r3, [pc, #20]	; (8001638 <EXTI2_IRQHandler+0x1c>)
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	4798      	blx	r3
	/*clear pending bit*/
	SET_BIT(EXTI -> PR , 2);
 8001626:	4b05      	ldr	r3, [pc, #20]	; (800163c <EXTI2_IRQHandler+0x20>)
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	4a04      	ldr	r2, [pc, #16]	; (800163c <EXTI2_IRQHandler+0x20>)
 800162c:	f043 0304 	orr.w	r3, r3, #4
 8001630:	6153      	str	r3, [r2, #20]
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000084 	.word	0x20000084
 800163c:	40010400 	.word	0x40010400

08001640 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
	EXTI_GlobalPtr[3]();
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <EXTI3_IRQHandler+0x1c>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	4798      	blx	r3
	/*clear pending bit*/
	SET_BIT(EXTI -> PR , 3);
 800164a:	4b05      	ldr	r3, [pc, #20]	; (8001660 <EXTI3_IRQHandler+0x20>)
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	4a04      	ldr	r2, [pc, #16]	; (8001660 <EXTI3_IRQHandler+0x20>)
 8001650:	f043 0308 	orr.w	r3, r3, #8
 8001654:	6153      	str	r3, [r2, #20]
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000084 	.word	0x20000084
 8001660:	40010400 	.word	0x40010400

08001664 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
	EXTI_GlobalPtr[4]();
 8001668:	4b05      	ldr	r3, [pc, #20]	; (8001680 <EXTI4_IRQHandler+0x1c>)
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	4798      	blx	r3
	/*clear pending bit*/
	SET_BIT(EXTI -> PR , 4);
 800166e:	4b05      	ldr	r3, [pc, #20]	; (8001684 <EXTI4_IRQHandler+0x20>)
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	4a04      	ldr	r2, [pc, #16]	; (8001684 <EXTI4_IRQHandler+0x20>)
 8001674:	f043 0310 	orr.w	r3, r3, #16
 8001678:	6153      	str	r3, [r2, #20]
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000084 	.word	0x20000084
 8001684:	40010400 	.word	0x40010400

08001688 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
	u8 PinValue_5 , PinValue_6 , PinValue_7 , PinValue_8 , PinValue_9;

	PinValue_5 = GET_BIT(EXTI->PR,5);
 800168e:	4b31      	ldr	r3, [pc, #196]	; (8001754 <EXTI9_5_IRQHandler+0xcc>)
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	095b      	lsrs	r3, r3, #5
 8001694:	b2db      	uxtb	r3, r3
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	71fb      	strb	r3, [r7, #7]
	PinValue_6 = GET_BIT(EXTI->PR,6);
 800169c:	4b2d      	ldr	r3, [pc, #180]	; (8001754 <EXTI9_5_IRQHandler+0xcc>)
 800169e:	695b      	ldr	r3, [r3, #20]
 80016a0:	099b      	lsrs	r3, r3, #6
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	71bb      	strb	r3, [r7, #6]
	PinValue_7 = GET_BIT(EXTI->PR,7);
 80016aa:	4b2a      	ldr	r3, [pc, #168]	; (8001754 <EXTI9_5_IRQHandler+0xcc>)
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	09db      	lsrs	r3, r3, #7
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	717b      	strb	r3, [r7, #5]
	PinValue_8 = GET_BIT(EXTI->PR,8);
 80016b8:	4b26      	ldr	r3, [pc, #152]	; (8001754 <EXTI9_5_IRQHandler+0xcc>)
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	0a1b      	lsrs	r3, r3, #8
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	713b      	strb	r3, [r7, #4]
	PinValue_9 = GET_BIT(EXTI->PR,9);
 80016c6:	4b23      	ldr	r3, [pc, #140]	; (8001754 <EXTI9_5_IRQHandler+0xcc>)
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	0a5b      	lsrs	r3, r3, #9
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	70fb      	strb	r3, [r7, #3]

	if (PinValue_5 == 1)
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d108      	bne.n	80016ec <EXTI9_5_IRQHandler+0x64>
	{
		EXTI_GlobalPtr[5]();
 80016da:	4b1f      	ldr	r3, [pc, #124]	; (8001758 <EXTI9_5_IRQHandler+0xd0>)
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	4798      	blx	r3
		SET_BIT(EXTI -> PR , 5);
 80016e0:	4b1c      	ldr	r3, [pc, #112]	; (8001754 <EXTI9_5_IRQHandler+0xcc>)
 80016e2:	695b      	ldr	r3, [r3, #20]
 80016e4:	4a1b      	ldr	r2, [pc, #108]	; (8001754 <EXTI9_5_IRQHandler+0xcc>)
 80016e6:	f043 0320 	orr.w	r3, r3, #32
 80016ea:	6153      	str	r3, [r2, #20]
	}

	if (PinValue_6 == 1)
 80016ec:	79bb      	ldrb	r3, [r7, #6]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d108      	bne.n	8001704 <EXTI9_5_IRQHandler+0x7c>
	{
		EXTI_GlobalPtr[6]();
 80016f2:	4b19      	ldr	r3, [pc, #100]	; (8001758 <EXTI9_5_IRQHandler+0xd0>)
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	4798      	blx	r3
		SET_BIT(EXTI -> PR , 6);
 80016f8:	4b16      	ldr	r3, [pc, #88]	; (8001754 <EXTI9_5_IRQHandler+0xcc>)
 80016fa:	695b      	ldr	r3, [r3, #20]
 80016fc:	4a15      	ldr	r2, [pc, #84]	; (8001754 <EXTI9_5_IRQHandler+0xcc>)
 80016fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001702:	6153      	str	r3, [r2, #20]
	}

	if (PinValue_7 == 1)
 8001704:	797b      	ldrb	r3, [r7, #5]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d108      	bne.n	800171c <EXTI9_5_IRQHandler+0x94>
	{
		EXTI_GlobalPtr[7]();
 800170a:	4b13      	ldr	r3, [pc, #76]	; (8001758 <EXTI9_5_IRQHandler+0xd0>)
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	4798      	blx	r3
		SET_BIT(EXTI -> PR , 7);
 8001710:	4b10      	ldr	r3, [pc, #64]	; (8001754 <EXTI9_5_IRQHandler+0xcc>)
 8001712:	695b      	ldr	r3, [r3, #20]
 8001714:	4a0f      	ldr	r2, [pc, #60]	; (8001754 <EXTI9_5_IRQHandler+0xcc>)
 8001716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800171a:	6153      	str	r3, [r2, #20]
	}

	if (PinValue_8 == 1)
 800171c:	793b      	ldrb	r3, [r7, #4]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d108      	bne.n	8001734 <EXTI9_5_IRQHandler+0xac>
	{
		EXTI_GlobalPtr[8]();
 8001722:	4b0d      	ldr	r3, [pc, #52]	; (8001758 <EXTI9_5_IRQHandler+0xd0>)
 8001724:	6a1b      	ldr	r3, [r3, #32]
 8001726:	4798      	blx	r3
		SET_BIT(EXTI -> PR , 8);
 8001728:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <EXTI9_5_IRQHandler+0xcc>)
 800172a:	695b      	ldr	r3, [r3, #20]
 800172c:	4a09      	ldr	r2, [pc, #36]	; (8001754 <EXTI9_5_IRQHandler+0xcc>)
 800172e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001732:	6153      	str	r3, [r2, #20]
	}

	if (PinValue_9 == 1)
 8001734:	78fb      	ldrb	r3, [r7, #3]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d108      	bne.n	800174c <EXTI9_5_IRQHandler+0xc4>
	{
		EXTI_GlobalPtr[9]();
 800173a:	4b07      	ldr	r3, [pc, #28]	; (8001758 <EXTI9_5_IRQHandler+0xd0>)
 800173c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173e:	4798      	blx	r3
		SET_BIT(EXTI -> PR , 9);
 8001740:	4b04      	ldr	r3, [pc, #16]	; (8001754 <EXTI9_5_IRQHandler+0xcc>)
 8001742:	695b      	ldr	r3, [r3, #20]
 8001744:	4a03      	ldr	r2, [pc, #12]	; (8001754 <EXTI9_5_IRQHandler+0xcc>)
 8001746:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800174a:	6153      	str	r3, [r2, #20]
	}

}
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40010400 	.word	0x40010400
 8001758:	20000084 	.word	0x20000084

0800175c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
	u8 PinValue_10 , PinValue_11 , PinValue_12 , PinValue_13 , PinValue_14 , PinValue_15;

	PinValue_10 = GET_BIT(EXTI->PR,10);
 8001762:	4b3b      	ldr	r3, [pc, #236]	; (8001850 <EXTI15_10_IRQHandler+0xf4>)
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	0a9b      	lsrs	r3, r3, #10
 8001768:	b2db      	uxtb	r3, r3
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	71fb      	strb	r3, [r7, #7]
	PinValue_11 = GET_BIT(EXTI->PR,11);
 8001770:	4b37      	ldr	r3, [pc, #220]	; (8001850 <EXTI15_10_IRQHandler+0xf4>)
 8001772:	695b      	ldr	r3, [r3, #20]
 8001774:	0adb      	lsrs	r3, r3, #11
 8001776:	b2db      	uxtb	r3, r3
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	71bb      	strb	r3, [r7, #6]
	PinValue_12 = GET_BIT(EXTI->PR,12);
 800177e:	4b34      	ldr	r3, [pc, #208]	; (8001850 <EXTI15_10_IRQHandler+0xf4>)
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	0b1b      	lsrs	r3, r3, #12
 8001784:	b2db      	uxtb	r3, r3
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	717b      	strb	r3, [r7, #5]
	PinValue_13 = GET_BIT(EXTI->PR,13);
 800178c:	4b30      	ldr	r3, [pc, #192]	; (8001850 <EXTI15_10_IRQHandler+0xf4>)
 800178e:	695b      	ldr	r3, [r3, #20]
 8001790:	0b5b      	lsrs	r3, r3, #13
 8001792:	b2db      	uxtb	r3, r3
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	713b      	strb	r3, [r7, #4]
	PinValue_14 = GET_BIT(EXTI->PR,14);
 800179a:	4b2d      	ldr	r3, [pc, #180]	; (8001850 <EXTI15_10_IRQHandler+0xf4>)
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	0b9b      	lsrs	r3, r3, #14
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	70fb      	strb	r3, [r7, #3]
	PinValue_15 = GET_BIT(EXTI->PR,14);
 80017a8:	4b29      	ldr	r3, [pc, #164]	; (8001850 <EXTI15_10_IRQHandler+0xf4>)
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	0b9b      	lsrs	r3, r3, #14
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	70bb      	strb	r3, [r7, #2]

	if (PinValue_10 == 1)
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d108      	bne.n	80017ce <EXTI15_10_IRQHandler+0x72>
	{
		EXTI_GlobalPtr[10]();
 80017bc:	4b25      	ldr	r3, [pc, #148]	; (8001854 <EXTI15_10_IRQHandler+0xf8>)
 80017be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c0:	4798      	blx	r3
		SET_BIT(EXTI -> PR , 10);
 80017c2:	4b23      	ldr	r3, [pc, #140]	; (8001850 <EXTI15_10_IRQHandler+0xf4>)
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	4a22      	ldr	r2, [pc, #136]	; (8001850 <EXTI15_10_IRQHandler+0xf4>)
 80017c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017cc:	6153      	str	r3, [r2, #20]
	}

	if (PinValue_11 == 1)
 80017ce:	79bb      	ldrb	r3, [r7, #6]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d108      	bne.n	80017e6 <EXTI15_10_IRQHandler+0x8a>
	{
		EXTI_GlobalPtr[11]();
 80017d4:	4b1f      	ldr	r3, [pc, #124]	; (8001854 <EXTI15_10_IRQHandler+0xf8>)
 80017d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d8:	4798      	blx	r3
		SET_BIT(EXTI -> PR , 11);
 80017da:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <EXTI15_10_IRQHandler+0xf4>)
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	4a1c      	ldr	r2, [pc, #112]	; (8001850 <EXTI15_10_IRQHandler+0xf4>)
 80017e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017e4:	6153      	str	r3, [r2, #20]
	}

	if (PinValue_12 == 1)
 80017e6:	797b      	ldrb	r3, [r7, #5]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d108      	bne.n	80017fe <EXTI15_10_IRQHandler+0xa2>
	{
		EXTI_GlobalPtr[12]();
 80017ec:	4b19      	ldr	r3, [pc, #100]	; (8001854 <EXTI15_10_IRQHandler+0xf8>)
 80017ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f0:	4798      	blx	r3
		SET_BIT(EXTI -> PR , 12);
 80017f2:	4b17      	ldr	r3, [pc, #92]	; (8001850 <EXTI15_10_IRQHandler+0xf4>)
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	4a16      	ldr	r2, [pc, #88]	; (8001850 <EXTI15_10_IRQHandler+0xf4>)
 80017f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017fc:	6153      	str	r3, [r2, #20]
	}

	if (PinValue_13 == 1)
 80017fe:	793b      	ldrb	r3, [r7, #4]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d108      	bne.n	8001816 <EXTI15_10_IRQHandler+0xba>
	{
		EXTI_GlobalPtr[13]();
 8001804:	4b13      	ldr	r3, [pc, #76]	; (8001854 <EXTI15_10_IRQHandler+0xf8>)
 8001806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001808:	4798      	blx	r3
		SET_BIT(EXTI -> PR , 13);
 800180a:	4b11      	ldr	r3, [pc, #68]	; (8001850 <EXTI15_10_IRQHandler+0xf4>)
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	4a10      	ldr	r2, [pc, #64]	; (8001850 <EXTI15_10_IRQHandler+0xf4>)
 8001810:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001814:	6153      	str	r3, [r2, #20]
	}

	if (PinValue_14 == 1)
 8001816:	78fb      	ldrb	r3, [r7, #3]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d108      	bne.n	800182e <EXTI15_10_IRQHandler+0xd2>
	{
		EXTI_GlobalPtr[14]();
 800181c:	4b0d      	ldr	r3, [pc, #52]	; (8001854 <EXTI15_10_IRQHandler+0xf8>)
 800181e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001820:	4798      	blx	r3
		SET_BIT(EXTI -> PR , 14);
 8001822:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <EXTI15_10_IRQHandler+0xf4>)
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	4a0a      	ldr	r2, [pc, #40]	; (8001850 <EXTI15_10_IRQHandler+0xf4>)
 8001828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800182c:	6153      	str	r3, [r2, #20]
	}

	if (PinValue_15 == 1)
 800182e:	78bb      	ldrb	r3, [r7, #2]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d108      	bne.n	8001846 <EXTI15_10_IRQHandler+0xea>
	{
		EXTI_GlobalPtr[15]();
 8001834:	4b07      	ldr	r3, [pc, #28]	; (8001854 <EXTI15_10_IRQHandler+0xf8>)
 8001836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001838:	4798      	blx	r3
		SET_BIT(EXTI -> PR , 15);
 800183a:	4b05      	ldr	r3, [pc, #20]	; (8001850 <EXTI15_10_IRQHandler+0xf4>)
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	4a04      	ldr	r2, [pc, #16]	; (8001850 <EXTI15_10_IRQHandler+0xf4>)
 8001840:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001844:	6153      	str	r3, [r2, #20]
	}

}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40010400 	.word	0x40010400
 8001854:	20000084 	.word	0x20000084

08001858 <HENCODER_voidEncoderCounts>:
		return Global_u8MotorRightDirection;
	}
}

s32 HENCODER_voidEncoderCounts(u8 Copy_u8Channel2Port ,u8 Copy_u8Channel2Pin)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	460a      	mov	r2, r1
 8001862:	71fb      	strb	r3, [r7, #7]
 8001864:	4613      	mov	r3, r2
 8001866:	71bb      	strb	r3, [r7, #6]
	//u8 MotorDirection ;
	u8 Local_u8ChannelState ;

	Local_u8ChannelState = MGPIO_u8GetPinValue(Copy_u8Channel2Port ,Copy_u8Channel2Pin+1);
 8001868:	79bb      	ldrb	r3, [r7, #6]
 800186a:	3301      	adds	r3, #1
 800186c:	b2da      	uxtb	r2, r3
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	4611      	mov	r1, r2
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fdfc 	bl	8001470 <MGPIO_u8GetPinValue>
 8001878:	4603      	mov	r3, r0
 800187a:	73fb      	strb	r3, [r7, #15]
	
	if (Copy_u8Channel2Pin == 8)
 800187c:	79bb      	ldrb	r3, [r7, #6]
 800187e:	2b08      	cmp	r3, #8
 8001880:	d119      	bne.n	80018b6 <HENCODER_voidEncoderCounts+0x5e>
	{
		if(Local_u8ChannelState == HIGH)
 8001882:	7bfb      	ldrb	r3, [r7, #15]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d108      	bne.n	800189a <HENCODER_voidEncoderCounts+0x42>
		{
			Global_u8MotorLeftDirection = ClockwiseDirection;
 8001888:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <HENCODER_voidEncoderCounts+0x98>)
 800188a:	2201      	movs	r2, #1
 800188c:	701a      	strb	r2, [r3, #0]
			Global_s32NumOfLeftCounts--;
 800188e:	4b19      	ldr	r3, [pc, #100]	; (80018f4 <HENCODER_voidEncoderCounts+0x9c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	3b01      	subs	r3, #1
 8001894:	4a17      	ldr	r2, [pc, #92]	; (80018f4 <HENCODER_voidEncoderCounts+0x9c>)
 8001896:	6013      	str	r3, [r2, #0]
 8001898:	e00a      	b.n	80018b0 <HENCODER_voidEncoderCounts+0x58>
		}
		else if (Local_u8ChannelState == LOW)
 800189a:	7bfb      	ldrb	r3, [r7, #15]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d107      	bne.n	80018b0 <HENCODER_voidEncoderCounts+0x58>
		{
			Global_u8MotorLeftDirection = CounterClockwiseDirection;
 80018a0:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <HENCODER_voidEncoderCounts+0x98>)
 80018a2:	2202      	movs	r2, #2
 80018a4:	701a      	strb	r2, [r3, #0]
			Global_s32NumOfLeftCounts++;
 80018a6:	4b13      	ldr	r3, [pc, #76]	; (80018f4 <HENCODER_voidEncoderCounts+0x9c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	3301      	adds	r3, #1
 80018ac:	4a11      	ldr	r2, [pc, #68]	; (80018f4 <HENCODER_voidEncoderCounts+0x9c>)
 80018ae:	6013      	str	r3, [r2, #0]
		}

	return Global_s32NumOfLeftCounts;
 80018b0:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <HENCODER_voidEncoderCounts+0x9c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	e018      	b.n	80018e8 <HENCODER_voidEncoderCounts+0x90>
	}

	else //if (Copy_u8Channel2Pin == 10)
	{
		if(Local_u8ChannelState == HIGH)
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d108      	bne.n	80018ce <HENCODER_voidEncoderCounts+0x76>
		{
			Global_u8MotorRightDirection = ClockwiseDirection;
 80018bc:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <HENCODER_voidEncoderCounts+0xa0>)
 80018be:	2201      	movs	r2, #1
 80018c0:	701a      	strb	r2, [r3, #0]
			Global_s32NumOfRightCounts++;
 80018c2:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <HENCODER_voidEncoderCounts+0xa4>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	3301      	adds	r3, #1
 80018c8:	4a0c      	ldr	r2, [pc, #48]	; (80018fc <HENCODER_voidEncoderCounts+0xa4>)
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	e00a      	b.n	80018e4 <HENCODER_voidEncoderCounts+0x8c>
		}
		else if (Local_u8ChannelState == LOW)
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d107      	bne.n	80018e4 <HENCODER_voidEncoderCounts+0x8c>
		{
			Global_u8MotorRightDirection = CounterClockwiseDirection;
 80018d4:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <HENCODER_voidEncoderCounts+0xa0>)
 80018d6:	2202      	movs	r2, #2
 80018d8:	701a      	strb	r2, [r3, #0]
			Global_s32NumOfRightCounts--;
 80018da:	4b08      	ldr	r3, [pc, #32]	; (80018fc <HENCODER_voidEncoderCounts+0xa4>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	3b01      	subs	r3, #1
 80018e0:	4a06      	ldr	r2, [pc, #24]	; (80018fc <HENCODER_voidEncoderCounts+0xa4>)
 80018e2:	6013      	str	r3, [r2, #0]
		}

	return Global_s32NumOfRightCounts;
 80018e4:	4b05      	ldr	r3, [pc, #20]	; (80018fc <HENCODER_voidEncoderCounts+0xa4>)
 80018e6:	681b      	ldr	r3, [r3, #0]
	}
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	200000c5 	.word	0x200000c5
 80018f4:	200000cc 	.word	0x200000cc
 80018f8:	200000c4 	.word	0x200000c4
 80018fc:	200000c8 	.word	0x200000c8

08001900 <HENCODER_s32GetZeroCounts>:


void HENCODER_s32GetZeroCounts(u8 Copy_u8Channel2Pin)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	71fb      	strb	r3, [r7, #7]
	if(Copy_u8Channel2Pin == 8)
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	2b08      	cmp	r3, #8
 800190e:	d103      	bne.n	8001918 <HENCODER_s32GetZeroCounts+0x18>
	{
		Global_s32NumOfLeftCounts = 0;
 8001910:	4b07      	ldr	r3, [pc, #28]	; (8001930 <HENCODER_s32GetZeroCounts+0x30>)
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
	else if (Copy_u8Channel2Pin == 10)
	{
		Global_s32NumOfRightCounts = 0;
	}
	//return Global_s32NumOfCounts;
}
 8001916:	e005      	b.n	8001924 <HENCODER_s32GetZeroCounts+0x24>
	else if (Copy_u8Channel2Pin == 10)
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	2b0a      	cmp	r3, #10
 800191c:	d102      	bne.n	8001924 <HENCODER_s32GetZeroCounts+0x24>
		Global_s32NumOfRightCounts = 0;
 800191e:	4b05      	ldr	r3, [pc, #20]	; (8001934 <HENCODER_s32GetZeroCounts+0x34>)
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	200000cc 	.word	0x200000cc
 8001934:	200000c8 	.word	0x200000c8

08001938 <HENCODER_f32GetZeroDistance>:
	Global_f32Distance = Global_f32Distance + (Copy_s32EncoderCounts*2*Pi*WheelRadius)/EncoderResolution;
	return Global_f32Distance;
}

void HENCODER_f32GetZeroDistance(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
	Global_f32Distance = 0;
 800193c:	4b03      	ldr	r3, [pc, #12]	; (800194c <HENCODER_f32GetZeroDistance+0x14>)
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr
 800194c:	200000d0 	.word	0x200000d0

08001950 <MNVIC_voidEnableInterrupt>:
#include "NVIC/NVIC_config.h"
#include "NVIC/NVIC_private.h"


void MNVIC_voidEnableInterrupt (u8 Copy_u8IntNumber)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
	if ( Copy_u8IntNumber <= 31)
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	2b1f      	cmp	r3, #31
 800195e:	d805      	bhi.n	800196c <MNVIC_voidEnableInterrupt+0x1c>
	{
		NVIC_ISER0 = (1 << Copy_u8IntNumber);
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	2201      	movs	r2, #1
 8001964:	409a      	lsls	r2, r3
 8001966:	4b09      	ldr	r3, [pc, #36]	; (800198c <MNVIC_voidEnableInterrupt+0x3c>)
 8001968:	601a      	str	r2, [r3, #0]
	{
		Copy_u8IntNumber -= 32;
		NVIC_ISER1 = (1 << Copy_u8IntNumber);
	}
	
}
 800196a:	e00a      	b.n	8001982 <MNVIC_voidEnableInterrupt+0x32>
	else if (  Copy_u8IntNumber <= 59)
 800196c:	79fb      	ldrb	r3, [r7, #7]
 800196e:	2b3b      	cmp	r3, #59	; 0x3b
 8001970:	d807      	bhi.n	8001982 <MNVIC_voidEnableInterrupt+0x32>
		Copy_u8IntNumber -= 32;
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	3b20      	subs	r3, #32
 8001976:	71fb      	strb	r3, [r7, #7]
		NVIC_ISER1 = (1 << Copy_u8IntNumber);
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	2201      	movs	r2, #1
 800197c:	409a      	lsls	r2, r3
 800197e:	4b04      	ldr	r3, [pc, #16]	; (8001990 <MNVIC_voidEnableInterrupt+0x40>)
 8001980:	601a      	str	r2, [r3, #0]
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr
 800198c:	e000e100 	.word	0xe000e100
 8001990:	e000e104 	.word	0xe000e104

08001994 <RCC_voidInitSysClock>:
#include "RCC/RCC_interface.h"
#include "RCC/RCC_private.h"
#include "RCC/RCC_config.h"

void RCC_voidInitSysClock(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
	#if     RCC_CLOCK_TYPE == RCC_HSE_CRYSTAL
		RCC_CR   = 0x00010000; /* Enable HSE with no bypass */
 8001998:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <RCC_voidInitSysClock+0x1c>)
 800199a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800199e:	601a      	str	r2, [r3, #0]
		RCC_CFGR = 0x00000001;
 80019a0:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <RCC_voidInitSysClock+0x20>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	601a      	str	r2, [r3, #0]
		#endif
	
	#else
		#error("You chosed Wrong Clock type")
	#endif
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	40021000 	.word	0x40021000
 80019b4:	40021004 	.word	0x40021004

080019b8 <RCC_voidEnableClock>:


void RCC_voidEnableClock(u8 Copy_u8BusId, u8 Copy_u8PeripheralId)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	460a      	mov	r2, r1
 80019c2:	71fb      	strb	r3, [r7, #7]
 80019c4:	4613      	mov	r3, r2
 80019c6:	71bb      	strb	r3, [r7, #6]
	/*check input validation (32 bits)*/
	if (Copy_u8PeripheralId <= 31)     
 80019c8:	79bb      	ldrb	r3, [r7, #6]
 80019ca:	2b1f      	cmp	r3, #31
 80019cc:	d82a      	bhi.n	8001a24 <RCC_voidEnableClock+0x6c>
	{
		switch (Copy_u8BusId)
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d01c      	beq.n	8001a0e <RCC_voidEnableClock+0x56>
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	dc26      	bgt.n	8001a26 <RCC_voidEnableClock+0x6e>
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d002      	beq.n	80019e2 <RCC_voidEnableClock+0x2a>
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d00b      	beq.n	80019f8 <RCC_voidEnableClock+0x40>
	/*else
	{
		// Return Error 
	}*/

}
 80019e0:	e021      	b.n	8001a26 <RCC_voidEnableClock+0x6e>
			case RCC_AHB  : SET_BIT(RCC_AHBENR  ,Copy_u8PeripheralId);   
 80019e2:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <RCC_voidEnableClock+0x78>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	79ba      	ldrb	r2, [r7, #6]
 80019e8:	2101      	movs	r1, #1
 80019ea:	fa01 f202 	lsl.w	r2, r1, r2
 80019ee:	4611      	mov	r1, r2
 80019f0:	4a0f      	ldr	r2, [pc, #60]	; (8001a30 <RCC_voidEnableClock+0x78>)
 80019f2:	430b      	orrs	r3, r1
 80019f4:	6013      	str	r3, [r2, #0]
			break;
 80019f6:	e016      	b.n	8001a26 <RCC_voidEnableClock+0x6e>
			case RCC_APB1 : SET_BIT(RCC_APB1ENR ,Copy_u8PeripheralId);   
 80019f8:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <RCC_voidEnableClock+0x7c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	79ba      	ldrb	r2, [r7, #6]
 80019fe:	2101      	movs	r1, #1
 8001a00:	fa01 f202 	lsl.w	r2, r1, r2
 8001a04:	4611      	mov	r1, r2
 8001a06:	4a0b      	ldr	r2, [pc, #44]	; (8001a34 <RCC_voidEnableClock+0x7c>)
 8001a08:	430b      	orrs	r3, r1
 8001a0a:	6013      	str	r3, [r2, #0]
			break;
 8001a0c:	e00b      	b.n	8001a26 <RCC_voidEnableClock+0x6e>
			case RCC_APB2 : SET_BIT(RCC_APB2ENR ,Copy_u8PeripheralId);   
 8001a0e:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <RCC_voidEnableClock+0x80>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	79ba      	ldrb	r2, [r7, #6]
 8001a14:	2101      	movs	r1, #1
 8001a16:	fa01 f202 	lsl.w	r2, r1, r2
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	4a06      	ldr	r2, [pc, #24]	; (8001a38 <RCC_voidEnableClock+0x80>)
 8001a1e:	430b      	orrs	r3, r1
 8001a20:	6013      	str	r3, [r2, #0]
			break;
 8001a22:	e000      	b.n	8001a26 <RCC_voidEnableClock+0x6e>
	}
 8001a24:	bf00      	nop
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr
 8001a30:	40021014 	.word	0x40021014
 8001a34:	4002101c 	.word	0x4002101c
 8001a38:	40021018 	.word	0x40021018

08001a3c <MSTK_voidInit>:
/* Define Variable for interval mode */
static u8 MSTK_u8ModeOfInterval;


void MSTK_voidInit(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
#if MSTK_CLK_SRC == MSTK_SRC_AHB
    /* Disable STK - Disable STK Interrupt - Set clock source AHB */
	MSTK -> CTRL = 0x00000004;
#else
    /* Disable STK - Disable STK Interrupt - Set clock source AHB/8 */
	MSTK -> CTRL = 0;	
 8001a40:	4b03      	ldr	r3, [pc, #12]	; (8001a50 <MSTK_voidInit+0x14>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
#endif
}
 8001a46:	bf00      	nop
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	e000e010 	.word	0xe000e010

08001a54 <MSTK_voidSetBusyWait>:

		/*synchronous function*/
void MSTK_voidSetBusyWait( u32 Copy_u32Ticks )
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
	/* Load ticks to load register */
	MSTK -> LOAD = Copy_u32Ticks;
 8001a5c:	4a10      	ldr	r2, [pc, #64]	; (8001aa0 <MSTK_voidSetBusyWait+0x4c>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6053      	str	r3, [r2, #4]
	/* Start Timer */
	SET_BIT(MSTK -> CTRL, 0);
 8001a62:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <MSTK_voidSetBusyWait+0x4c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a0e      	ldr	r2, [pc, #56]	; (8001aa0 <MSTK_voidSetBusyWait+0x4c>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	6013      	str	r3, [r2, #0]
	/* Wait till flag is raised */
	while( (GET_BIT(MSTK -> CTRL,16)) == 0);
 8001a6e:	bf00      	nop
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <MSTK_voidSetBusyWait+0x4c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	0c1b      	lsrs	r3, r3, #16
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0f8      	beq.n	8001a70 <MSTK_voidSetBusyWait+0x1c>
	/* Stop Timer */
	SET_BIT(MSTK -> CTRL, 0);
 8001a7e:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <MSTK_voidSetBusyWait+0x4c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a07      	ldr	r2, [pc, #28]	; (8001aa0 <MSTK_voidSetBusyWait+0x4c>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	6013      	str	r3, [r2, #0]
	MSTK -> LOAD = 0;
 8001a8a:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <MSTK_voidSetBusyWait+0x4c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	605a      	str	r2, [r3, #4]
	MSTK -> VAL  = 0;	
 8001a90:	4b03      	ldr	r3, [pc, #12]	; (8001aa0 <MSTK_voidSetBusyWait+0x4c>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr
 8001aa0:	e000e010 	.word	0xe000e010

08001aa4 <MSTK_voidSetIntervalPeriodic>:
	SET_BIT(MSTK -> CTRL, 1);
}

			/*Asynchronous function count periodic*/
void MSTK_voidSetIntervalPeriodic( u32 Copy_u32Ticks, void (*Copy_ptr)(void) )
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
	/* Load ticks to load register */
	MSTK -> LOAD = Copy_u32Ticks;
 8001aae:	4a0d      	ldr	r2, [pc, #52]	; (8001ae4 <MSTK_voidSetIntervalPeriodic+0x40>)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6053      	str	r3, [r2, #4]
	/* Start Timer */
	SET_BIT(MSTK -> CTRL, 0);
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <MSTK_voidSetIntervalPeriodic+0x40>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a0a      	ldr	r2, [pc, #40]	; (8001ae4 <MSTK_voidSetIntervalPeriodic+0x40>)
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	6013      	str	r3, [r2, #0]
	/* Save CallBack */
	MSTK_GlobalPtr = Copy_ptr;
 8001ac0:	4a09      	ldr	r2, [pc, #36]	; (8001ae8 <MSTK_voidSetIntervalPeriodic+0x44>)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	6013      	str	r3, [r2, #0]
	/* Set Mode to Single */
	MSTK_u8ModeOfInterval = MSTK_PERIOD_INTERVAL;
 8001ac6:	4b09      	ldr	r3, [pc, #36]	; (8001aec <MSTK_voidSetIntervalPeriodic+0x48>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	701a      	strb	r2, [r3, #0]
	/* Enable STK Interrupt */
	SET_BIT(MSTK -> CTRL, 1);
 8001acc:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <MSTK_voidSetIntervalPeriodic+0x40>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a04      	ldr	r2, [pc, #16]	; (8001ae4 <MSTK_voidSetIntervalPeriodic+0x40>)
 8001ad2:	f043 0302 	orr.w	r3, r3, #2
 8001ad6:	6013      	str	r3, [r2, #0]
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	e000e010 	.word	0xe000e010
 8001ae8:	200000d4 	.word	0x200000d4
 8001aec:	200000d8 	.word	0x200000d8

08001af0 <SysTick_Handler>:
	return Local_u32RemainTime;
}


void SysTick_Handler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
	u8 Local_u8Temporary;

	if (MSTK_u8ModeOfInterval == MSTK_SINGLE_INTERVAL)
 8001af6:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <SysTick_Handler+0x50>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d111      	bne.n	8001b22 <SysTick_Handler+0x32>
	{
		/* Disable STK Interrupt */
		CLR_BIT(MSTK -> CTRL, 1);
 8001afe:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <SysTick_Handler+0x54>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a10      	ldr	r2, [pc, #64]	; (8001b44 <SysTick_Handler+0x54>)
 8001b04:	f023 0302 	bic.w	r3, r3, #2
 8001b08:	6013      	str	r3, [r2, #0]
		/* Stop Timer */
		SET_BIT(MSTK -> CTRL, 0);
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <SysTick_Handler+0x54>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a0d      	ldr	r2, [pc, #52]	; (8001b44 <SysTick_Handler+0x54>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6013      	str	r3, [r2, #0]
		MSTK -> LOAD = 0;
 8001b16:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <SysTick_Handler+0x54>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	605a      	str	r2, [r3, #4]
		MSTK -> VAL  = 0;
 8001b1c:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <SysTick_Handler+0x54>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
	}

	/* Callback notification */
	MSTK_GlobalPtr();
 8001b22:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <SysTick_Handler+0x58>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4798      	blx	r3

	/* Clear interrupt flag */
	Local_u8Temporary = GET_BIT(MSTK -> CTRL,16);
 8001b28:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <SysTick_Handler+0x54>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	0c1b      	lsrs	r3, r3, #16
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	71fb      	strb	r3, [r7, #7]
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	200000d8 	.word	0x200000d8
 8001b44:	e000e010 	.word	0xe000e010
 8001b48:	200000d4 	.word	0x200000d4

08001b4c <MTIM2_voidInitC2>:
#include "TIM2/TIM2_interface.h"
#include "TIM2/TIM2_private.h"
#include "TIM2/TIM2_config.h"

void MTIM2_voidInitC2 (void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
	
	/*direction of counter when it is edge aligned mode , no need for this bit if centered aligned*/
	CLR_BIT(TIM2 -> CR1 , 4);
 8001b50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b5a:	f023 0310 	bic.w	r3, r3, #16
 8001b5e:	6013      	str	r3, [r2, #0]
	TIM2->CR1 |= (CR1_DIR << 4);
 8001b60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b6a:	f043 0310 	orr.w	r3, r3, #16
 8001b6e:	6013      	str	r3, [r2, #0]
	
	/*prescaler value*/
	TIM2->PSC = TIM_PRESCALER;
 8001b70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b74:	2208      	movs	r2, #8
 8001b76:	629a      	str	r2, [r3, #40]	; 0x28
	
	/*if there is interrupt then DIER_UIE must be enabled*/
	SET_BIT(TIM2 -> DIER , 0);
 8001b78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	60d3      	str	r3, [r2, #12]
	
	/*enable channel2*/
	SET_BIT(TIM2->CCER , 4);
 8001b88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
 8001b8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b92:	f043 0310 	orr.w	r3, r3, #16
 8001b96:	6213      	str	r3, [r2, #32]

	/*enable pwm mode 1 - channel 2*/
	CLR_BIT(TIM2->CCMR1 , 12);
 8001b98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ba2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ba6:	6193      	str	r3, [r2, #24]
	SET_BIT(TIM2->CCMR1 , 13);
 8001ba8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bb2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bb6:	6193      	str	r3, [r2, #24]
	SET_BIT(TIM2->CCMR1 , 14);
 8001bb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc6:	6193      	str	r3, [r2, #24]

	/*enable output compare -- update value after overflow or immediately*/
	CLR_BIT(TIM2->CCMR1 , 11);   //immediately
 8001bc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001bd6:	6193      	str	r3, [r2, #24]

	/*enable auto reload preload for PWM*/
	SET_BIT(TIM2 -> CR1 , 7);
 8001bd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be6:	6013      	str	r3, [r2, #0]

	/*load desired value of ARR*/
	TIM2->ARR  = 100;
 8001be8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bec:	2264      	movs	r2, #100	; 0x64
 8001bee:	62da      	str	r2, [r3, #44]	; 0x2c

	/*enable counter*/
	SET_BIT(TIM2 -> CR1 , 0);
 8001bf0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	6013      	str	r3, [r2, #0]
	/*enable update generation*/
	SET_BIT(TIM2 -> EGR , 0);
 8001c00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c0a:	f043 0301 	orr.w	r3, r3, #1
 8001c0e:	6153      	str	r3, [r2, #20]

}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr

08001c18 <MTIM2_voidOutputPWM_C2>:
	CLR_BIT(TIM2 -> SR , 0);
	
}

void MTIM2_voidOutputPWM_C2 (u16 Copy_16CompareValue)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	80fb      	strh	r3, [r7, #6]
	/*load the desired value -- channel2*/
	CCR2 = Copy_16CompareValue;
 8001c22:	4a04      	ldr	r2, [pc, #16]	; (8001c34 <MTIM2_voidOutputPWM_C2+0x1c>)
 8001c24:	88fb      	ldrh	r3, [r7, #6]
 8001c26:	6013      	str	r3, [r2, #0]
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40000038 	.word	0x40000038

08001c38 <MTIM3_voidInit>:
#include "TIM3/TIM3_interface.h"
#include "TIM3/TIM3_private.h"
#include "TIM3/TIM3_config.h"

void MTIM3_voidInit (void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
	
	/*direction of counter when it is edge aligned mode , no need for this bit if centered aligned*/
	CLR_BIT(TIM3 -> CR1 , 4);
 8001c3c:	4b24      	ldr	r3, [pc, #144]	; (8001cd0 <MTIM3_voidInit+0x98>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a23      	ldr	r2, [pc, #140]	; (8001cd0 <MTIM3_voidInit+0x98>)
 8001c42:	f023 0310 	bic.w	r3, r3, #16
 8001c46:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= (CR1_DIR << 4);
 8001c48:	4b21      	ldr	r3, [pc, #132]	; (8001cd0 <MTIM3_voidInit+0x98>)
 8001c4a:	4a21      	ldr	r2, [pc, #132]	; (8001cd0 <MTIM3_voidInit+0x98>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6013      	str	r3, [r2, #0]
	
	/*prescaler value*/
	TIM3->PSC = TIM_PRESCALER;
 8001c50:	4b1f      	ldr	r3, [pc, #124]	; (8001cd0 <MTIM3_voidInit+0x98>)
 8001c52:	2208      	movs	r2, #8
 8001c54:	629a      	str	r2, [r3, #40]	; 0x28
	
	/*if there is interrupt then DIER_UIE must be enabled*/
	SET_BIT(TIM3 -> DIER , 0);
 8001c56:	4b1e      	ldr	r3, [pc, #120]	; (8001cd0 <MTIM3_voidInit+0x98>)
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	4a1d      	ldr	r2, [pc, #116]	; (8001cd0 <MTIM3_voidInit+0x98>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	60d3      	str	r3, [r2, #12]
	
	/*enable channel1*/
	SET_BIT(TIM3->CCER , 0);
 8001c62:	4b1b      	ldr	r3, [pc, #108]	; (8001cd0 <MTIM3_voidInit+0x98>)
 8001c64:	6a1b      	ldr	r3, [r3, #32]
 8001c66:	4a1a      	ldr	r2, [pc, #104]	; (8001cd0 <MTIM3_voidInit+0x98>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6213      	str	r3, [r2, #32]

	/*enable pwm mode 1 , channel1*/
	CLR_BIT(TIM3->CCMR1 , 4);
 8001c6e:	4b18      	ldr	r3, [pc, #96]	; (8001cd0 <MTIM3_voidInit+0x98>)
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	4a17      	ldr	r2, [pc, #92]	; (8001cd0 <MTIM3_voidInit+0x98>)
 8001c74:	f023 0310 	bic.w	r3, r3, #16
 8001c78:	6193      	str	r3, [r2, #24]
	SET_BIT(TIM3->CCMR1 , 5);
 8001c7a:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <MTIM3_voidInit+0x98>)
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	4a14      	ldr	r2, [pc, #80]	; (8001cd0 <MTIM3_voidInit+0x98>)
 8001c80:	f043 0320 	orr.w	r3, r3, #32
 8001c84:	6193      	str	r3, [r2, #24]
	SET_BIT(TIM3->CCMR1 , 6);
 8001c86:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <MTIM3_voidInit+0x98>)
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	4a11      	ldr	r2, [pc, #68]	; (8001cd0 <MTIM3_voidInit+0x98>)
 8001c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c90:	6193      	str	r3, [r2, #24]

	/*enable output compare -- update value after overflow or immediately*/
	CLR_BIT(TIM3->CCMR1 , 3);   //immediately , channel1
 8001c92:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <MTIM3_voidInit+0x98>)
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	4a0e      	ldr	r2, [pc, #56]	; (8001cd0 <MTIM3_voidInit+0x98>)
 8001c98:	f023 0308 	bic.w	r3, r3, #8
 8001c9c:	6193      	str	r3, [r2, #24]

	/*enable auto reload preload for PWM*/
	SET_BIT(TIM3 -> CR1 , 7);
 8001c9e:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <MTIM3_voidInit+0x98>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a0b      	ldr	r2, [pc, #44]	; (8001cd0 <MTIM3_voidInit+0x98>)
 8001ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ca8:	6013      	str	r3, [r2, #0]

	/*load desired value in ARR*/
	TIM3->ARR  = 100;
 8001caa:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <MTIM3_voidInit+0x98>)
 8001cac:	2264      	movs	r2, #100	; 0x64
 8001cae:	62da      	str	r2, [r3, #44]	; 0x2c

	/*enable counter*/
	SET_BIT(TIM3 -> CR1 , 0);
 8001cb0:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <MTIM3_voidInit+0x98>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a06      	ldr	r2, [pc, #24]	; (8001cd0 <MTIM3_voidInit+0x98>)
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	6013      	str	r3, [r2, #0]
	/*enable update generation*/
	SET_BIT(TIM3 -> EGR , 0);
 8001cbc:	4b04      	ldr	r3, [pc, #16]	; (8001cd0 <MTIM3_voidInit+0x98>)
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	4a03      	ldr	r2, [pc, #12]	; (8001cd0 <MTIM3_voidInit+0x98>)
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	6153      	str	r3, [r2, #20]

}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr
 8001cd0:	40000400 	.word	0x40000400

08001cd4 <MTIM3_voidOutputPWM>:

}


void MTIM3_voidOutputPWM (u16 Copy_u16CompareValue)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	80fb      	strh	r3, [r7, #6]
	/* load desired value in channel 1 */
	CCR1 = Copy_u16CompareValue;
 8001cde:	4a04      	ldr	r2, [pc, #16]	; (8001cf0 <MTIM3_voidOutputPWM+0x1c>)
 8001ce0:	88fb      	ldrh	r3, [r7, #6]
 8001ce2:	6013      	str	r3, [r2, #0]
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	40000434 	.word	0x40000434

08001cf4 <MUSART2_voidInit>:
#include <string.h>

//u8 Global_u8ReceivedData = 0;

void MUSART2_voidInit(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
	/*Enable clock of GPIO, AFIO , USART2*/
	RCC_voidEnableClock(RCC_APB2,2);
 8001cf8:	2102      	movs	r1, #2
 8001cfa:	2002      	movs	r0, #2
 8001cfc:	f7ff fe5c 	bl	80019b8 <RCC_voidEnableClock>
	//RCC_voidEnableClock(RCC_APB2,3);
	RCC_voidEnableClock(RCC_APB2,0);
 8001d00:	2100      	movs	r1, #0
 8001d02:	2002      	movs	r0, #2
 8001d04:	f7ff fe58 	bl	80019b8 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_APB1,17);
 8001d08:	2111      	movs	r1, #17
 8001d0a:	2001      	movs	r0, #1
 8001d0c:	f7ff fe54 	bl	80019b8 <RCC_voidEnableClock>

	/*pin mode*/
	MGPIO_VoidSetPinDirection(GPIOA,PIN2,OUTPUT_10MHZ_AFPP);   // TX
 8001d10:	2209      	movs	r2, #9
 8001d12:	2102      	movs	r1, #2
 8001d14:	2000      	movs	r0, #0
 8001d16:	f7ff fa75 	bl	8001204 <MGPIO_VoidSetPinDirection>
	MGPIO_VoidSetPinDirection(GPIOA,PIN3,INPUT_FLOATING);   // RX
 8001d1a:	2204      	movs	r2, #4
 8001d1c:	2103      	movs	r1, #3
 8001d1e:	2000      	movs	r0, #0
 8001d20:	f7ff fa70 	bl	8001204 <MGPIO_VoidSetPinDirection>

	/*	baud rate = 9600		*/
	//USART2 -> BRR = 0x341;
	USART2 -> BRR = 0x45;
 8001d24:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <MUSART2_voidInit+0x64>)
 8001d26:	2245      	movs	r2, #69	; 0x45
 8001d28:	609a      	str	r2, [r3, #8]

	SET_BIT((USART2-> CR1), 3);			/* Enabling Transmitter */
 8001d2a:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <MUSART2_voidInit+0x64>)
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	4a0a      	ldr	r2, [pc, #40]	; (8001d58 <MUSART2_voidInit+0x64>)
 8001d30:	f043 0308 	orr.w	r3, r3, #8
 8001d34:	60d3      	str	r3, [r2, #12]
	SET_BIT((USART2-> CR1), 2);			/* Enabling Receiver */
 8001d36:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <MUSART2_voidInit+0x64>)
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	4a07      	ldr	r2, [pc, #28]	; (8001d58 <MUSART2_voidInit+0x64>)
 8001d3c:	f043 0304 	orr.w	r3, r3, #4
 8001d40:	60d3      	str	r3, [r2, #12]
	SET_BIT((USART2-> CR1), 13);     	/* Enabling USART */
 8001d42:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <MUSART2_voidInit+0x64>)
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	4a04      	ldr	r2, [pc, #16]	; (8001d58 <MUSART2_voidInit+0x64>)
 8001d48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d4c:	60d3      	str	r3, [r2, #12]
	
	USART2 -> SR = 0;					/* Clearing status register */
 8001d4e:	4b02      	ldr	r3, [pc, #8]	; (8001d58 <MUSART2_voidInit+0x64>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
}
 8001d54:	bf00      	nop
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40004400 	.word	0x40004400

08001d5c <MUSART2_voidSendData>:

void MUSART2_voidSendData(u8 Copy_u16Data)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	71fb      	strb	r3, [r7, #7]
	USART2 -> DR = Copy_u16Data;
 8001d66:	4a0b      	ldr	r2, [pc, #44]	; (8001d94 <MUSART2_voidSendData+0x38>)
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	6053      	str	r3, [r2, #4]
	while((GET_BIT((USART2 -> SR), 6)) == 0);
 8001d6c:	bf00      	nop
 8001d6e:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <MUSART2_voidSendData+0x38>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	099b      	lsrs	r3, r3, #6
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0f8      	beq.n	8001d6e <MUSART2_voidSendData+0x12>
	CLR_BIT(USART2->SR,6);
 8001d7c:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <MUSART2_voidSendData+0x38>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a04      	ldr	r2, [pc, #16]	; (8001d94 <MUSART2_voidSendData+0x38>)
 8001d82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d86:	6013      	str	r3, [r2, #0]

}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40004400 	.word	0x40004400

08001d98 <MUSART2_voidSendString>:

void MUSART2_voidSendString(u8 *Copy_u8String)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
	while( (*Copy_u8String) != '\0' )
 8001da0:	e007      	b.n	8001db2 <MUSART2_voidSendString+0x1a>
		{
			MUSART2_voidSendData(*Copy_u8String);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff ffd8 	bl	8001d5c <MUSART2_voidSendData>
			Copy_u8String++;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3301      	adds	r3, #1
 8001db0:	607b      	str	r3, [r7, #4]
	while( (*Copy_u8String) != '\0' )
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f3      	bne.n	8001da2 <MUSART2_voidSendString+0xa>
		}
}
 8001dba:	bf00      	nop
 8001dbc:	bf00      	nop
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <MUSART2_voidSendNumbers>:

void MUSART2_voidSendNumbers(s32 Copy_s32Number)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b088      	sub	sp, #32
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
	char arr[15];
	/* convert number to string */
	//	gcvt(Copy_s32Number, 8,arr);
	itoa(Copy_s32Number , arr , 10);
 8001dcc:	f107 030c 	add.w	r3, r7, #12
 8001dd0:	220a      	movs	r2, #10
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 fd05 	bl	80027e4 <itoa>
	u8* string = (u8*)arr;
 8001dda:	f107 030c 	add.w	r3, r7, #12
 8001dde:	61fb      	str	r3, [r7, #28]

	MUSART2_voidSendString(string);
 8001de0:	69f8      	ldr	r0, [r7, #28]
 8001de2:	f7ff ffd9 	bl	8001d98 <MUSART2_voidSendString>
}
 8001de6:	bf00      	nop
 8001de8:	3720      	adds	r7, #32
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
	...

08001df0 <MUSART2_u8ReceiveData>:

u8 MUSART2_u8ReceiveData(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
	u8 Loc_u8ReceivedData = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	71fb      	strb	r3, [r7, #7]
	/* wait until receive complete*/
	while((GET_BIT((USART2 -> SR), 5)) == 0);
 8001dfa:	bf00      	nop
 8001dfc:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <MUSART2_u8ReceiveData+0x2c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	095b      	lsrs	r3, r3, #5
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0f8      	beq.n	8001dfc <MUSART2_u8ReceiveData+0xc>
	Loc_u8ReceivedData = USART2 -> DR;
 8001e0a:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <MUSART2_u8ReceiveData+0x2c>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	71fb      	strb	r3, [r7, #7]
	return (Loc_u8ReceivedData);
 8001e10:	79fb      	ldrb	r3, [r7, #7]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr
 8001e1c:	40004400 	.word	0x40004400

08001e20 <MUSART2_u8ReceiveDataBlock>:

u8 MUSART2_u8ReceiveDataBlock(u8* Copy_u8DataArr)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
	u8 Loc_u8Data = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	73fb      	strb	r3, [r7, #15]
	u8 Loc_u8Index = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	73bb      	strb	r3, [r7, #14]

	Loc_u8Data = MUSART2_u8ReceiveData();
 8001e30:	f7ff ffde 	bl	8001df0 <MUSART2_u8ReceiveData>
 8001e34:	4603      	mov	r3, r0
 8001e36:	73fb      	strb	r3, [r7, #15]

	while(Loc_u8Data != '\0')
 8001e38:	e00b      	b.n	8001e52 <MUSART2_u8ReceiveDataBlock+0x32>
	{
		Copy_u8DataArr[Loc_u8Index] = Loc_u8Data;
 8001e3a:	7bbb      	ldrb	r3, [r7, #14]
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	4413      	add	r3, r2
 8001e40:	7bfa      	ldrb	r2, [r7, #15]
 8001e42:	701a      	strb	r2, [r3, #0]
		Loc_u8Index++;
 8001e44:	7bbb      	ldrb	r3, [r7, #14]
 8001e46:	3301      	adds	r3, #1
 8001e48:	73bb      	strb	r3, [r7, #14]
		Loc_u8Data = MUSART2_u8ReceiveData();
 8001e4a:	f7ff ffd1 	bl	8001df0 <MUSART2_u8ReceiveData>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	73fb      	strb	r3, [r7, #15]
	while(Loc_u8Data != '\0')
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1f0      	bne.n	8001e3a <MUSART2_u8ReceiveDataBlock+0x1a>
	}

	return Loc_u8Index;
 8001e58:	7bbb      	ldrb	r3, [r7, #14]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <RightEncoderGetReading>:
s16 Final_Value = 0 ;
s16 Reading = 0 ;

/*ISR of EXTI8 (left encoder)*/
void RightEncoderGetReading (void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
	right_counts = HENCODER_voidEncoderCounts(GPIOA,PIN8);
 8001e68:	2108      	movs	r1, #8
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	f7ff fcf4 	bl	8001858 <HENCODER_voidEncoderCounts>
 8001e70:	4603      	mov	r3, r0
 8001e72:	4a02      	ldr	r2, [pc, #8]	; (8001e7c <RightEncoderGetReading+0x18>)
 8001e74:	6013      	str	r3, [r2, #0]
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	200000dc 	.word	0x200000dc

08001e80 <LeftEncoderGetReading>:

/*ISR of EXTI10 (right encoder)*/
void LeftEncoderGetReading (void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
	left_counts = HENCODER_voidEncoderCounts(GPIOB,PIN10);
 8001e84:	210a      	movs	r1, #10
 8001e86:	2001      	movs	r0, #1
 8001e88:	f7ff fce6 	bl	8001858 <HENCODER_voidEncoderCounts>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	4a02      	ldr	r2, [pc, #8]	; (8001e98 <LeftEncoderGetReading+0x18>)
 8001e90:	6013      	str	r3, [r2, #0]
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	200000e0 	.word	0x200000e0

08001e9c <Get_Reading>:


s16 Get_Reading(void)
{
 8001e9c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
	Rx_arrlength = MUSART2_u8ReceiveDataBlock(data_arr);
 8001ea4:	4853      	ldr	r0, [pc, #332]	; (8001ff4 <Get_Reading+0x158>)
 8001ea6:	f7ff ffbb 	bl	8001e20 <MUSART2_u8ReceiveDataBlock>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	461a      	mov	r2, r3
 8001eae:	4b52      	ldr	r3, [pc, #328]	; (8001ff8 <Get_Reading+0x15c>)
 8001eb0:	701a      	strb	r2, [r3, #0]
	Rx_mpu = 0;
 8001eb2:	4b52      	ldr	r3, [pc, #328]	; (8001ffc <Get_Reading+0x160>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	801a      	strh	r2, [r3, #0]

	if(data_arr[0] == 'a')
 8001eb8:	4b4e      	ldr	r3, [pc, #312]	; (8001ff4 <Get_Reading+0x158>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b61      	cmp	r3, #97	; 0x61
 8001ebe:	f040 8090 	bne.w	8001fe2 <Get_Reading+0x146>
	{
		if (data_arr[1] == '-')
 8001ec2:	4b4c      	ldr	r3, [pc, #304]	; (8001ff4 <Get_Reading+0x158>)
 8001ec4:	785b      	ldrb	r3, [r3, #1]
 8001ec6:	2b2d      	cmp	r3, #45	; 0x2d
 8001ec8:	d14a      	bne.n	8001f60 <Get_Reading+0xc4>
		{
			for(u8 i = 2 ; i<Rx_arrlength ; i++)
 8001eca:	2302      	movs	r3, #2
 8001ecc:	71fb      	strb	r3, [r7, #7]
 8001ece:	e038      	b.n	8001f42 <Get_Reading+0xa6>
			{
				Rx_mpu = Rx_mpu + (data_arr[i]-48)*pow(10,Rx_arrlength-1-i);
 8001ed0:	4b4a      	ldr	r3, [pc, #296]	; (8001ffc <Get_Reading+0x160>)
 8001ed2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7fe fa9c 	bl	8000414 <__aeabi_i2d>
 8001edc:	4604      	mov	r4, r0
 8001ede:	460d      	mov	r5, r1
 8001ee0:	79fb      	ldrb	r3, [r7, #7]
 8001ee2:	4a44      	ldr	r2, [pc, #272]	; (8001ff4 <Get_Reading+0x158>)
 8001ee4:	5cd3      	ldrb	r3, [r2, r3]
 8001ee6:	3b30      	subs	r3, #48	; 0x30
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe fa93 	bl	8000414 <__aeabi_i2d>
 8001eee:	4680      	mov	r8, r0
 8001ef0:	4689      	mov	r9, r1
 8001ef2:	4b41      	ldr	r3, [pc, #260]	; (8001ff8 <Get_Reading+0x15c>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	1e5a      	subs	r2, r3, #1
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe fa89 	bl	8000414 <__aeabi_i2d>
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	f04f 0000 	mov.w	r0, #0
 8001f0a:	493d      	ldr	r1, [pc, #244]	; (8002000 <Get_Reading+0x164>)
 8001f0c:	f000 fcae 	bl	800286c <pow>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4640      	mov	r0, r8
 8001f16:	4649      	mov	r1, r9
 8001f18:	f7fe fae6 	bl	80004e8 <__aeabi_dmul>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4620      	mov	r0, r4
 8001f22:	4629      	mov	r1, r5
 8001f24:	f7fe f92a 	bl	800017c <__adddf3>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4610      	mov	r0, r2
 8001f2e:	4619      	mov	r1, r3
 8001f30:	f7fe fd8a 	bl	8000a48 <__aeabi_d2iz>
 8001f34:	4603      	mov	r3, r0
 8001f36:	b21a      	sxth	r2, r3
 8001f38:	4b30      	ldr	r3, [pc, #192]	; (8001ffc <Get_Reading+0x160>)
 8001f3a:	801a      	strh	r2, [r3, #0]
			for(u8 i = 2 ; i<Rx_arrlength ; i++)
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	71fb      	strb	r3, [r7, #7]
 8001f42:	4b2d      	ldr	r3, [pc, #180]	; (8001ff8 <Get_Reading+0x15c>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	79fa      	ldrb	r2, [r7, #7]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d3c1      	bcc.n	8001ed0 <Get_Reading+0x34>
			}
			Rx_mpu = Rx_mpu*-1;
 8001f4c:	4b2b      	ldr	r3, [pc, #172]	; (8001ffc <Get_Reading+0x160>)
 8001f4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	425b      	negs	r3, r3
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	b21a      	sxth	r2, r3
 8001f5a:	4b28      	ldr	r3, [pc, #160]	; (8001ffc <Get_Reading+0x160>)
 8001f5c:	801a      	strh	r2, [r3, #0]
 8001f5e:	e040      	b.n	8001fe2 <Get_Reading+0x146>

		}
		else
		{
			for(u8 i = 1 ; i<Rx_arrlength ; i++)
 8001f60:	2301      	movs	r3, #1
 8001f62:	71bb      	strb	r3, [r7, #6]
 8001f64:	e038      	b.n	8001fd8 <Get_Reading+0x13c>
			{
				Rx_mpu = Rx_mpu + (data_arr[i]-48)*pow(10,Rx_arrlength-1-i);
 8001f66:	4b25      	ldr	r3, [pc, #148]	; (8001ffc <Get_Reading+0x160>)
 8001f68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7fe fa51 	bl	8000414 <__aeabi_i2d>
 8001f72:	4604      	mov	r4, r0
 8001f74:	460d      	mov	r5, r1
 8001f76:	79bb      	ldrb	r3, [r7, #6]
 8001f78:	4a1e      	ldr	r2, [pc, #120]	; (8001ff4 <Get_Reading+0x158>)
 8001f7a:	5cd3      	ldrb	r3, [r2, r3]
 8001f7c:	3b30      	subs	r3, #48	; 0x30
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7fe fa48 	bl	8000414 <__aeabi_i2d>
 8001f84:	4680      	mov	r8, r0
 8001f86:	4689      	mov	r9, r1
 8001f88:	4b1b      	ldr	r3, [pc, #108]	; (8001ff8 <Get_Reading+0x15c>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	1e5a      	subs	r2, r3, #1
 8001f8e:	79bb      	ldrb	r3, [r7, #6]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe fa3e 	bl	8000414 <__aeabi_i2d>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	f04f 0000 	mov.w	r0, #0
 8001fa0:	4917      	ldr	r1, [pc, #92]	; (8002000 <Get_Reading+0x164>)
 8001fa2:	f000 fc63 	bl	800286c <pow>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	4640      	mov	r0, r8
 8001fac:	4649      	mov	r1, r9
 8001fae:	f7fe fa9b 	bl	80004e8 <__aeabi_dmul>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	4620      	mov	r0, r4
 8001fb8:	4629      	mov	r1, r5
 8001fba:	f7fe f8df 	bl	800017c <__adddf3>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	4610      	mov	r0, r2
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	f7fe fd3f 	bl	8000a48 <__aeabi_d2iz>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	b21a      	sxth	r2, r3
 8001fce:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <Get_Reading+0x160>)
 8001fd0:	801a      	strh	r2, [r3, #0]
			for(u8 i = 1 ; i<Rx_arrlength ; i++)
 8001fd2:	79bb      	ldrb	r3, [r7, #6]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	71bb      	strb	r3, [r7, #6]
 8001fd8:	4b07      	ldr	r3, [pc, #28]	; (8001ff8 <Get_Reading+0x15c>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	79ba      	ldrb	r2, [r7, #6]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d3c1      	bcc.n	8001f66 <Get_Reading+0xca>
			}
		}
	}
		return Rx_mpu ;
 8001fe2:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <Get_Reading+0x160>)
 8001fe4:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ff2:	bf00      	nop
 8001ff4:	200000f4 	.word	0x200000f4
 8001ff8:	200000f0 	.word	0x200000f0
 8001ffc:	2000010a 	.word	0x2000010a
 8002000:	40240000 	.word	0x40240000

08002004 <RotateRight>:


void RotateRight()
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
	s16 error = 0;
 800200a:	2300      	movs	r3, #0
 800200c:	80fb      	strh	r3, [r7, #6]

	Reading = Get_Reading() ;
 800200e:	f7ff ff45 	bl	8001e9c <Get_Reading>
 8002012:	4603      	mov	r3, r0
 8002014:	461a      	mov	r2, r3
 8002016:	4b43      	ldr	r3, [pc, #268]	; (8002124 <RotateRight+0x120>)
 8002018:	801a      	strh	r2, [r3, #0]
	Final_Value = Reading + 90 ;
 800201a:	4b42      	ldr	r3, [pc, #264]	; (8002124 <RotateRight+0x120>)
 800201c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002020:	b29b      	uxth	r3, r3
 8002022:	335a      	adds	r3, #90	; 0x5a
 8002024:	b29b      	uxth	r3, r3
 8002026:	b21a      	sxth	r2, r3
 8002028:	4b3f      	ldr	r3, [pc, #252]	; (8002128 <RotateRight+0x124>)
 800202a:	801a      	strh	r2, [r3, #0]


	if (Final_Value > 180 )
 800202c:	4b3e      	ldr	r3, [pc, #248]	; (8002128 <RotateRight+0x124>)
 800202e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002032:	2bb4      	cmp	r3, #180	; 0xb4
 8002034:	dd09      	ble.n	800204a <RotateRight+0x46>
	{
		Final_Value = Final_Value - 360 ;
 8002036:	4b3c      	ldr	r3, [pc, #240]	; (8002128 <RotateRight+0x124>)
 8002038:	f9b3 3000 	ldrsh.w	r3, [r3]
 800203c:	b29b      	uxth	r3, r3
 800203e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002042:	b29b      	uxth	r3, r3
 8002044:	b21a      	sxth	r2, r3
 8002046:	4b38      	ldr	r3, [pc, #224]	; (8002128 <RotateRight+0x124>)
 8002048:	801a      	strh	r2, [r3, #0]
	}

	error = Final_Value - Reading ;
 800204a:	4b37      	ldr	r3, [pc, #220]	; (8002128 <RotateRight+0x124>)
 800204c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002050:	b29a      	uxth	r2, r3
 8002052:	4b34      	ldr	r3, [pc, #208]	; (8002124 <RotateRight+0x120>)
 8002054:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002058:	b29b      	uxth	r3, r3
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	b29b      	uxth	r3, r3
 800205e:	80fb      	strh	r3, [r7, #6]

	while (1)
	{
		MGPIO_VoidSetPinValue(GPIOA, 0, HIGH);
 8002060:	2201      	movs	r2, #1
 8002062:	2100      	movs	r1, #0
 8002064:	2000      	movs	r0, #0
 8002066:	f7ff f9a3 	bl	80013b0 <MGPIO_VoidSetPinValue>
		MGPIO_VoidSetPinValue(GPIOA, 5, LOW);
 800206a:	2200      	movs	r2, #0
 800206c:	2105      	movs	r1, #5
 800206e:	2000      	movs	r0, #0
 8002070:	f7ff f99e 	bl	80013b0 <MGPIO_VoidSetPinValue>

		MTIM2_voidOutputPWM_C2(15);
 8002074:	200f      	movs	r0, #15
 8002076:	f7ff fdcf 	bl	8001c18 <MTIM2_voidOutputPWM_C2>
		MTIM3_voidOutputPWM(15);
 800207a:	200f      	movs	r0, #15
 800207c:	f7ff fe2a 	bl	8001cd4 <MTIM3_voidOutputPWM>

	  if (error < -180 )
 8002080:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002084:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 8002088:	da04      	bge.n	8002094 <RotateRight+0x90>
	  {
		  error += 360 ;
 800208a:	88fb      	ldrh	r3, [r7, #6]
 800208c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002090:	b29b      	uxth	r3, r3
 8002092:	80fb      	strh	r3, [r7, #6]

	  }

	if ( error <= 0 )
 8002094:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002098:	2b00      	cmp	r3, #0
 800209a:	dc2d      	bgt.n	80020f8 <RotateRight+0xf4>
	{

		MTIM3_voidOutputPWM(0);
 800209c:	2000      	movs	r0, #0
 800209e:	f7ff fe19 	bl	8001cd4 <MTIM3_voidOutputPWM>
		MTIM2_voidOutputPWM_C2(0);
 80020a2:	2000      	movs	r0, #0
 80020a4:	f7ff fdb8 	bl	8001c18 <MTIM2_voidOutputPWM_C2>

		HENCODER_s32GetZeroCounts(PIN8);
 80020a8:	2008      	movs	r0, #8
 80020aa:	f7ff fc29 	bl	8001900 <HENCODER_s32GetZeroCounts>
		HENCODER_s32GetZeroCounts(PIN10);
 80020ae:	200a      	movs	r0, #10
 80020b0:	f7ff fc26 	bl	8001900 <HENCODER_s32GetZeroCounts>

		MUSART2_voidSendString((u8*)"s2");
 80020b4:	481d      	ldr	r0, [pc, #116]	; (800212c <RotateRight+0x128>)
 80020b6:	f7ff fe6f 	bl	8001d98 <MUSART2_voidSendString>
		MUSART2_voidSendString((u8*)"\r\n");
 80020ba:	481d      	ldr	r0, [pc, #116]	; (8002130 <RotateRight+0x12c>)
 80020bc:	f7ff fe6c 	bl	8001d98 <MUSART2_voidSendString>

		MUSART2_voidSendString((u8*)"p");
 80020c0:	481c      	ldr	r0, [pc, #112]	; (8002134 <RotateRight+0x130>)
 80020c2:	f7ff fe69 	bl	8001d98 <MUSART2_voidSendString>
		MUSART2_voidSendNumbers(Final_Value);
 80020c6:	4b18      	ldr	r3, [pc, #96]	; (8002128 <RotateRight+0x124>)
 80020c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff fe79 	bl	8001dc4 <MUSART2_voidSendNumbers>
		MUSART2_voidSendString((u8*)"\r\n");
 80020d2:	4817      	ldr	r0, [pc, #92]	; (8002130 <RotateRight+0x12c>)
 80020d4:	f7ff fe60 	bl	8001d98 <MUSART2_voidSendString>

		MUSART2_voidSendString((u8*)"v");
 80020d8:	4817      	ldr	r0, [pc, #92]	; (8002138 <RotateRight+0x134>)
 80020da:	f7ff fe5d 	bl	8001d98 <MUSART2_voidSendString>
		MUSART2_voidSendNumbers(reading);
 80020de:	4b17      	ldr	r3, [pc, #92]	; (800213c <RotateRight+0x138>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7fe ffa6 	bl	8001034 <__aeabi_f2iz>
 80020e8:	4603      	mov	r3, r0
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff fe6a 	bl	8001dc4 <MUSART2_voidSendNumbers>
		MUSART2_voidSendString((u8*)"\r\n");
 80020f0:	480f      	ldr	r0, [pc, #60]	; (8002130 <RotateRight+0x12c>)
 80020f2:	f7ff fe51 	bl	8001d98 <MUSART2_voidSendString>
		break ;
 80020f6:	e011      	b.n	800211c <RotateRight+0x118>
	}
	 Reading = Get_Reading() ;
 80020f8:	f7ff fed0 	bl	8001e9c <Get_Reading>
 80020fc:	4603      	mov	r3, r0
 80020fe:	461a      	mov	r2, r3
 8002100:	4b08      	ldr	r3, [pc, #32]	; (8002124 <RotateRight+0x120>)
 8002102:	801a      	strh	r2, [r3, #0]
	error = Final_Value - Reading ;
 8002104:	4b08      	ldr	r3, [pc, #32]	; (8002128 <RotateRight+0x124>)
 8002106:	f9b3 3000 	ldrsh.w	r3, [r3]
 800210a:	b29a      	uxth	r2, r3
 800210c:	4b05      	ldr	r3, [pc, #20]	; (8002124 <RotateRight+0x120>)
 800210e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002112:	b29b      	uxth	r3, r3
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	b29b      	uxth	r3, r3
 8002118:	80fb      	strh	r3, [r7, #6]
		MGPIO_VoidSetPinValue(GPIOA, 0, HIGH);
 800211a:	e7a1      	b.n	8002060 <RotateRight+0x5c>

    }

}
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20000110 	.word	0x20000110
 8002128:	2000010e 	.word	0x2000010e
 800212c:	08003650 	.word	0x08003650
 8002130:	08003654 	.word	0x08003654
 8002134:	08003658 	.word	0x08003658
 8002138:	0800365c 	.word	0x0800365c
 800213c:	200000e8 	.word	0x200000e8

08002140 <RotateLeft>:


void RotateLeft()
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
	s16 error = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	80fb      	strh	r3, [r7, #6]

	Reading = Get_Reading() ;
 800214a:	f7ff fea7 	bl	8001e9c <Get_Reading>
 800214e:	4603      	mov	r3, r0
 8002150:	461a      	mov	r2, r3
 8002152:	4b43      	ldr	r3, [pc, #268]	; (8002260 <RotateLeft+0x120>)
 8002154:	801a      	strh	r2, [r3, #0]
	Final_Value = Reading - 90 ;
 8002156:	4b42      	ldr	r3, [pc, #264]	; (8002260 <RotateLeft+0x120>)
 8002158:	f9b3 3000 	ldrsh.w	r3, [r3]
 800215c:	b29b      	uxth	r3, r3
 800215e:	3b5a      	subs	r3, #90	; 0x5a
 8002160:	b29b      	uxth	r3, r3
 8002162:	b21a      	sxth	r2, r3
 8002164:	4b3f      	ldr	r3, [pc, #252]	; (8002264 <RotateLeft+0x124>)
 8002166:	801a      	strh	r2, [r3, #0]


	if (Final_Value < -180 )
 8002168:	4b3e      	ldr	r3, [pc, #248]	; (8002264 <RotateLeft+0x124>)
 800216a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800216e:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 8002172:	da09      	bge.n	8002188 <RotateLeft+0x48>
	{
		Final_Value = Final_Value + 360 ;
 8002174:	4b3b      	ldr	r3, [pc, #236]	; (8002264 <RotateLeft+0x124>)
 8002176:	f9b3 3000 	ldrsh.w	r3, [r3]
 800217a:	b29b      	uxth	r3, r3
 800217c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002180:	b29b      	uxth	r3, r3
 8002182:	b21a      	sxth	r2, r3
 8002184:	4b37      	ldr	r3, [pc, #220]	; (8002264 <RotateLeft+0x124>)
 8002186:	801a      	strh	r2, [r3, #0]
	}

	error = Final_Value - Reading ;
 8002188:	4b36      	ldr	r3, [pc, #216]	; (8002264 <RotateLeft+0x124>)
 800218a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800218e:	b29a      	uxth	r2, r3
 8002190:	4b33      	ldr	r3, [pc, #204]	; (8002260 <RotateLeft+0x120>)
 8002192:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002196:	b29b      	uxth	r3, r3
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	b29b      	uxth	r3, r3
 800219c:	80fb      	strh	r3, [r7, #6]

	while (1)
	{
		MGPIO_VoidSetPinValue(GPIOA, 0, LOW);
 800219e:	2200      	movs	r2, #0
 80021a0:	2100      	movs	r1, #0
 80021a2:	2000      	movs	r0, #0
 80021a4:	f7ff f904 	bl	80013b0 <MGPIO_VoidSetPinValue>
		MGPIO_VoidSetPinValue(GPIOA, 5, HIGH);
 80021a8:	2201      	movs	r2, #1
 80021aa:	2105      	movs	r1, #5
 80021ac:	2000      	movs	r0, #0
 80021ae:	f7ff f8ff 	bl	80013b0 <MGPIO_VoidSetPinValue>

		MTIM2_voidOutputPWM_C2(15);
 80021b2:	200f      	movs	r0, #15
 80021b4:	f7ff fd30 	bl	8001c18 <MTIM2_voidOutputPWM_C2>
		MTIM3_voidOutputPWM(15);
 80021b8:	200f      	movs	r0, #15
 80021ba:	f7ff fd8b 	bl	8001cd4 <MTIM3_voidOutputPWM>

	  if (error  > 180 )
 80021be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021c2:	2bb4      	cmp	r3, #180	; 0xb4
 80021c4:	dd04      	ble.n	80021d0 <RotateLeft+0x90>
	  {
		  error -= 360 ;
 80021c6:	88fb      	ldrh	r3, [r7, #6]
 80021c8:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	80fb      	strh	r3, [r7, #6]

	  }

	if ( error >= 0 )
 80021d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	db2d      	blt.n	8002234 <RotateLeft+0xf4>
	{

		MTIM3_voidOutputPWM(0);
 80021d8:	2000      	movs	r0, #0
 80021da:	f7ff fd7b 	bl	8001cd4 <MTIM3_voidOutputPWM>
		MTIM2_voidOutputPWM_C2(0);
 80021de:	2000      	movs	r0, #0
 80021e0:	f7ff fd1a 	bl	8001c18 <MTIM2_voidOutputPWM_C2>

		HENCODER_s32GetZeroCounts(PIN8);
 80021e4:	2008      	movs	r0, #8
 80021e6:	f7ff fb8b 	bl	8001900 <HENCODER_s32GetZeroCounts>
		HENCODER_s32GetZeroCounts(PIN10);
 80021ea:	200a      	movs	r0, #10
 80021ec:	f7ff fb88 	bl	8001900 <HENCODER_s32GetZeroCounts>

		MUSART2_voidSendString((u8*)"s2");
 80021f0:	481d      	ldr	r0, [pc, #116]	; (8002268 <RotateLeft+0x128>)
 80021f2:	f7ff fdd1 	bl	8001d98 <MUSART2_voidSendString>
		MUSART2_voidSendString((u8*)"\r\n");
 80021f6:	481d      	ldr	r0, [pc, #116]	; (800226c <RotateLeft+0x12c>)
 80021f8:	f7ff fdce 	bl	8001d98 <MUSART2_voidSendString>

		MUSART2_voidSendString((u8*)"p");
 80021fc:	481c      	ldr	r0, [pc, #112]	; (8002270 <RotateLeft+0x130>)
 80021fe:	f7ff fdcb 	bl	8001d98 <MUSART2_voidSendString>
		MUSART2_voidSendNumbers(Final_Value);
 8002202:	4b18      	ldr	r3, [pc, #96]	; (8002264 <RotateLeft+0x124>)
 8002204:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff fddb 	bl	8001dc4 <MUSART2_voidSendNumbers>
		MUSART2_voidSendString((u8*)"\r\n");
 800220e:	4817      	ldr	r0, [pc, #92]	; (800226c <RotateLeft+0x12c>)
 8002210:	f7ff fdc2 	bl	8001d98 <MUSART2_voidSendString>

		MUSART2_voidSendString((u8*)"v");
 8002214:	4817      	ldr	r0, [pc, #92]	; (8002274 <RotateLeft+0x134>)
 8002216:	f7ff fdbf 	bl	8001d98 <MUSART2_voidSendString>
		MUSART2_voidSendNumbers(reading);
 800221a:	4b17      	ldr	r3, [pc, #92]	; (8002278 <RotateLeft+0x138>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe ff08 	bl	8001034 <__aeabi_f2iz>
 8002224:	4603      	mov	r3, r0
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff fdcc 	bl	8001dc4 <MUSART2_voidSendNumbers>
		MUSART2_voidSendString((u8*)"\r\n");
 800222c:	480f      	ldr	r0, [pc, #60]	; (800226c <RotateLeft+0x12c>)
 800222e:	f7ff fdb3 	bl	8001d98 <MUSART2_voidSendString>

		break ;
 8002232:	e011      	b.n	8002258 <RotateLeft+0x118>
	}
	Reading = Get_Reading() ;
 8002234:	f7ff fe32 	bl	8001e9c <Get_Reading>
 8002238:	4603      	mov	r3, r0
 800223a:	461a      	mov	r2, r3
 800223c:	4b08      	ldr	r3, [pc, #32]	; (8002260 <RotateLeft+0x120>)
 800223e:	801a      	strh	r2, [r3, #0]
	error = Final_Value - Reading ;
 8002240:	4b08      	ldr	r3, [pc, #32]	; (8002264 <RotateLeft+0x124>)
 8002242:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002246:	b29a      	uxth	r2, r3
 8002248:	4b05      	ldr	r3, [pc, #20]	; (8002260 <RotateLeft+0x120>)
 800224a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800224e:	b29b      	uxth	r3, r3
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	b29b      	uxth	r3, r3
 8002254:	80fb      	strh	r3, [r7, #6]
		MGPIO_VoidSetPinValue(GPIOA, 0, LOW);
 8002256:	e7a2      	b.n	800219e <RotateLeft+0x5e>

    }

}
 8002258:	bf00      	nop
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	20000110 	.word	0x20000110
 8002264:	2000010e 	.word	0x2000010e
 8002268:	08003650 	.word	0x08003650
 800226c:	08003654 	.word	0x08003654
 8002270:	08003658 	.word	0x08003658
 8002274:	0800365c 	.word	0x0800365c
 8002278:	200000e8 	.word	0x200000e8

0800227c <TargetDistance>:


void TargetDistance()
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
	u32 target_count = 0;
 8002282:	2300      	movs	r3, #0
 8002284:	607b      	str	r3, [r7, #4]
	s16 error = 0 ;
 8002286:	2300      	movs	r3, #0
 8002288:	807b      	strh	r3, [r7, #2]


	HENCODER_s32GetZeroCounts(PIN8);
 800228a:	2008      	movs	r0, #8
 800228c:	f7ff fb38 	bl	8001900 <HENCODER_s32GetZeroCounts>
	HENCODER_s32GetZeroCounts(PIN10);
 8002290:	200a      	movs	r0, #10
 8002292:	f7ff fb35 	bl	8001900 <HENCODER_s32GetZeroCounts>
	HENCODER_f32GetZeroDistance();
 8002296:	f7ff fb4f 	bl	8001938 <HENCODER_f32GetZeroDistance>

	target_count = step_distance*10.23;
 800229a:	f240 13ff 	movw	r3, #511	; 0x1ff
 800229e:	607b      	str	r3, [r7, #4]

	while(1)
	{
		Reading = Get_Reading();
 80022a0:	f7ff fdfc 	bl	8001e9c <Get_Reading>
 80022a4:	4603      	mov	r3, r0
 80022a6:	461a      	mov	r2, r3
 80022a8:	4b31      	ldr	r3, [pc, #196]	; (8002370 <TargetDistance+0xf4>)
 80022aa:	801a      	strh	r2, [r3, #0]
		PID_Error = Final_Value - Reading ;
 80022ac:	4b31      	ldr	r3, [pc, #196]	; (8002374 <TargetDistance+0xf8>)
 80022ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	4b2e      	ldr	r3, [pc, #184]	; (8002370 <TargetDistance+0xf4>)
 80022b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	b29b      	uxth	r3, r3
 80022c0:	b21a      	sxth	r2, r3
 80022c2:	4b2d      	ldr	r3, [pc, #180]	; (8002378 <TargetDistance+0xfc>)
 80022c4:	801a      	strh	r2, [r3, #0]
		 error = 4*PID_Error ;
 80022c6:	4b2c      	ldr	r3, [pc, #176]	; (8002378 <TargetDistance+0xfc>)
 80022c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	807b      	strh	r3, [r7, #2]
		/*left then right*/
		MTIM2_voidOutputPWM_C2((Rx_pwm + error) );
 80022d4:	4b29      	ldr	r3, [pc, #164]	; (800237c <TargetDistance+0x100>)
 80022d6:	881a      	ldrh	r2, [r3, #0]
 80022d8:	887b      	ldrh	r3, [r7, #2]
 80022da:	4413      	add	r3, r2
 80022dc:	b29b      	uxth	r3, r3
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff fc9a 	bl	8001c18 <MTIM2_voidOutputPWM_C2>
		MTIM3_voidOutputPWM((Rx_pwm - error));
 80022e4:	4b25      	ldr	r3, [pc, #148]	; (800237c <TargetDistance+0x100>)
 80022e6:	881a      	ldrh	r2, [r3, #0]
 80022e8:	887b      	ldrh	r3, [r7, #2]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff fcf0 	bl	8001cd4 <MTIM3_voidOutputPWM>

		MUSART2_voidSendString((u8*)"t");
 80022f4:	4822      	ldr	r0, [pc, #136]	; (8002380 <TargetDistance+0x104>)
 80022f6:	f7ff fd4f 	bl	8001d98 <MUSART2_voidSendString>
		MUSART2_voidSendNumbers(error);
 80022fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff fd60 	bl	8001dc4 <MUSART2_voidSendNumbers>
		MUSART2_voidSendString((u8*)"\r\n");
 8002304:	481f      	ldr	r0, [pc, #124]	; (8002384 <TargetDistance+0x108>)
 8002306:	f7ff fd47 	bl	8001d98 <MUSART2_voidSendString>

		if(abs(right_counts) >= target_count)
 800230a:	4b1f      	ldr	r3, [pc, #124]	; (8002388 <TargetDistance+0x10c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	bfb8      	it	lt
 8002312:	425b      	neglt	r3, r3
 8002314:	461a      	mov	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4293      	cmp	r3, r2
 800231a:	d8c1      	bhi.n	80022a0 <TargetDistance+0x24>
		{
			HENCODER_s32GetZeroCounts(PIN8);
 800231c:	2008      	movs	r0, #8
 800231e:	f7ff faef 	bl	8001900 <HENCODER_s32GetZeroCounts>
			HENCODER_s32GetZeroCounts(PIN10);
 8002322:	200a      	movs	r0, #10
 8002324:	f7ff faec 	bl	8001900 <HENCODER_s32GetZeroCounts>

			Rx_pwm = 0;
 8002328:	4b14      	ldr	r3, [pc, #80]	; (800237c <TargetDistance+0x100>)
 800232a:	2200      	movs	r2, #0
 800232c:	801a      	strh	r2, [r3, #0]
			MTIM3_voidOutputPWM(0);
 800232e:	2000      	movs	r0, #0
 8002330:	f7ff fcd0 	bl	8001cd4 <MTIM3_voidOutputPWM>
			MTIM2_voidOutputPWM_C2(0);
 8002334:	2000      	movs	r0, #0
 8002336:	f7ff fc6f 	bl	8001c18 <MTIM2_voidOutputPWM_C2>

			MUSART2_voidSendString((u8*) "s1");
 800233a:	4814      	ldr	r0, [pc, #80]	; (800238c <TargetDistance+0x110>)
 800233c:	f7ff fd2c 	bl	8001d98 <MUSART2_voidSendString>
			MUSART2_voidSendString((u8*)"\r\n");
 8002340:	4810      	ldr	r0, [pc, #64]	; (8002384 <TargetDistance+0x108>)
 8002342:	f7ff fd29 	bl	8001d98 <MUSART2_voidSendString>

			MUSART2_voidSendString((u8*)"v");
 8002346:	4812      	ldr	r0, [pc, #72]	; (8002390 <TargetDistance+0x114>)
 8002348:	f7ff fd26 	bl	8001d98 <MUSART2_voidSendString>
			MUSART2_voidSendNumbers(reading);
 800234c:	4b11      	ldr	r3, [pc, #68]	; (8002394 <TargetDistance+0x118>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f7fe fe6f 	bl	8001034 <__aeabi_f2iz>
 8002356:	4603      	mov	r3, r0
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff fd33 	bl	8001dc4 <MUSART2_voidSendNumbers>
			MUSART2_voidSendString((u8*)"\r\n");
 800235e:	4809      	ldr	r0, [pc, #36]	; (8002384 <TargetDistance+0x108>)
 8002360:	f7ff fd1a 	bl	8001d98 <MUSART2_voidSendString>

			break;
 8002364:	bf00      	nop
		}
	}
}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20000110 	.word	0x20000110
 8002374:	2000010e 	.word	0x2000010e
 8002378:	2000010c 	.word	0x2000010c
 800237c:	20000108 	.word	0x20000108
 8002380:	08003660 	.word	0x08003660
 8002384:	08003654 	.word	0x08003654
 8002388:	200000dc 	.word	0x200000dc
 800238c:	08003664 	.word	0x08003664
 8002390:	0800365c 	.word	0x0800365c
 8002394:	200000e8 	.word	0x200000e8

08002398 <VoltageReading>:


void VoltageReading()
{
 8002398:	b598      	push	{r3, r4, r7, lr}
 800239a:	af00      	add	r7, sp, #0
	adc_value = MADC1_u16ReadValue();
 800239c:	f7fe fed2 	bl	8001144 <MADC1_u16ReadValue>
 80023a0:	4603      	mov	r3, r0
 80023a2:	461a      	mov	r2, r3
 80023a4:	4b22      	ldr	r3, [pc, #136]	; (8002430 <VoltageReading+0x98>)
 80023a6:	801a      	strh	r2, [r3, #0]
	adc_volt = (adc_value*3.3)/4096;
 80023a8:	4b21      	ldr	r3, [pc, #132]	; (8002430 <VoltageReading+0x98>)
 80023aa:	881b      	ldrh	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe f831 	bl	8000414 <__aeabi_i2d>
 80023b2:	a31d      	add	r3, pc, #116	; (adr r3, 8002428 <VoltageReading+0x90>)
 80023b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b8:	f7fe f896 	bl	80004e8 <__aeabi_dmul>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	4610      	mov	r0, r2
 80023c2:	4619      	mov	r1, r3
 80023c4:	f04f 0200 	mov.w	r2, #0
 80023c8:	4b1a      	ldr	r3, [pc, #104]	; (8002434 <VoltageReading+0x9c>)
 80023ca:	f7fe f9b7 	bl	800073c <__aeabi_ddiv>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	4610      	mov	r0, r2
 80023d4:	4619      	mov	r1, r3
 80023d6:	f7fe fb7f 	bl	8000ad8 <__aeabi_d2f>
 80023da:	4603      	mov	r3, r0
 80023dc:	4a16      	ldr	r2, [pc, #88]	; (8002438 <VoltageReading+0xa0>)
 80023de:	6013      	str	r3, [r2, #0]
	reading = (adc_volt*(R1+R2))/R2;
 80023e0:	4b16      	ldr	r3, [pc, #88]	; (800243c <VoltageReading+0xa4>)
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	461a      	mov	r2, r3
 80023e6:	4b16      	ldr	r3, [pc, #88]	; (8002440 <VoltageReading+0xa8>)
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	4413      	add	r3, r2
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7fe fc7d 	bl	8000cec <__aeabi_i2f>
 80023f2:	4602      	mov	r2, r0
 80023f4:	4b10      	ldr	r3, [pc, #64]	; (8002438 <VoltageReading+0xa0>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4619      	mov	r1, r3
 80023fa:	4610      	mov	r0, r2
 80023fc:	f7fe fcca 	bl	8000d94 <__aeabi_fmul>
 8002400:	4603      	mov	r3, r0
 8002402:	461c      	mov	r4, r3
 8002404:	4b0e      	ldr	r3, [pc, #56]	; (8002440 <VoltageReading+0xa8>)
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7fe fc6f 	bl	8000cec <__aeabi_i2f>
 800240e:	4603      	mov	r3, r0
 8002410:	4619      	mov	r1, r3
 8002412:	4620      	mov	r0, r4
 8002414:	f7fe fd72 	bl	8000efc <__aeabi_fdiv>
 8002418:	4603      	mov	r3, r0
 800241a:	461a      	mov	r2, r3
 800241c:	4b09      	ldr	r3, [pc, #36]	; (8002444 <VoltageReading+0xac>)
 800241e:	601a      	str	r2, [r3, #0]

}
 8002420:	bf00      	nop
 8002422:	bd98      	pop	{r3, r4, r7, pc}
 8002424:	f3af 8000 	nop.w
 8002428:	66666666 	.word	0x66666666
 800242c:	400a6666 	.word	0x400a6666
 8002430:	200000e4 	.word	0x200000e4
 8002434:	40b00000 	.word	0x40b00000
 8002438:	200000ec 	.word	0x200000ec
 800243c:	20000000 	.word	0x20000000
 8002440:	20000002 	.word	0x20000002
 8002444:	200000e8 	.word	0x200000e8

08002448 <main>:


int main (void)
{
 8002448:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
	/*initialize RCC*/
	RCC_voidInitSysClock();
 8002450:	f7ff faa0 	bl	8001994 <RCC_voidInitSysClock>

	/*initialize peripherals clock - GPIO, AFIO, TIM2, TIM3, ADC1*/
	RCC_voidEnableClock(RCC_APB2 , 2);
 8002454:	2102      	movs	r1, #2
 8002456:	2002      	movs	r0, #2
 8002458:	f7ff faae 	bl	80019b8 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_APB2 , 3);
 800245c:	2103      	movs	r1, #3
 800245e:	2002      	movs	r0, #2
 8002460:	f7ff faaa 	bl	80019b8 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_APB2 , 0);
 8002464:	2100      	movs	r1, #0
 8002466:	2002      	movs	r0, #2
 8002468:	f7ff faa6 	bl	80019b8 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_APB1 , 0);
 800246c:	2100      	movs	r1, #0
 800246e:	2001      	movs	r0, #1
 8002470:	f7ff faa2 	bl	80019b8 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_APB1 , 1);
 8002474:	2101      	movs	r1, #1
 8002476:	2001      	movs	r0, #1
 8002478:	f7ff fa9e 	bl	80019b8 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_APB2 , 9);
 800247c:	2109      	movs	r1, #9
 800247e:	2002      	movs	r0, #2
 8002480:	f7ff fa9a 	bl	80019b8 <RCC_voidEnableClock>

	/* cytron 1 */
	//MGPIO_VoidSetPinDirection(GPIOA,PIN3,OUTPUT_2MHZ_AFPP);
	//MGPIO_VoidSetPinDirection(GPIOA,PIN2,OUTPUT_2MHZ_PP);
	MGPIO_VoidSetPinDirection(GPIOA,PIN1,OUTPUT_2MHZ_AFPP);		//pwm
 8002484:	220a      	movs	r2, #10
 8002486:	2101      	movs	r1, #1
 8002488:	2000      	movs	r0, #0
 800248a:	f7fe febb 	bl	8001204 <MGPIO_VoidSetPinDirection>
	MGPIO_VoidSetPinDirection(GPIOA,PIN0,OUTPUT_2MHZ_PP);       //direction
 800248e:	2202      	movs	r2, #2
 8002490:	2100      	movs	r1, #0
 8002492:	2000      	movs	r0, #0
 8002494:	f7fe feb6 	bl	8001204 <MGPIO_VoidSetPinDirection>

	/* cytron 2 */
	MGPIO_VoidSetPinDirection(GPIOA,PIN6,OUTPUT_2MHZ_AFPP);		//pwm
 8002498:	220a      	movs	r2, #10
 800249a:	2106      	movs	r1, #6
 800249c:	2000      	movs	r0, #0
 800249e:	f7fe feb1 	bl	8001204 <MGPIO_VoidSetPinDirection>
	MGPIO_VoidSetPinDirection(GPIOA,PIN5,OUTPUT_2MHZ_PP);		//direction
 80024a2:	2202      	movs	r2, #2
 80024a4:	2105      	movs	r1, #5
 80024a6:	2000      	movs	r0, #0
 80024a8:	f7fe feac 	bl	8001204 <MGPIO_VoidSetPinDirection>

	/* Right encoder */
	MGPIO_VoidSetPinDirection(GPIOA,PIN8,INPUT_FLOATING);
 80024ac:	2204      	movs	r2, #4
 80024ae:	2108      	movs	r1, #8
 80024b0:	2000      	movs	r0, #0
 80024b2:	f7fe fea7 	bl	8001204 <MGPIO_VoidSetPinDirection>
	MGPIO_VoidSetPinDirection(GPIOA,PIN9,INPUT_FLOATING);
 80024b6:	2204      	movs	r2, #4
 80024b8:	2109      	movs	r1, #9
 80024ba:	2000      	movs	r0, #0
 80024bc:	f7fe fea2 	bl	8001204 <MGPIO_VoidSetPinDirection>

	/* Left encoder */
	MGPIO_VoidSetPinDirection(GPIOB,PIN10,INPUT_FLOATING);
 80024c0:	2204      	movs	r2, #4
 80024c2:	210a      	movs	r1, #10
 80024c4:	2001      	movs	r0, #1
 80024c6:	f7fe fe9d 	bl	8001204 <MGPIO_VoidSetPinDirection>
	MGPIO_VoidSetPinDirection(GPIOB,PIN11,INPUT_FLOATING);
 80024ca:	2204      	movs	r2, #4
 80024cc:	210b      	movs	r1, #11
 80024ce:	2001      	movs	r0, #1
 80024d0:	f7fe fe98 	bl	8001204 <MGPIO_VoidSetPinDirection>

	/* voltage sensor */
	MGPIO_VoidSetPinDirection(GPIOB, PIN0, INPUT_ANALOG);
 80024d4:	2200      	movs	r2, #0
 80024d6:	2100      	movs	r1, #0
 80024d8:	2001      	movs	r0, #1
 80024da:	f7fe fe93 	bl	8001204 <MGPIO_VoidSetPinDirection>

	/* AFIO for EXTI (Encoders) */
	MAFIO_voidSetEXTIConfiguration(LINE8 , AFIOA);
 80024de:	2100      	movs	r1, #0
 80024e0:	2008      	movs	r0, #8
 80024e2:	f7fe fe3b 	bl	800115c <MAFIO_voidSetEXTIConfiguration>
	MAFIO_voidSetEXTIConfiguration(LINE10 , AFIOB);
 80024e6:	2101      	movs	r1, #1
 80024e8:	200a      	movs	r0, #10
 80024ea:	f7fe fe37 	bl	800115c <MAFIO_voidSetEXTIConfiguration>

	/* call back for EXTI8,10*/
	EXTI_voidSetCallBack(LeftEncoderGetReading,LINE10);
 80024ee:	210a      	movs	r1, #10
 80024f0:	487e      	ldr	r0, [pc, #504]	; (80026ec <main+0x2a4>)
 80024f2:	f7ff f85d 	bl	80015b0 <EXTI_voidSetCallBack>
	EXTI_voidSetCallBack(RightEncoderGetReading,LINE8);
 80024f6:	2108      	movs	r1, #8
 80024f8:	487d      	ldr	r0, [pc, #500]	; (80026f0 <main+0x2a8>)
 80024fa:	f7ff f859 	bl	80015b0 <EXTI_voidSetCallBack>

	/* EXTI initialization */
	MEXTI_voidInit();
 80024fe:	f7fe fff5 	bl	80014ec <MEXTI_voidInit>
	MEXTI_voidSetSignalLatch(LINE8,RISING);
 8002502:	2100      	movs	r1, #0
 8002504:	2008      	movs	r0, #8
 8002506:	f7ff f805 	bl	8001514 <MEXTI_voidSetSignalLatch>
	MEXTI_voidSetSignalLatch(LINE10,RISING);
 800250a:	2100      	movs	r1, #0
 800250c:	200a      	movs	r0, #10
 800250e:	f7ff f801 	bl	8001514 <MEXTI_voidSetSignalLatch>

	/* ADC initialization & conversion */
	MADC1_voidInit();
 8002512:	f7fe fdb5 	bl	8001080 <MADC1_voidInit>
	MADC1_voidStartConversion(8,1);
 8002516:	2101      	movs	r1, #1
 8002518:	2008      	movs	r0, #8
 800251a:	f7fe fdc9 	bl	80010b0 <MADC1_voidStartConversion>

	/*Enable EXTI from NVIC*/
	MNVIC_voidEnableInterrupt(23);
 800251e:	2017      	movs	r0, #23
 8002520:	f7ff fa16 	bl	8001950 <MNVIC_voidEnableInterrupt>
	MNVIC_voidEnableInterrupt(40);
 8002524:	2028      	movs	r0, #40	; 0x28
 8002526:	f7ff fa13 	bl	8001950 <MNVIC_voidEnableInterrupt>

	/* Initialization */
	MSTK_voidInit();
 800252a:	f7ff fa87 	bl	8001a3c <MSTK_voidInit>
	MTIM2_voidInitC2();
 800252e:	f7ff fb0d 	bl	8001b4c <MTIM2_voidInitC2>
	MTIM3_voidInit();
 8002532:	f7ff fb81 	bl	8001c38 <MTIM3_voidInit>
	MUSART2_voidInit();
 8002536:	f7ff fbdd 	bl	8001cf4 <MUSART2_voidInit>

	/*start timer 1sec*/
	MSTK_voidSetIntervalPeriodic(1000000, VoltageReading);
 800253a:	496e      	ldr	r1, [pc, #440]	; (80026f4 <main+0x2ac>)
 800253c:	486e      	ldr	r0, [pc, #440]	; (80026f8 <main+0x2b0>)
 800253e:	f7ff fab1 	bl	8001aa4 <MSTK_voidSetIntervalPeriodic>

	MTIM2_voidOutputPWM_C2(0);
 8002542:	2000      	movs	r0, #0
 8002544:	f7ff fb68 	bl	8001c18 <MTIM2_voidOutputPWM_C2>
	MTIM3_voidOutputPWM(0);
 8002548:	2000      	movs	r0, #0
 800254a:	f7ff fbc3 	bl	8001cd4 <MTIM3_voidOutputPWM>

	while(1)
	{
		Rx_arrlength = MUSART2_u8ReceiveDataBlock(data_arr);
 800254e:	486b      	ldr	r0, [pc, #428]	; (80026fc <main+0x2b4>)
 8002550:	f7ff fc66 	bl	8001e20 <MUSART2_u8ReceiveDataBlock>
 8002554:	4603      	mov	r3, r0
 8002556:	461a      	mov	r2, r3
 8002558:	4b69      	ldr	r3, [pc, #420]	; (8002700 <main+0x2b8>)
 800255a:	701a      	strb	r2, [r3, #0]

		if (data_arr[0] == 'y')
 800255c:	4b67      	ldr	r3, [pc, #412]	; (80026fc <main+0x2b4>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b79      	cmp	r3, #121	; 0x79
 8002562:	f040 80a7 	bne.w	80026b4 <main+0x26c>
		{
			MTIM2_voidOutputPWM_C2(0);
 8002566:	2000      	movs	r0, #0
 8002568:	f7ff fb56 	bl	8001c18 <MTIM2_voidOutputPWM_C2>
			MTIM3_voidOutputPWM(0);
 800256c:	2000      	movs	r0, #0
 800256e:	f7ff fbb1 	bl	8001cd4 <MTIM3_voidOutputPWM>

			if (data_arr[1] == '-')
 8002572:	4b62      	ldr	r3, [pc, #392]	; (80026fc <main+0x2b4>)
 8002574:	785b      	ldrb	r3, [r3, #1]
 8002576:	2b2d      	cmp	r3, #45	; 0x2d
 8002578:	d14c      	bne.n	8002614 <main+0x1cc>
			{
				MGPIO_VoidSetPinValue(GPIOA, 0, LOW);
 800257a:	2200      	movs	r2, #0
 800257c:	2100      	movs	r1, #0
 800257e:	2000      	movs	r0, #0
 8002580:	f7fe ff16 	bl	80013b0 <MGPIO_VoidSetPinValue>
				MGPIO_VoidSetPinValue(GPIOA, 5, LOW);
 8002584:	2200      	movs	r2, #0
 8002586:	2105      	movs	r1, #5
 8002588:	2000      	movs	r0, #0
 800258a:	f7fe ff11 	bl	80013b0 <MGPIO_VoidSetPinValue>

				for(u8 i = 2 ; i<Rx_arrlength ; i++)
 800258e:	2302      	movs	r3, #2
 8002590:	71fb      	strb	r3, [r7, #7]
 8002592:	e037      	b.n	8002604 <main+0x1bc>
				{
					Rx_pwm = Rx_pwm + (data_arr[i]-48)*pow(10,Rx_arrlength-1-i);
 8002594:	4b5b      	ldr	r3, [pc, #364]	; (8002704 <main+0x2bc>)
 8002596:	881b      	ldrh	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f7fd ff3b 	bl	8000414 <__aeabi_i2d>
 800259e:	4604      	mov	r4, r0
 80025a0:	460d      	mov	r5, r1
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	4a55      	ldr	r2, [pc, #340]	; (80026fc <main+0x2b4>)
 80025a6:	5cd3      	ldrb	r3, [r2, r3]
 80025a8:	3b30      	subs	r3, #48	; 0x30
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7fd ff32 	bl	8000414 <__aeabi_i2d>
 80025b0:	4680      	mov	r8, r0
 80025b2:	4689      	mov	r9, r1
 80025b4:	4b52      	ldr	r3, [pc, #328]	; (8002700 <main+0x2b8>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	1e5a      	subs	r2, r3, #1
 80025ba:	79fb      	ldrb	r3, [r7, #7]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fd ff28 	bl	8000414 <__aeabi_i2d>
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	f04f 0000 	mov.w	r0, #0
 80025cc:	494e      	ldr	r1, [pc, #312]	; (8002708 <main+0x2c0>)
 80025ce:	f000 f94d 	bl	800286c <pow>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	4640      	mov	r0, r8
 80025d8:	4649      	mov	r1, r9
 80025da:	f7fd ff85 	bl	80004e8 <__aeabi_dmul>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	4620      	mov	r0, r4
 80025e4:	4629      	mov	r1, r5
 80025e6:	f7fd fdc9 	bl	800017c <__adddf3>
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	4610      	mov	r0, r2
 80025f0:	4619      	mov	r1, r3
 80025f2:	f7fe fa51 	bl	8000a98 <__aeabi_d2uiz>
 80025f6:	4603      	mov	r3, r0
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	4b42      	ldr	r3, [pc, #264]	; (8002704 <main+0x2bc>)
 80025fc:	801a      	strh	r2, [r3, #0]
				for(u8 i = 2 ; i<Rx_arrlength ; i++)
 80025fe:	79fb      	ldrb	r3, [r7, #7]
 8002600:	3301      	adds	r3, #1
 8002602:	71fb      	strb	r3, [r7, #7]
 8002604:	4b3e      	ldr	r3, [pc, #248]	; (8002700 <main+0x2b8>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	79fa      	ldrb	r2, [r7, #7]
 800260a:	429a      	cmp	r2, r3
 800260c:	d3c2      	bcc.n	8002594 <main+0x14c>
				}

				TargetDistance();
 800260e:	f7ff fe35 	bl	800227c <TargetDistance>
 8002612:	e79c      	b.n	800254e <main+0x106>

			}
			else
			{
				MGPIO_VoidSetPinValue(GPIOA, 0, HIGH);
 8002614:	2201      	movs	r2, #1
 8002616:	2100      	movs	r1, #0
 8002618:	2000      	movs	r0, #0
 800261a:	f7fe fec9 	bl	80013b0 <MGPIO_VoidSetPinValue>
				MGPIO_VoidSetPinValue(GPIOA, 5, HIGH);
 800261e:	2201      	movs	r2, #1
 8002620:	2105      	movs	r1, #5
 8002622:	2000      	movs	r0, #0
 8002624:	f7fe fec4 	bl	80013b0 <MGPIO_VoidSetPinValue>

				for(u8 i = 1 ; i<Rx_arrlength ; i++)
 8002628:	2301      	movs	r3, #1
 800262a:	71bb      	strb	r3, [r7, #6]
 800262c:	e037      	b.n	800269e <main+0x256>
				{
					Rx_pwm = Rx_pwm + (data_arr[i]-48)*pow(10,Rx_arrlength-1-i);
 800262e:	4b35      	ldr	r3, [pc, #212]	; (8002704 <main+0x2bc>)
 8002630:	881b      	ldrh	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f7fd feee 	bl	8000414 <__aeabi_i2d>
 8002638:	4604      	mov	r4, r0
 800263a:	460d      	mov	r5, r1
 800263c:	79bb      	ldrb	r3, [r7, #6]
 800263e:	4a2f      	ldr	r2, [pc, #188]	; (80026fc <main+0x2b4>)
 8002640:	5cd3      	ldrb	r3, [r2, r3]
 8002642:	3b30      	subs	r3, #48	; 0x30
 8002644:	4618      	mov	r0, r3
 8002646:	f7fd fee5 	bl	8000414 <__aeabi_i2d>
 800264a:	4680      	mov	r8, r0
 800264c:	4689      	mov	r9, r1
 800264e:	4b2c      	ldr	r3, [pc, #176]	; (8002700 <main+0x2b8>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	1e5a      	subs	r2, r3, #1
 8002654:	79bb      	ldrb	r3, [r7, #6]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	4618      	mov	r0, r3
 800265a:	f7fd fedb 	bl	8000414 <__aeabi_i2d>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	f04f 0000 	mov.w	r0, #0
 8002666:	4928      	ldr	r1, [pc, #160]	; (8002708 <main+0x2c0>)
 8002668:	f000 f900 	bl	800286c <pow>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4640      	mov	r0, r8
 8002672:	4649      	mov	r1, r9
 8002674:	f7fd ff38 	bl	80004e8 <__aeabi_dmul>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	4620      	mov	r0, r4
 800267e:	4629      	mov	r1, r5
 8002680:	f7fd fd7c 	bl	800017c <__adddf3>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	4610      	mov	r0, r2
 800268a:	4619      	mov	r1, r3
 800268c:	f7fe fa04 	bl	8000a98 <__aeabi_d2uiz>
 8002690:	4603      	mov	r3, r0
 8002692:	b29a      	uxth	r2, r3
 8002694:	4b1b      	ldr	r3, [pc, #108]	; (8002704 <main+0x2bc>)
 8002696:	801a      	strh	r2, [r3, #0]
				for(u8 i = 1 ; i<Rx_arrlength ; i++)
 8002698:	79bb      	ldrb	r3, [r7, #6]
 800269a:	3301      	adds	r3, #1
 800269c:	71bb      	strb	r3, [r7, #6]
 800269e:	4b18      	ldr	r3, [pc, #96]	; (8002700 <main+0x2b8>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	79ba      	ldrb	r2, [r7, #6]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d3c2      	bcc.n	800262e <main+0x1e6>
				}

				TargetDistance(Rx_pwm);
 80026a8:	4b16      	ldr	r3, [pc, #88]	; (8002704 <main+0x2bc>)
 80026aa:	881b      	ldrh	r3, [r3, #0]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff fde5 	bl	800227c <TargetDistance>
 80026b2:	e74c      	b.n	800254e <main+0x106>

			}

		}

		else if(data_arr[0] == 'm')
 80026b4:	4b11      	ldr	r3, [pc, #68]	; (80026fc <main+0x2b4>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b6d      	cmp	r3, #109	; 0x6d
 80026ba:	d10f      	bne.n	80026dc <main+0x294>
		{
			MTIM2_voidOutputPWM_C2(0);
 80026bc:	2000      	movs	r0, #0
 80026be:	f7ff faab 	bl	8001c18 <MTIM2_voidOutputPWM_C2>
			MTIM3_voidOutputPWM(0);
 80026c2:	2000      	movs	r0, #0
 80026c4:	f7ff fb06 	bl	8001cd4 <MTIM3_voidOutputPWM>

			if(data_arr[1] == '-')
 80026c8:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <main+0x2b4>)
 80026ca:	785b      	ldrb	r3, [r3, #1]
 80026cc:	2b2d      	cmp	r3, #45	; 0x2d
 80026ce:	d102      	bne.n	80026d6 <main+0x28e>
			{
				/* rotate right */
				RotateRight();
 80026d0:	f7ff fc98 	bl	8002004 <RotateRight>
 80026d4:	e73b      	b.n	800254e <main+0x106>
			}
			else
			{
				/* rotate left */
				RotateLeft();
 80026d6:	f7ff fd33 	bl	8002140 <RotateLeft>
 80026da:	e738      	b.n	800254e <main+0x106>
			}
		}

		else
		{
			MTIM3_voidOutputPWM(0);
 80026dc:	2000      	movs	r0, #0
 80026de:	f7ff faf9 	bl	8001cd4 <MTIM3_voidOutputPWM>
			MTIM2_voidOutputPWM_C2(0);
 80026e2:	2000      	movs	r0, #0
 80026e4:	f7ff fa98 	bl	8001c18 <MTIM2_voidOutputPWM_C2>
		Rx_arrlength = MUSART2_u8ReceiveDataBlock(data_arr);
 80026e8:	e731      	b.n	800254e <main+0x106>
 80026ea:	bf00      	nop
 80026ec:	08001e81 	.word	0x08001e81
 80026f0:	08001e65 	.word	0x08001e65
 80026f4:	08002399 	.word	0x08002399
 80026f8:	000f4240 	.word	0x000f4240
 80026fc:	200000f4 	.word	0x200000f4
 8002700:	200000f0 	.word	0x200000f0
 8002704:	20000108 	.word	0x20000108
 8002708:	40240000 	.word	0x40240000

0800270c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800270c:	480d      	ldr	r0, [pc, #52]	; (8002744 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800270e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002710:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002714:	480c      	ldr	r0, [pc, #48]	; (8002748 <LoopForever+0x6>)
  ldr r1, =_edata
 8002716:	490d      	ldr	r1, [pc, #52]	; (800274c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002718:	4a0d      	ldr	r2, [pc, #52]	; (8002750 <LoopForever+0xe>)
  movs r3, #0
 800271a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800271c:	e002      	b.n	8002724 <LoopCopyDataInit>

0800271e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800271e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002722:	3304      	adds	r3, #4

08002724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002728:	d3f9      	bcc.n	800271e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800272a:	4a0a      	ldr	r2, [pc, #40]	; (8002754 <LoopForever+0x12>)
  ldr r4, =_ebss
 800272c:	4c0a      	ldr	r4, [pc, #40]	; (8002758 <LoopForever+0x16>)
  movs r3, #0
 800272e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002730:	e001      	b.n	8002736 <LoopFillZerobss>

08002732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002734:	3204      	adds	r2, #4

08002736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002738:	d3fb      	bcc.n	8002732 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800273a:	f000 f817 	bl	800276c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800273e:	f7ff fe83 	bl	8002448 <main>

08002742 <LoopForever>:

LoopForever:
  b LoopForever
 8002742:	e7fe      	b.n	8002742 <LoopForever>
  ldr   r0, =_estack
 8002744:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002748:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800274c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002750:	080036c8 	.word	0x080036c8
  ldr r2, =_sbss
 8002754:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002758:	20000114 	.word	0x20000114

0800275c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800275c:	e7fe      	b.n	800275c <ADC1_2_IRQHandler>
	...

08002760 <__errno>:
 8002760:	4b01      	ldr	r3, [pc, #4]	; (8002768 <__errno+0x8>)
 8002762:	6818      	ldr	r0, [r3, #0]
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	20000004 	.word	0x20000004

0800276c <__libc_init_array>:
 800276c:	b570      	push	{r4, r5, r6, lr}
 800276e:	2600      	movs	r6, #0
 8002770:	4d0c      	ldr	r5, [pc, #48]	; (80027a4 <__libc_init_array+0x38>)
 8002772:	4c0d      	ldr	r4, [pc, #52]	; (80027a8 <__libc_init_array+0x3c>)
 8002774:	1b64      	subs	r4, r4, r5
 8002776:	10a4      	asrs	r4, r4, #2
 8002778:	42a6      	cmp	r6, r4
 800277a:	d109      	bne.n	8002790 <__libc_init_array+0x24>
 800277c:	f000 ff5a 	bl	8003634 <_init>
 8002780:	2600      	movs	r6, #0
 8002782:	4d0a      	ldr	r5, [pc, #40]	; (80027ac <__libc_init_array+0x40>)
 8002784:	4c0a      	ldr	r4, [pc, #40]	; (80027b0 <__libc_init_array+0x44>)
 8002786:	1b64      	subs	r4, r4, r5
 8002788:	10a4      	asrs	r4, r4, #2
 800278a:	42a6      	cmp	r6, r4
 800278c:	d105      	bne.n	800279a <__libc_init_array+0x2e>
 800278e:	bd70      	pop	{r4, r5, r6, pc}
 8002790:	f855 3b04 	ldr.w	r3, [r5], #4
 8002794:	4798      	blx	r3
 8002796:	3601      	adds	r6, #1
 8002798:	e7ee      	b.n	8002778 <__libc_init_array+0xc>
 800279a:	f855 3b04 	ldr.w	r3, [r5], #4
 800279e:	4798      	blx	r3
 80027a0:	3601      	adds	r6, #1
 80027a2:	e7f2      	b.n	800278a <__libc_init_array+0x1e>
 80027a4:	080036c0 	.word	0x080036c0
 80027a8:	080036c0 	.word	0x080036c0
 80027ac:	080036c0 	.word	0x080036c0
 80027b0:	080036c4 	.word	0x080036c4

080027b4 <__itoa>:
 80027b4:	1e93      	subs	r3, r2, #2
 80027b6:	2b22      	cmp	r3, #34	; 0x22
 80027b8:	b510      	push	{r4, lr}
 80027ba:	460c      	mov	r4, r1
 80027bc:	d904      	bls.n	80027c8 <__itoa+0x14>
 80027be:	2300      	movs	r3, #0
 80027c0:	461c      	mov	r4, r3
 80027c2:	700b      	strb	r3, [r1, #0]
 80027c4:	4620      	mov	r0, r4
 80027c6:	bd10      	pop	{r4, pc}
 80027c8:	2a0a      	cmp	r2, #10
 80027ca:	d109      	bne.n	80027e0 <__itoa+0x2c>
 80027cc:	2800      	cmp	r0, #0
 80027ce:	da07      	bge.n	80027e0 <__itoa+0x2c>
 80027d0:	232d      	movs	r3, #45	; 0x2d
 80027d2:	700b      	strb	r3, [r1, #0]
 80027d4:	2101      	movs	r1, #1
 80027d6:	4240      	negs	r0, r0
 80027d8:	4421      	add	r1, r4
 80027da:	f000 f805 	bl	80027e8 <__utoa>
 80027de:	e7f1      	b.n	80027c4 <__itoa+0x10>
 80027e0:	2100      	movs	r1, #0
 80027e2:	e7f9      	b.n	80027d8 <__itoa+0x24>

080027e4 <itoa>:
 80027e4:	f7ff bfe6 	b.w	80027b4 <__itoa>

080027e8 <__utoa>:
 80027e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ea:	b08b      	sub	sp, #44	; 0x2c
 80027ec:	4605      	mov	r5, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	466e      	mov	r6, sp
 80027f2:	4c1d      	ldr	r4, [pc, #116]	; (8002868 <__utoa+0x80>)
 80027f4:	f104 0c20 	add.w	ip, r4, #32
 80027f8:	4637      	mov	r7, r6
 80027fa:	6820      	ldr	r0, [r4, #0]
 80027fc:	6861      	ldr	r1, [r4, #4]
 80027fe:	3408      	adds	r4, #8
 8002800:	c703      	stmia	r7!, {r0, r1}
 8002802:	4564      	cmp	r4, ip
 8002804:	463e      	mov	r6, r7
 8002806:	d1f7      	bne.n	80027f8 <__utoa+0x10>
 8002808:	7921      	ldrb	r1, [r4, #4]
 800280a:	6820      	ldr	r0, [r4, #0]
 800280c:	7139      	strb	r1, [r7, #4]
 800280e:	1e91      	subs	r1, r2, #2
 8002810:	2922      	cmp	r1, #34	; 0x22
 8002812:	6038      	str	r0, [r7, #0]
 8002814:	f04f 0100 	mov.w	r1, #0
 8002818:	d904      	bls.n	8002824 <__utoa+0x3c>
 800281a:	7019      	strb	r1, [r3, #0]
 800281c:	460b      	mov	r3, r1
 800281e:	4618      	mov	r0, r3
 8002820:	b00b      	add	sp, #44	; 0x2c
 8002822:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002824:	1e58      	subs	r0, r3, #1
 8002826:	4684      	mov	ip, r0
 8002828:	fbb5 f7f2 	udiv	r7, r5, r2
 800282c:	fb02 5617 	mls	r6, r2, r7, r5
 8002830:	3628      	adds	r6, #40	; 0x28
 8002832:	446e      	add	r6, sp
 8002834:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8002838:	460c      	mov	r4, r1
 800283a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800283e:	462e      	mov	r6, r5
 8002840:	42b2      	cmp	r2, r6
 8002842:	463d      	mov	r5, r7
 8002844:	f101 0101 	add.w	r1, r1, #1
 8002848:	d9ee      	bls.n	8002828 <__utoa+0x40>
 800284a:	2200      	movs	r2, #0
 800284c:	545a      	strb	r2, [r3, r1]
 800284e:	1919      	adds	r1, r3, r4
 8002850:	1aa5      	subs	r5, r4, r2
 8002852:	42aa      	cmp	r2, r5
 8002854:	dae3      	bge.n	800281e <__utoa+0x36>
 8002856:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800285a:	780e      	ldrb	r6, [r1, #0]
 800285c:	3201      	adds	r2, #1
 800285e:	7006      	strb	r6, [r0, #0]
 8002860:	f801 5901 	strb.w	r5, [r1], #-1
 8002864:	e7f4      	b.n	8002850 <__utoa+0x68>
 8002866:	bf00      	nop
 8002868:	08003667 	.word	0x08003667

0800286c <pow>:
 800286c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002870:	4614      	mov	r4, r2
 8002872:	461d      	mov	r5, r3
 8002874:	4680      	mov	r8, r0
 8002876:	4689      	mov	r9, r1
 8002878:	f000 f862 	bl	8002940 <__ieee754_pow>
 800287c:	4622      	mov	r2, r4
 800287e:	4606      	mov	r6, r0
 8002880:	460f      	mov	r7, r1
 8002882:	462b      	mov	r3, r5
 8002884:	4620      	mov	r0, r4
 8002886:	4629      	mov	r1, r5
 8002888:	f7fe f8c8 	bl	8000a1c <__aeabi_dcmpun>
 800288c:	bbc8      	cbnz	r0, 8002902 <pow+0x96>
 800288e:	2200      	movs	r2, #0
 8002890:	2300      	movs	r3, #0
 8002892:	4640      	mov	r0, r8
 8002894:	4649      	mov	r1, r9
 8002896:	f7fe f88f 	bl	80009b8 <__aeabi_dcmpeq>
 800289a:	b1b8      	cbz	r0, 80028cc <pow+0x60>
 800289c:	2200      	movs	r2, #0
 800289e:	2300      	movs	r3, #0
 80028a0:	4620      	mov	r0, r4
 80028a2:	4629      	mov	r1, r5
 80028a4:	f7fe f888 	bl	80009b8 <__aeabi_dcmpeq>
 80028a8:	2800      	cmp	r0, #0
 80028aa:	d141      	bne.n	8002930 <pow+0xc4>
 80028ac:	4620      	mov	r0, r4
 80028ae:	4629      	mov	r1, r5
 80028b0:	f000 fe3b 	bl	800352a <finite>
 80028b4:	b328      	cbz	r0, 8002902 <pow+0x96>
 80028b6:	2200      	movs	r2, #0
 80028b8:	2300      	movs	r3, #0
 80028ba:	4620      	mov	r0, r4
 80028bc:	4629      	mov	r1, r5
 80028be:	f7fe f885 	bl	80009cc <__aeabi_dcmplt>
 80028c2:	b1f0      	cbz	r0, 8002902 <pow+0x96>
 80028c4:	f7ff ff4c 	bl	8002760 <__errno>
 80028c8:	2322      	movs	r3, #34	; 0x22
 80028ca:	e019      	b.n	8002900 <pow+0x94>
 80028cc:	4630      	mov	r0, r6
 80028ce:	4639      	mov	r1, r7
 80028d0:	f000 fe2b 	bl	800352a <finite>
 80028d4:	b9c8      	cbnz	r0, 800290a <pow+0x9e>
 80028d6:	4640      	mov	r0, r8
 80028d8:	4649      	mov	r1, r9
 80028da:	f000 fe26 	bl	800352a <finite>
 80028de:	b1a0      	cbz	r0, 800290a <pow+0x9e>
 80028e0:	4620      	mov	r0, r4
 80028e2:	4629      	mov	r1, r5
 80028e4:	f000 fe21 	bl	800352a <finite>
 80028e8:	b178      	cbz	r0, 800290a <pow+0x9e>
 80028ea:	4632      	mov	r2, r6
 80028ec:	463b      	mov	r3, r7
 80028ee:	4630      	mov	r0, r6
 80028f0:	4639      	mov	r1, r7
 80028f2:	f7fe f893 	bl	8000a1c <__aeabi_dcmpun>
 80028f6:	2800      	cmp	r0, #0
 80028f8:	d0e4      	beq.n	80028c4 <pow+0x58>
 80028fa:	f7ff ff31 	bl	8002760 <__errno>
 80028fe:	2321      	movs	r3, #33	; 0x21
 8002900:	6003      	str	r3, [r0, #0]
 8002902:	4630      	mov	r0, r6
 8002904:	4639      	mov	r1, r7
 8002906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800290a:	2200      	movs	r2, #0
 800290c:	2300      	movs	r3, #0
 800290e:	4630      	mov	r0, r6
 8002910:	4639      	mov	r1, r7
 8002912:	f7fe f851 	bl	80009b8 <__aeabi_dcmpeq>
 8002916:	2800      	cmp	r0, #0
 8002918:	d0f3      	beq.n	8002902 <pow+0x96>
 800291a:	4640      	mov	r0, r8
 800291c:	4649      	mov	r1, r9
 800291e:	f000 fe04 	bl	800352a <finite>
 8002922:	2800      	cmp	r0, #0
 8002924:	d0ed      	beq.n	8002902 <pow+0x96>
 8002926:	4620      	mov	r0, r4
 8002928:	4629      	mov	r1, r5
 800292a:	f000 fdfe 	bl	800352a <finite>
 800292e:	e7c8      	b.n	80028c2 <pow+0x56>
 8002930:	2600      	movs	r6, #0
 8002932:	4f01      	ldr	r7, [pc, #4]	; (8002938 <pow+0xcc>)
 8002934:	e7e5      	b.n	8002902 <pow+0x96>
 8002936:	bf00      	nop
 8002938:	3ff00000 	.word	0x3ff00000
 800293c:	00000000 	.word	0x00000000

08002940 <__ieee754_pow>:
 8002940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002944:	b093      	sub	sp, #76	; 0x4c
 8002946:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800294a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800294e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8002952:	4689      	mov	r9, r1
 8002954:	ea56 0102 	orrs.w	r1, r6, r2
 8002958:	4680      	mov	r8, r0
 800295a:	d111      	bne.n	8002980 <__ieee754_pow+0x40>
 800295c:	1803      	adds	r3, r0, r0
 800295e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8002962:	4152      	adcs	r2, r2
 8002964:	4299      	cmp	r1, r3
 8002966:	4b82      	ldr	r3, [pc, #520]	; (8002b70 <__ieee754_pow+0x230>)
 8002968:	4193      	sbcs	r3, r2
 800296a:	f080 84b9 	bcs.w	80032e0 <__ieee754_pow+0x9a0>
 800296e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002972:	4640      	mov	r0, r8
 8002974:	4649      	mov	r1, r9
 8002976:	f7fd fc01 	bl	800017c <__adddf3>
 800297a:	4683      	mov	fp, r0
 800297c:	468c      	mov	ip, r1
 800297e:	e06f      	b.n	8002a60 <__ieee754_pow+0x120>
 8002980:	4b7c      	ldr	r3, [pc, #496]	; (8002b74 <__ieee754_pow+0x234>)
 8002982:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8002986:	429c      	cmp	r4, r3
 8002988:	464d      	mov	r5, r9
 800298a:	4682      	mov	sl, r0
 800298c:	dc06      	bgt.n	800299c <__ieee754_pow+0x5c>
 800298e:	d101      	bne.n	8002994 <__ieee754_pow+0x54>
 8002990:	2800      	cmp	r0, #0
 8002992:	d1ec      	bne.n	800296e <__ieee754_pow+0x2e>
 8002994:	429e      	cmp	r6, r3
 8002996:	dc01      	bgt.n	800299c <__ieee754_pow+0x5c>
 8002998:	d10f      	bne.n	80029ba <__ieee754_pow+0x7a>
 800299a:	b172      	cbz	r2, 80029ba <__ieee754_pow+0x7a>
 800299c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80029a0:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80029a4:	ea55 050a 	orrs.w	r5, r5, sl
 80029a8:	d1e1      	bne.n	800296e <__ieee754_pow+0x2e>
 80029aa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80029ae:	18db      	adds	r3, r3, r3
 80029b0:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80029b4:	4152      	adcs	r2, r2
 80029b6:	429d      	cmp	r5, r3
 80029b8:	e7d5      	b.n	8002966 <__ieee754_pow+0x26>
 80029ba:	2d00      	cmp	r5, #0
 80029bc:	da39      	bge.n	8002a32 <__ieee754_pow+0xf2>
 80029be:	4b6e      	ldr	r3, [pc, #440]	; (8002b78 <__ieee754_pow+0x238>)
 80029c0:	429e      	cmp	r6, r3
 80029c2:	dc52      	bgt.n	8002a6a <__ieee754_pow+0x12a>
 80029c4:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80029c8:	429e      	cmp	r6, r3
 80029ca:	f340 849c 	ble.w	8003306 <__ieee754_pow+0x9c6>
 80029ce:	1533      	asrs	r3, r6, #20
 80029d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80029d4:	2b14      	cmp	r3, #20
 80029d6:	dd0f      	ble.n	80029f8 <__ieee754_pow+0xb8>
 80029d8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80029dc:	fa22 f103 	lsr.w	r1, r2, r3
 80029e0:	fa01 f303 	lsl.w	r3, r1, r3
 80029e4:	4293      	cmp	r3, r2
 80029e6:	f040 848e 	bne.w	8003306 <__ieee754_pow+0x9c6>
 80029ea:	f001 0101 	and.w	r1, r1, #1
 80029ee:	f1c1 0302 	rsb	r3, r1, #2
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	b182      	cbz	r2, 8002a18 <__ieee754_pow+0xd8>
 80029f6:	e05d      	b.n	8002ab4 <__ieee754_pow+0x174>
 80029f8:	2a00      	cmp	r2, #0
 80029fa:	d159      	bne.n	8002ab0 <__ieee754_pow+0x170>
 80029fc:	f1c3 0314 	rsb	r3, r3, #20
 8002a00:	fa46 f103 	asr.w	r1, r6, r3
 8002a04:	fa01 f303 	lsl.w	r3, r1, r3
 8002a08:	42b3      	cmp	r3, r6
 8002a0a:	f040 8479 	bne.w	8003300 <__ieee754_pow+0x9c0>
 8002a0e:	f001 0101 	and.w	r1, r1, #1
 8002a12:	f1c1 0302 	rsb	r3, r1, #2
 8002a16:	9300      	str	r3, [sp, #0]
 8002a18:	4b58      	ldr	r3, [pc, #352]	; (8002b7c <__ieee754_pow+0x23c>)
 8002a1a:	429e      	cmp	r6, r3
 8002a1c:	d132      	bne.n	8002a84 <__ieee754_pow+0x144>
 8002a1e:	2f00      	cmp	r7, #0
 8002a20:	f280 846a 	bge.w	80032f8 <__ieee754_pow+0x9b8>
 8002a24:	4642      	mov	r2, r8
 8002a26:	464b      	mov	r3, r9
 8002a28:	2000      	movs	r0, #0
 8002a2a:	4954      	ldr	r1, [pc, #336]	; (8002b7c <__ieee754_pow+0x23c>)
 8002a2c:	f7fd fe86 	bl	800073c <__aeabi_ddiv>
 8002a30:	e7a3      	b.n	800297a <__ieee754_pow+0x3a>
 8002a32:	2300      	movs	r3, #0
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	2a00      	cmp	r2, #0
 8002a38:	d13c      	bne.n	8002ab4 <__ieee754_pow+0x174>
 8002a3a:	4b4e      	ldr	r3, [pc, #312]	; (8002b74 <__ieee754_pow+0x234>)
 8002a3c:	429e      	cmp	r6, r3
 8002a3e:	d1eb      	bne.n	8002a18 <__ieee754_pow+0xd8>
 8002a40:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8002a44:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8002a48:	ea53 030a 	orrs.w	r3, r3, sl
 8002a4c:	f000 8448 	beq.w	80032e0 <__ieee754_pow+0x9a0>
 8002a50:	4b4b      	ldr	r3, [pc, #300]	; (8002b80 <__ieee754_pow+0x240>)
 8002a52:	429c      	cmp	r4, r3
 8002a54:	dd0b      	ble.n	8002a6e <__ieee754_pow+0x12e>
 8002a56:	2f00      	cmp	r7, #0
 8002a58:	f2c0 8448 	blt.w	80032ec <__ieee754_pow+0x9ac>
 8002a5c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8002a60:	4658      	mov	r0, fp
 8002a62:	4661      	mov	r1, ip
 8002a64:	b013      	add	sp, #76	; 0x4c
 8002a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	e7e2      	b.n	8002a34 <__ieee754_pow+0xf4>
 8002a6e:	2f00      	cmp	r7, #0
 8002a70:	f04f 0b00 	mov.w	fp, #0
 8002a74:	f04f 0c00 	mov.w	ip, #0
 8002a78:	daf2      	bge.n	8002a60 <__ieee754_pow+0x120>
 8002a7a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8002a7e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8002a82:	e7ed      	b.n	8002a60 <__ieee754_pow+0x120>
 8002a84:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8002a88:	d106      	bne.n	8002a98 <__ieee754_pow+0x158>
 8002a8a:	4642      	mov	r2, r8
 8002a8c:	464b      	mov	r3, r9
 8002a8e:	4640      	mov	r0, r8
 8002a90:	4649      	mov	r1, r9
 8002a92:	f7fd fd29 	bl	80004e8 <__aeabi_dmul>
 8002a96:	e770      	b.n	800297a <__ieee754_pow+0x3a>
 8002a98:	4b3a      	ldr	r3, [pc, #232]	; (8002b84 <__ieee754_pow+0x244>)
 8002a9a:	429f      	cmp	r7, r3
 8002a9c:	d10a      	bne.n	8002ab4 <__ieee754_pow+0x174>
 8002a9e:	2d00      	cmp	r5, #0
 8002aa0:	db08      	blt.n	8002ab4 <__ieee754_pow+0x174>
 8002aa2:	4640      	mov	r0, r8
 8002aa4:	4649      	mov	r1, r9
 8002aa6:	b013      	add	sp, #76	; 0x4c
 8002aa8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002aac:	f000 bc5e 	b.w	800336c <__ieee754_sqrt>
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	9300      	str	r3, [sp, #0]
 8002ab4:	4640      	mov	r0, r8
 8002ab6:	4649      	mov	r1, r9
 8002ab8:	f000 fd34 	bl	8003524 <fabs>
 8002abc:	4683      	mov	fp, r0
 8002abe:	468c      	mov	ip, r1
 8002ac0:	f1ba 0f00 	cmp.w	sl, #0
 8002ac4:	d128      	bne.n	8002b18 <__ieee754_pow+0x1d8>
 8002ac6:	b124      	cbz	r4, 8002ad2 <__ieee754_pow+0x192>
 8002ac8:	4b2c      	ldr	r3, [pc, #176]	; (8002b7c <__ieee754_pow+0x23c>)
 8002aca:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d122      	bne.n	8002b18 <__ieee754_pow+0x1d8>
 8002ad2:	2f00      	cmp	r7, #0
 8002ad4:	da07      	bge.n	8002ae6 <__ieee754_pow+0x1a6>
 8002ad6:	465a      	mov	r2, fp
 8002ad8:	4663      	mov	r3, ip
 8002ada:	2000      	movs	r0, #0
 8002adc:	4927      	ldr	r1, [pc, #156]	; (8002b7c <__ieee754_pow+0x23c>)
 8002ade:	f7fd fe2d 	bl	800073c <__aeabi_ddiv>
 8002ae2:	4683      	mov	fp, r0
 8002ae4:	468c      	mov	ip, r1
 8002ae6:	2d00      	cmp	r5, #0
 8002ae8:	daba      	bge.n	8002a60 <__ieee754_pow+0x120>
 8002aea:	9b00      	ldr	r3, [sp, #0]
 8002aec:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8002af0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8002af4:	4323      	orrs	r3, r4
 8002af6:	d108      	bne.n	8002b0a <__ieee754_pow+0x1ca>
 8002af8:	465a      	mov	r2, fp
 8002afa:	4663      	mov	r3, ip
 8002afc:	4658      	mov	r0, fp
 8002afe:	4661      	mov	r1, ip
 8002b00:	f7fd fb3a 	bl	8000178 <__aeabi_dsub>
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	e790      	b.n	8002a2c <__ieee754_pow+0xec>
 8002b0a:	9b00      	ldr	r3, [sp, #0]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d1a7      	bne.n	8002a60 <__ieee754_pow+0x120>
 8002b10:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8002b14:	469c      	mov	ip, r3
 8002b16:	e7a3      	b.n	8002a60 <__ieee754_pow+0x120>
 8002b18:	0feb      	lsrs	r3, r5, #31
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	930c      	str	r3, [sp, #48]	; 0x30
 8002b1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002b20:	9b00      	ldr	r3, [sp, #0]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	d104      	bne.n	8002b30 <__ieee754_pow+0x1f0>
 8002b26:	4642      	mov	r2, r8
 8002b28:	464b      	mov	r3, r9
 8002b2a:	4640      	mov	r0, r8
 8002b2c:	4649      	mov	r1, r9
 8002b2e:	e7e7      	b.n	8002b00 <__ieee754_pow+0x1c0>
 8002b30:	4b15      	ldr	r3, [pc, #84]	; (8002b88 <__ieee754_pow+0x248>)
 8002b32:	429e      	cmp	r6, r3
 8002b34:	f340 80f6 	ble.w	8002d24 <__ieee754_pow+0x3e4>
 8002b38:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8002b3c:	429e      	cmp	r6, r3
 8002b3e:	4b10      	ldr	r3, [pc, #64]	; (8002b80 <__ieee754_pow+0x240>)
 8002b40:	dd09      	ble.n	8002b56 <__ieee754_pow+0x216>
 8002b42:	429c      	cmp	r4, r3
 8002b44:	dc0c      	bgt.n	8002b60 <__ieee754_pow+0x220>
 8002b46:	2f00      	cmp	r7, #0
 8002b48:	da0c      	bge.n	8002b64 <__ieee754_pow+0x224>
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	b013      	add	sp, #76	; 0x4c
 8002b4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b52:	f000 bce2 	b.w	800351a <__math_oflow>
 8002b56:	429c      	cmp	r4, r3
 8002b58:	dbf5      	blt.n	8002b46 <__ieee754_pow+0x206>
 8002b5a:	4b08      	ldr	r3, [pc, #32]	; (8002b7c <__ieee754_pow+0x23c>)
 8002b5c:	429c      	cmp	r4, r3
 8002b5e:	dd15      	ble.n	8002b8c <__ieee754_pow+0x24c>
 8002b60:	2f00      	cmp	r7, #0
 8002b62:	dcf2      	bgt.n	8002b4a <__ieee754_pow+0x20a>
 8002b64:	2000      	movs	r0, #0
 8002b66:	b013      	add	sp, #76	; 0x4c
 8002b68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b6c:	f000 bcd0 	b.w	8003510 <__math_uflow>
 8002b70:	fff00000 	.word	0xfff00000
 8002b74:	7ff00000 	.word	0x7ff00000
 8002b78:	433fffff 	.word	0x433fffff
 8002b7c:	3ff00000 	.word	0x3ff00000
 8002b80:	3fefffff 	.word	0x3fefffff
 8002b84:	3fe00000 	.word	0x3fe00000
 8002b88:	41e00000 	.word	0x41e00000
 8002b8c:	4661      	mov	r1, ip
 8002b8e:	2200      	movs	r2, #0
 8002b90:	4658      	mov	r0, fp
 8002b92:	4b5f      	ldr	r3, [pc, #380]	; (8002d10 <__ieee754_pow+0x3d0>)
 8002b94:	f7fd faf0 	bl	8000178 <__aeabi_dsub>
 8002b98:	a355      	add	r3, pc, #340	; (adr r3, 8002cf0 <__ieee754_pow+0x3b0>)
 8002b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9e:	4604      	mov	r4, r0
 8002ba0:	460d      	mov	r5, r1
 8002ba2:	f7fd fca1 	bl	80004e8 <__aeabi_dmul>
 8002ba6:	a354      	add	r3, pc, #336	; (adr r3, 8002cf8 <__ieee754_pow+0x3b8>)
 8002ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bac:	4606      	mov	r6, r0
 8002bae:	460f      	mov	r7, r1
 8002bb0:	4620      	mov	r0, r4
 8002bb2:	4629      	mov	r1, r5
 8002bb4:	f7fd fc98 	bl	80004e8 <__aeabi_dmul>
 8002bb8:	2200      	movs	r2, #0
 8002bba:	4682      	mov	sl, r0
 8002bbc:	468b      	mov	fp, r1
 8002bbe:	4620      	mov	r0, r4
 8002bc0:	4629      	mov	r1, r5
 8002bc2:	4b54      	ldr	r3, [pc, #336]	; (8002d14 <__ieee754_pow+0x3d4>)
 8002bc4:	f7fd fc90 	bl	80004e8 <__aeabi_dmul>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	460b      	mov	r3, r1
 8002bcc:	a14c      	add	r1, pc, #304	; (adr r1, 8002d00 <__ieee754_pow+0x3c0>)
 8002bce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002bd2:	f7fd fad1 	bl	8000178 <__aeabi_dsub>
 8002bd6:	4622      	mov	r2, r4
 8002bd8:	462b      	mov	r3, r5
 8002bda:	f7fd fc85 	bl	80004e8 <__aeabi_dmul>
 8002bde:	4602      	mov	r2, r0
 8002be0:	460b      	mov	r3, r1
 8002be2:	2000      	movs	r0, #0
 8002be4:	494c      	ldr	r1, [pc, #304]	; (8002d18 <__ieee754_pow+0x3d8>)
 8002be6:	f7fd fac7 	bl	8000178 <__aeabi_dsub>
 8002bea:	4622      	mov	r2, r4
 8002bec:	462b      	mov	r3, r5
 8002bee:	4680      	mov	r8, r0
 8002bf0:	4689      	mov	r9, r1
 8002bf2:	4620      	mov	r0, r4
 8002bf4:	4629      	mov	r1, r5
 8002bf6:	f7fd fc77 	bl	80004e8 <__aeabi_dmul>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	4640      	mov	r0, r8
 8002c00:	4649      	mov	r1, r9
 8002c02:	f7fd fc71 	bl	80004e8 <__aeabi_dmul>
 8002c06:	a340      	add	r3, pc, #256	; (adr r3, 8002d08 <__ieee754_pow+0x3c8>)
 8002c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0c:	f7fd fc6c 	bl	80004e8 <__aeabi_dmul>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4650      	mov	r0, sl
 8002c16:	4659      	mov	r1, fp
 8002c18:	f7fd faae 	bl	8000178 <__aeabi_dsub>
 8002c1c:	f04f 0a00 	mov.w	sl, #0
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	4604      	mov	r4, r0
 8002c26:	460d      	mov	r5, r1
 8002c28:	4630      	mov	r0, r6
 8002c2a:	4639      	mov	r1, r7
 8002c2c:	f7fd faa6 	bl	800017c <__adddf3>
 8002c30:	4632      	mov	r2, r6
 8002c32:	463b      	mov	r3, r7
 8002c34:	4650      	mov	r0, sl
 8002c36:	468b      	mov	fp, r1
 8002c38:	f7fd fa9e 	bl	8000178 <__aeabi_dsub>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4620      	mov	r0, r4
 8002c42:	4629      	mov	r1, r5
 8002c44:	f7fd fa98 	bl	8000178 <__aeabi_dsub>
 8002c48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8002c4c:	9b00      	ldr	r3, [sp, #0]
 8002c4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002c50:	3b01      	subs	r3, #1
 8002c52:	4313      	orrs	r3, r2
 8002c54:	f04f 0600 	mov.w	r6, #0
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	bf0c      	ite	eq
 8002c5e:	4b2f      	ldreq	r3, [pc, #188]	; (8002d1c <__ieee754_pow+0x3dc>)
 8002c60:	4b2b      	ldrne	r3, [pc, #172]	; (8002d10 <__ieee754_pow+0x3d0>)
 8002c62:	4604      	mov	r4, r0
 8002c64:	460d      	mov	r5, r1
 8002c66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002c6a:	e9cd 2300 	strd	r2, r3, [sp]
 8002c6e:	4632      	mov	r2, r6
 8002c70:	463b      	mov	r3, r7
 8002c72:	f7fd fa81 	bl	8000178 <__aeabi_dsub>
 8002c76:	4652      	mov	r2, sl
 8002c78:	465b      	mov	r3, fp
 8002c7a:	f7fd fc35 	bl	80004e8 <__aeabi_dmul>
 8002c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002c82:	4680      	mov	r8, r0
 8002c84:	4689      	mov	r9, r1
 8002c86:	4620      	mov	r0, r4
 8002c88:	4629      	mov	r1, r5
 8002c8a:	f7fd fc2d 	bl	80004e8 <__aeabi_dmul>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	460b      	mov	r3, r1
 8002c92:	4640      	mov	r0, r8
 8002c94:	4649      	mov	r1, r9
 8002c96:	f7fd fa71 	bl	800017c <__adddf3>
 8002c9a:	4632      	mov	r2, r6
 8002c9c:	463b      	mov	r3, r7
 8002c9e:	4680      	mov	r8, r0
 8002ca0:	4689      	mov	r9, r1
 8002ca2:	4650      	mov	r0, sl
 8002ca4:	4659      	mov	r1, fp
 8002ca6:	f7fd fc1f 	bl	80004e8 <__aeabi_dmul>
 8002caa:	4604      	mov	r4, r0
 8002cac:	460d      	mov	r5, r1
 8002cae:	460b      	mov	r3, r1
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	4649      	mov	r1, r9
 8002cb4:	4640      	mov	r0, r8
 8002cb6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002cba:	f7fd fa5f 	bl	800017c <__adddf3>
 8002cbe:	4b18      	ldr	r3, [pc, #96]	; (8002d20 <__ieee754_pow+0x3e0>)
 8002cc0:	4682      	mov	sl, r0
 8002cc2:	4299      	cmp	r1, r3
 8002cc4:	460f      	mov	r7, r1
 8002cc6:	460e      	mov	r6, r1
 8002cc8:	f340 82e5 	ble.w	8003296 <__ieee754_pow+0x956>
 8002ccc:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8002cd0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8002cd4:	4303      	orrs	r3, r0
 8002cd6:	f000 81df 	beq.w	8003098 <__ieee754_pow+0x758>
 8002cda:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	f7fd fe73 	bl	80009cc <__aeabi_dcmplt>
 8002ce6:	3800      	subs	r0, #0
 8002ce8:	bf18      	it	ne
 8002cea:	2001      	movne	r0, #1
 8002cec:	e72e      	b.n	8002b4c <__ieee754_pow+0x20c>
 8002cee:	bf00      	nop
 8002cf0:	60000000 	.word	0x60000000
 8002cf4:	3ff71547 	.word	0x3ff71547
 8002cf8:	f85ddf44 	.word	0xf85ddf44
 8002cfc:	3e54ae0b 	.word	0x3e54ae0b
 8002d00:	55555555 	.word	0x55555555
 8002d04:	3fd55555 	.word	0x3fd55555
 8002d08:	652b82fe 	.word	0x652b82fe
 8002d0c:	3ff71547 	.word	0x3ff71547
 8002d10:	3ff00000 	.word	0x3ff00000
 8002d14:	3fd00000 	.word	0x3fd00000
 8002d18:	3fe00000 	.word	0x3fe00000
 8002d1c:	bff00000 	.word	0xbff00000
 8002d20:	408fffff 	.word	0x408fffff
 8002d24:	4bd2      	ldr	r3, [pc, #840]	; (8003070 <__ieee754_pow+0x730>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	402b      	ands	r3, r5
 8002d2a:	b943      	cbnz	r3, 8002d3e <__ieee754_pow+0x3fe>
 8002d2c:	4658      	mov	r0, fp
 8002d2e:	4661      	mov	r1, ip
 8002d30:	4bd0      	ldr	r3, [pc, #832]	; (8003074 <__ieee754_pow+0x734>)
 8002d32:	f7fd fbd9 	bl	80004e8 <__aeabi_dmul>
 8002d36:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8002d3a:	4683      	mov	fp, r0
 8002d3c:	460c      	mov	r4, r1
 8002d3e:	1523      	asrs	r3, r4, #20
 8002d40:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002d44:	4413      	add	r3, r2
 8002d46:	930b      	str	r3, [sp, #44]	; 0x2c
 8002d48:	4bcb      	ldr	r3, [pc, #812]	; (8003078 <__ieee754_pow+0x738>)
 8002d4a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8002d4e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8002d52:	429c      	cmp	r4, r3
 8002d54:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8002d58:	dd08      	ble.n	8002d6c <__ieee754_pow+0x42c>
 8002d5a:	4bc8      	ldr	r3, [pc, #800]	; (800307c <__ieee754_pow+0x73c>)
 8002d5c:	429c      	cmp	r4, r3
 8002d5e:	f340 8199 	ble.w	8003094 <__ieee754_pow+0x754>
 8002d62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002d64:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8002d68:	3301      	adds	r3, #1
 8002d6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8002d6c:	2600      	movs	r6, #0
 8002d6e:	00f3      	lsls	r3, r6, #3
 8002d70:	930d      	str	r3, [sp, #52]	; 0x34
 8002d72:	4bc3      	ldr	r3, [pc, #780]	; (8003080 <__ieee754_pow+0x740>)
 8002d74:	4658      	mov	r0, fp
 8002d76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8002d7a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002d7e:	4629      	mov	r1, r5
 8002d80:	461a      	mov	r2, r3
 8002d82:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8002d86:	4623      	mov	r3, r4
 8002d88:	f7fd f9f6 	bl	8000178 <__aeabi_dsub>
 8002d8c:	46da      	mov	sl, fp
 8002d8e:	462b      	mov	r3, r5
 8002d90:	4652      	mov	r2, sl
 8002d92:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8002d96:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002d9a:	f7fd f9ef 	bl	800017c <__adddf3>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	460b      	mov	r3, r1
 8002da2:	2000      	movs	r0, #0
 8002da4:	49b7      	ldr	r1, [pc, #732]	; (8003084 <__ieee754_pow+0x744>)
 8002da6:	f7fd fcc9 	bl	800073c <__aeabi_ddiv>
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8002db2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002db6:	f7fd fb97 	bl	80004e8 <__aeabi_dmul>
 8002dba:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002dbe:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8002dc2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	2200      	movs	r2, #0
 8002dca:	46ab      	mov	fp, r5
 8002dcc:	106d      	asrs	r5, r5, #1
 8002dce:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8002dd2:	9304      	str	r3, [sp, #16]
 8002dd4:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8002dd8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8002ddc:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8002de0:	4640      	mov	r0, r8
 8002de2:	4649      	mov	r1, r9
 8002de4:	4614      	mov	r4, r2
 8002de6:	461d      	mov	r5, r3
 8002de8:	f7fd fb7e 	bl	80004e8 <__aeabi_dmul>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002df4:	f7fd f9c0 	bl	8000178 <__aeabi_dsub>
 8002df8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002dfc:	4606      	mov	r6, r0
 8002dfe:	460f      	mov	r7, r1
 8002e00:	4620      	mov	r0, r4
 8002e02:	4629      	mov	r1, r5
 8002e04:	f7fd f9b8 	bl	8000178 <__aeabi_dsub>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	4650      	mov	r0, sl
 8002e0e:	4659      	mov	r1, fp
 8002e10:	f7fd f9b2 	bl	8000178 <__aeabi_dsub>
 8002e14:	4642      	mov	r2, r8
 8002e16:	464b      	mov	r3, r9
 8002e18:	f7fd fb66 	bl	80004e8 <__aeabi_dmul>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	460b      	mov	r3, r1
 8002e20:	4630      	mov	r0, r6
 8002e22:	4639      	mov	r1, r7
 8002e24:	f7fd f9a8 	bl	8000178 <__aeabi_dsub>
 8002e28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8002e2c:	f7fd fb5c 	bl	80004e8 <__aeabi_dmul>
 8002e30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002e34:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002e38:	4610      	mov	r0, r2
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	f7fd fb54 	bl	80004e8 <__aeabi_dmul>
 8002e40:	a379      	add	r3, pc, #484	; (adr r3, 8003028 <__ieee754_pow+0x6e8>)
 8002e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e46:	4604      	mov	r4, r0
 8002e48:	460d      	mov	r5, r1
 8002e4a:	f7fd fb4d 	bl	80004e8 <__aeabi_dmul>
 8002e4e:	a378      	add	r3, pc, #480	; (adr r3, 8003030 <__ieee754_pow+0x6f0>)
 8002e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e54:	f7fd f992 	bl	800017c <__adddf3>
 8002e58:	4622      	mov	r2, r4
 8002e5a:	462b      	mov	r3, r5
 8002e5c:	f7fd fb44 	bl	80004e8 <__aeabi_dmul>
 8002e60:	a375      	add	r3, pc, #468	; (adr r3, 8003038 <__ieee754_pow+0x6f8>)
 8002e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e66:	f7fd f989 	bl	800017c <__adddf3>
 8002e6a:	4622      	mov	r2, r4
 8002e6c:	462b      	mov	r3, r5
 8002e6e:	f7fd fb3b 	bl	80004e8 <__aeabi_dmul>
 8002e72:	a373      	add	r3, pc, #460	; (adr r3, 8003040 <__ieee754_pow+0x700>)
 8002e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e78:	f7fd f980 	bl	800017c <__adddf3>
 8002e7c:	4622      	mov	r2, r4
 8002e7e:	462b      	mov	r3, r5
 8002e80:	f7fd fb32 	bl	80004e8 <__aeabi_dmul>
 8002e84:	a370      	add	r3, pc, #448	; (adr r3, 8003048 <__ieee754_pow+0x708>)
 8002e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8a:	f7fd f977 	bl	800017c <__adddf3>
 8002e8e:	4622      	mov	r2, r4
 8002e90:	462b      	mov	r3, r5
 8002e92:	f7fd fb29 	bl	80004e8 <__aeabi_dmul>
 8002e96:	a36e      	add	r3, pc, #440	; (adr r3, 8003050 <__ieee754_pow+0x710>)
 8002e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9c:	f7fd f96e 	bl	800017c <__adddf3>
 8002ea0:	4622      	mov	r2, r4
 8002ea2:	4606      	mov	r6, r0
 8002ea4:	460f      	mov	r7, r1
 8002ea6:	462b      	mov	r3, r5
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	4629      	mov	r1, r5
 8002eac:	f7fd fb1c 	bl	80004e8 <__aeabi_dmul>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	4630      	mov	r0, r6
 8002eb6:	4639      	mov	r1, r7
 8002eb8:	f7fd fb16 	bl	80004e8 <__aeabi_dmul>
 8002ebc:	4604      	mov	r4, r0
 8002ebe:	460d      	mov	r5, r1
 8002ec0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002ec4:	4642      	mov	r2, r8
 8002ec6:	464b      	mov	r3, r9
 8002ec8:	f7fd f958 	bl	800017c <__adddf3>
 8002ecc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002ed0:	f7fd fb0a 	bl	80004e8 <__aeabi_dmul>
 8002ed4:	4622      	mov	r2, r4
 8002ed6:	462b      	mov	r3, r5
 8002ed8:	f7fd f950 	bl	800017c <__adddf3>
 8002edc:	4642      	mov	r2, r8
 8002ede:	4606      	mov	r6, r0
 8002ee0:	460f      	mov	r7, r1
 8002ee2:	464b      	mov	r3, r9
 8002ee4:	4640      	mov	r0, r8
 8002ee6:	4649      	mov	r1, r9
 8002ee8:	f7fd fafe 	bl	80004e8 <__aeabi_dmul>
 8002eec:	2200      	movs	r2, #0
 8002eee:	4b66      	ldr	r3, [pc, #408]	; (8003088 <__ieee754_pow+0x748>)
 8002ef0:	4682      	mov	sl, r0
 8002ef2:	468b      	mov	fp, r1
 8002ef4:	f7fd f942 	bl	800017c <__adddf3>
 8002ef8:	4632      	mov	r2, r6
 8002efa:	463b      	mov	r3, r7
 8002efc:	f7fd f93e 	bl	800017c <__adddf3>
 8002f00:	2400      	movs	r4, #0
 8002f02:	460d      	mov	r5, r1
 8002f04:	4622      	mov	r2, r4
 8002f06:	460b      	mov	r3, r1
 8002f08:	4640      	mov	r0, r8
 8002f0a:	4649      	mov	r1, r9
 8002f0c:	f7fd faec 	bl	80004e8 <__aeabi_dmul>
 8002f10:	2200      	movs	r2, #0
 8002f12:	4680      	mov	r8, r0
 8002f14:	4689      	mov	r9, r1
 8002f16:	4620      	mov	r0, r4
 8002f18:	4629      	mov	r1, r5
 8002f1a:	4b5b      	ldr	r3, [pc, #364]	; (8003088 <__ieee754_pow+0x748>)
 8002f1c:	f7fd f92c 	bl	8000178 <__aeabi_dsub>
 8002f20:	4652      	mov	r2, sl
 8002f22:	465b      	mov	r3, fp
 8002f24:	f7fd f928 	bl	8000178 <__aeabi_dsub>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	4630      	mov	r0, r6
 8002f2e:	4639      	mov	r1, r7
 8002f30:	f7fd f922 	bl	8000178 <__aeabi_dsub>
 8002f34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002f38:	f7fd fad6 	bl	80004e8 <__aeabi_dmul>
 8002f3c:	4622      	mov	r2, r4
 8002f3e:	4606      	mov	r6, r0
 8002f40:	460f      	mov	r7, r1
 8002f42:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002f46:	462b      	mov	r3, r5
 8002f48:	f7fd face 	bl	80004e8 <__aeabi_dmul>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4630      	mov	r0, r6
 8002f52:	4639      	mov	r1, r7
 8002f54:	f7fd f912 	bl	800017c <__adddf3>
 8002f58:	2400      	movs	r4, #0
 8002f5a:	4606      	mov	r6, r0
 8002f5c:	460f      	mov	r7, r1
 8002f5e:	4602      	mov	r2, r0
 8002f60:	460b      	mov	r3, r1
 8002f62:	4640      	mov	r0, r8
 8002f64:	4649      	mov	r1, r9
 8002f66:	f7fd f909 	bl	800017c <__adddf3>
 8002f6a:	a33b      	add	r3, pc, #236	; (adr r3, 8003058 <__ieee754_pow+0x718>)
 8002f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f70:	4620      	mov	r0, r4
 8002f72:	460d      	mov	r5, r1
 8002f74:	f7fd fab8 	bl	80004e8 <__aeabi_dmul>
 8002f78:	4642      	mov	r2, r8
 8002f7a:	464b      	mov	r3, r9
 8002f7c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002f80:	4620      	mov	r0, r4
 8002f82:	4629      	mov	r1, r5
 8002f84:	f7fd f8f8 	bl	8000178 <__aeabi_dsub>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	4630      	mov	r0, r6
 8002f8e:	4639      	mov	r1, r7
 8002f90:	f7fd f8f2 	bl	8000178 <__aeabi_dsub>
 8002f94:	a332      	add	r3, pc, #200	; (adr r3, 8003060 <__ieee754_pow+0x720>)
 8002f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f9a:	f7fd faa5 	bl	80004e8 <__aeabi_dmul>
 8002f9e:	a332      	add	r3, pc, #200	; (adr r3, 8003068 <__ieee754_pow+0x728>)
 8002fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa4:	4606      	mov	r6, r0
 8002fa6:	460f      	mov	r7, r1
 8002fa8:	4620      	mov	r0, r4
 8002faa:	4629      	mov	r1, r5
 8002fac:	f7fd fa9c 	bl	80004e8 <__aeabi_dmul>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	4630      	mov	r0, r6
 8002fb6:	4639      	mov	r1, r7
 8002fb8:	f7fd f8e0 	bl	800017c <__adddf3>
 8002fbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002fbe:	4b33      	ldr	r3, [pc, #204]	; (800308c <__ieee754_pow+0x74c>)
 8002fc0:	f04f 0a00 	mov.w	sl, #0
 8002fc4:	4413      	add	r3, r2
 8002fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fca:	f7fd f8d7 	bl	800017c <__adddf3>
 8002fce:	4680      	mov	r8, r0
 8002fd0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002fd2:	4689      	mov	r9, r1
 8002fd4:	f7fd fa1e 	bl	8000414 <__aeabi_i2d>
 8002fd8:	4604      	mov	r4, r0
 8002fda:	460d      	mov	r5, r1
 8002fdc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002fde:	4b2c      	ldr	r3, [pc, #176]	; (8003090 <__ieee754_pow+0x750>)
 8002fe0:	4413      	add	r3, r2
 8002fe2:	e9d3 6700 	ldrd	r6, r7, [r3]
 8002fe6:	4642      	mov	r2, r8
 8002fe8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002fec:	464b      	mov	r3, r9
 8002fee:	f7fd f8c5 	bl	800017c <__adddf3>
 8002ff2:	4632      	mov	r2, r6
 8002ff4:	463b      	mov	r3, r7
 8002ff6:	f7fd f8c1 	bl	800017c <__adddf3>
 8002ffa:	4622      	mov	r2, r4
 8002ffc:	462b      	mov	r3, r5
 8002ffe:	f7fd f8bd 	bl	800017c <__adddf3>
 8003002:	4622      	mov	r2, r4
 8003004:	462b      	mov	r3, r5
 8003006:	4650      	mov	r0, sl
 8003008:	468b      	mov	fp, r1
 800300a:	f7fd f8b5 	bl	8000178 <__aeabi_dsub>
 800300e:	4632      	mov	r2, r6
 8003010:	463b      	mov	r3, r7
 8003012:	f7fd f8b1 	bl	8000178 <__aeabi_dsub>
 8003016:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800301a:	f7fd f8ad 	bl	8000178 <__aeabi_dsub>
 800301e:	4602      	mov	r2, r0
 8003020:	460b      	mov	r3, r1
 8003022:	4640      	mov	r0, r8
 8003024:	4649      	mov	r1, r9
 8003026:	e60d      	b.n	8002c44 <__ieee754_pow+0x304>
 8003028:	4a454eef 	.word	0x4a454eef
 800302c:	3fca7e28 	.word	0x3fca7e28
 8003030:	93c9db65 	.word	0x93c9db65
 8003034:	3fcd864a 	.word	0x3fcd864a
 8003038:	a91d4101 	.word	0xa91d4101
 800303c:	3fd17460 	.word	0x3fd17460
 8003040:	518f264d 	.word	0x518f264d
 8003044:	3fd55555 	.word	0x3fd55555
 8003048:	db6fabff 	.word	0xdb6fabff
 800304c:	3fdb6db6 	.word	0x3fdb6db6
 8003050:	33333303 	.word	0x33333303
 8003054:	3fe33333 	.word	0x3fe33333
 8003058:	e0000000 	.word	0xe0000000
 800305c:	3feec709 	.word	0x3feec709
 8003060:	dc3a03fd 	.word	0xdc3a03fd
 8003064:	3feec709 	.word	0x3feec709
 8003068:	145b01f5 	.word	0x145b01f5
 800306c:	be3e2fe0 	.word	0xbe3e2fe0
 8003070:	7ff00000 	.word	0x7ff00000
 8003074:	43400000 	.word	0x43400000
 8003078:	0003988e 	.word	0x0003988e
 800307c:	000bb679 	.word	0x000bb679
 8003080:	08003690 	.word	0x08003690
 8003084:	3ff00000 	.word	0x3ff00000
 8003088:	40080000 	.word	0x40080000
 800308c:	080036b0 	.word	0x080036b0
 8003090:	080036a0 	.word	0x080036a0
 8003094:	2601      	movs	r6, #1
 8003096:	e66a      	b.n	8002d6e <__ieee754_pow+0x42e>
 8003098:	a39d      	add	r3, pc, #628	; (adr r3, 8003310 <__ieee754_pow+0x9d0>)
 800309a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309e:	4640      	mov	r0, r8
 80030a0:	4649      	mov	r1, r9
 80030a2:	f7fd f86b 	bl	800017c <__adddf3>
 80030a6:	4622      	mov	r2, r4
 80030a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80030ac:	462b      	mov	r3, r5
 80030ae:	4650      	mov	r0, sl
 80030b0:	4639      	mov	r1, r7
 80030b2:	f7fd f861 	bl	8000178 <__aeabi_dsub>
 80030b6:	4602      	mov	r2, r0
 80030b8:	460b      	mov	r3, r1
 80030ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80030be:	f7fd fca3 	bl	8000a08 <__aeabi_dcmpgt>
 80030c2:	2800      	cmp	r0, #0
 80030c4:	f47f ae09 	bne.w	8002cda <__ieee754_pow+0x39a>
 80030c8:	4aa3      	ldr	r2, [pc, #652]	; (8003358 <__ieee754_pow+0xa18>)
 80030ca:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80030ce:	4293      	cmp	r3, r2
 80030d0:	f340 8101 	ble.w	80032d6 <__ieee754_pow+0x996>
 80030d4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80030d8:	2000      	movs	r0, #0
 80030da:	151b      	asrs	r3, r3, #20
 80030dc:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80030e0:	fa4a f303 	asr.w	r3, sl, r3
 80030e4:	4433      	add	r3, r6
 80030e6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80030ea:	4f9c      	ldr	r7, [pc, #624]	; (800335c <__ieee754_pow+0xa1c>)
 80030ec:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80030f0:	4117      	asrs	r7, r2
 80030f2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80030f6:	ea23 0107 	bic.w	r1, r3, r7
 80030fa:	f1c2 0214 	rsb	r2, r2, #20
 80030fe:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8003102:	460b      	mov	r3, r1
 8003104:	fa4a fa02 	asr.w	sl, sl, r2
 8003108:	2e00      	cmp	r6, #0
 800310a:	4602      	mov	r2, r0
 800310c:	4629      	mov	r1, r5
 800310e:	4620      	mov	r0, r4
 8003110:	bfb8      	it	lt
 8003112:	f1ca 0a00 	rsblt	sl, sl, #0
 8003116:	f7fd f82f 	bl	8000178 <__aeabi_dsub>
 800311a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800311e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003122:	2400      	movs	r4, #0
 8003124:	4642      	mov	r2, r8
 8003126:	464b      	mov	r3, r9
 8003128:	f7fd f828 	bl	800017c <__adddf3>
 800312c:	a37a      	add	r3, pc, #488	; (adr r3, 8003318 <__ieee754_pow+0x9d8>)
 800312e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003132:	4620      	mov	r0, r4
 8003134:	460d      	mov	r5, r1
 8003136:	f7fd f9d7 	bl	80004e8 <__aeabi_dmul>
 800313a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800313e:	4606      	mov	r6, r0
 8003140:	460f      	mov	r7, r1
 8003142:	4620      	mov	r0, r4
 8003144:	4629      	mov	r1, r5
 8003146:	f7fd f817 	bl	8000178 <__aeabi_dsub>
 800314a:	4602      	mov	r2, r0
 800314c:	460b      	mov	r3, r1
 800314e:	4640      	mov	r0, r8
 8003150:	4649      	mov	r1, r9
 8003152:	f7fd f811 	bl	8000178 <__aeabi_dsub>
 8003156:	a372      	add	r3, pc, #456	; (adr r3, 8003320 <__ieee754_pow+0x9e0>)
 8003158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315c:	f7fd f9c4 	bl	80004e8 <__aeabi_dmul>
 8003160:	a371      	add	r3, pc, #452	; (adr r3, 8003328 <__ieee754_pow+0x9e8>)
 8003162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003166:	4680      	mov	r8, r0
 8003168:	4689      	mov	r9, r1
 800316a:	4620      	mov	r0, r4
 800316c:	4629      	mov	r1, r5
 800316e:	f7fd f9bb 	bl	80004e8 <__aeabi_dmul>
 8003172:	4602      	mov	r2, r0
 8003174:	460b      	mov	r3, r1
 8003176:	4640      	mov	r0, r8
 8003178:	4649      	mov	r1, r9
 800317a:	f7fc ffff 	bl	800017c <__adddf3>
 800317e:	4604      	mov	r4, r0
 8003180:	460d      	mov	r5, r1
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	4630      	mov	r0, r6
 8003188:	4639      	mov	r1, r7
 800318a:	f7fc fff7 	bl	800017c <__adddf3>
 800318e:	4632      	mov	r2, r6
 8003190:	463b      	mov	r3, r7
 8003192:	4680      	mov	r8, r0
 8003194:	4689      	mov	r9, r1
 8003196:	f7fc ffef 	bl	8000178 <__aeabi_dsub>
 800319a:	4602      	mov	r2, r0
 800319c:	460b      	mov	r3, r1
 800319e:	4620      	mov	r0, r4
 80031a0:	4629      	mov	r1, r5
 80031a2:	f7fc ffe9 	bl	8000178 <__aeabi_dsub>
 80031a6:	4642      	mov	r2, r8
 80031a8:	4606      	mov	r6, r0
 80031aa:	460f      	mov	r7, r1
 80031ac:	464b      	mov	r3, r9
 80031ae:	4640      	mov	r0, r8
 80031b0:	4649      	mov	r1, r9
 80031b2:	f7fd f999 	bl	80004e8 <__aeabi_dmul>
 80031b6:	a35e      	add	r3, pc, #376	; (adr r3, 8003330 <__ieee754_pow+0x9f0>)
 80031b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031bc:	4604      	mov	r4, r0
 80031be:	460d      	mov	r5, r1
 80031c0:	f7fd f992 	bl	80004e8 <__aeabi_dmul>
 80031c4:	a35c      	add	r3, pc, #368	; (adr r3, 8003338 <__ieee754_pow+0x9f8>)
 80031c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ca:	f7fc ffd5 	bl	8000178 <__aeabi_dsub>
 80031ce:	4622      	mov	r2, r4
 80031d0:	462b      	mov	r3, r5
 80031d2:	f7fd f989 	bl	80004e8 <__aeabi_dmul>
 80031d6:	a35a      	add	r3, pc, #360	; (adr r3, 8003340 <__ieee754_pow+0xa00>)
 80031d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031dc:	f7fc ffce 	bl	800017c <__adddf3>
 80031e0:	4622      	mov	r2, r4
 80031e2:	462b      	mov	r3, r5
 80031e4:	f7fd f980 	bl	80004e8 <__aeabi_dmul>
 80031e8:	a357      	add	r3, pc, #348	; (adr r3, 8003348 <__ieee754_pow+0xa08>)
 80031ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ee:	f7fc ffc3 	bl	8000178 <__aeabi_dsub>
 80031f2:	4622      	mov	r2, r4
 80031f4:	462b      	mov	r3, r5
 80031f6:	f7fd f977 	bl	80004e8 <__aeabi_dmul>
 80031fa:	a355      	add	r3, pc, #340	; (adr r3, 8003350 <__ieee754_pow+0xa10>)
 80031fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003200:	f7fc ffbc 	bl	800017c <__adddf3>
 8003204:	4622      	mov	r2, r4
 8003206:	462b      	mov	r3, r5
 8003208:	f7fd f96e 	bl	80004e8 <__aeabi_dmul>
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	4640      	mov	r0, r8
 8003212:	4649      	mov	r1, r9
 8003214:	f7fc ffb0 	bl	8000178 <__aeabi_dsub>
 8003218:	4604      	mov	r4, r0
 800321a:	460d      	mov	r5, r1
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	4640      	mov	r0, r8
 8003222:	4649      	mov	r1, r9
 8003224:	f7fd f960 	bl	80004e8 <__aeabi_dmul>
 8003228:	2200      	movs	r2, #0
 800322a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800322e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003232:	4620      	mov	r0, r4
 8003234:	4629      	mov	r1, r5
 8003236:	f7fc ff9f 	bl	8000178 <__aeabi_dsub>
 800323a:	4602      	mov	r2, r0
 800323c:	460b      	mov	r3, r1
 800323e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003242:	f7fd fa7b 	bl	800073c <__aeabi_ddiv>
 8003246:	4632      	mov	r2, r6
 8003248:	4604      	mov	r4, r0
 800324a:	460d      	mov	r5, r1
 800324c:	463b      	mov	r3, r7
 800324e:	4640      	mov	r0, r8
 8003250:	4649      	mov	r1, r9
 8003252:	f7fd f949 	bl	80004e8 <__aeabi_dmul>
 8003256:	4632      	mov	r2, r6
 8003258:	463b      	mov	r3, r7
 800325a:	f7fc ff8f 	bl	800017c <__adddf3>
 800325e:	4602      	mov	r2, r0
 8003260:	460b      	mov	r3, r1
 8003262:	4620      	mov	r0, r4
 8003264:	4629      	mov	r1, r5
 8003266:	f7fc ff87 	bl	8000178 <__aeabi_dsub>
 800326a:	4642      	mov	r2, r8
 800326c:	464b      	mov	r3, r9
 800326e:	f7fc ff83 	bl	8000178 <__aeabi_dsub>
 8003272:	4602      	mov	r2, r0
 8003274:	460b      	mov	r3, r1
 8003276:	2000      	movs	r0, #0
 8003278:	4939      	ldr	r1, [pc, #228]	; (8003360 <__ieee754_pow+0xa20>)
 800327a:	f7fc ff7d 	bl	8000178 <__aeabi_dsub>
 800327e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8003282:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8003286:	da29      	bge.n	80032dc <__ieee754_pow+0x99c>
 8003288:	4652      	mov	r2, sl
 800328a:	f000 f955 	bl	8003538 <scalbn>
 800328e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003292:	f7ff bbfe 	b.w	8002a92 <__ieee754_pow+0x152>
 8003296:	4b33      	ldr	r3, [pc, #204]	; (8003364 <__ieee754_pow+0xa24>)
 8003298:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800329c:	429f      	cmp	r7, r3
 800329e:	f77f af13 	ble.w	80030c8 <__ieee754_pow+0x788>
 80032a2:	4b31      	ldr	r3, [pc, #196]	; (8003368 <__ieee754_pow+0xa28>)
 80032a4:	440b      	add	r3, r1
 80032a6:	4303      	orrs	r3, r0
 80032a8:	d009      	beq.n	80032be <__ieee754_pow+0x97e>
 80032aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80032ae:	2200      	movs	r2, #0
 80032b0:	2300      	movs	r3, #0
 80032b2:	f7fd fb8b 	bl	80009cc <__aeabi_dcmplt>
 80032b6:	3800      	subs	r0, #0
 80032b8:	bf18      	it	ne
 80032ba:	2001      	movne	r0, #1
 80032bc:	e453      	b.n	8002b66 <__ieee754_pow+0x226>
 80032be:	4622      	mov	r2, r4
 80032c0:	462b      	mov	r3, r5
 80032c2:	f7fc ff59 	bl	8000178 <__aeabi_dsub>
 80032c6:	4642      	mov	r2, r8
 80032c8:	464b      	mov	r3, r9
 80032ca:	f7fd fb93 	bl	80009f4 <__aeabi_dcmpge>
 80032ce:	2800      	cmp	r0, #0
 80032d0:	f43f aefa 	beq.w	80030c8 <__ieee754_pow+0x788>
 80032d4:	e7e9      	b.n	80032aa <__ieee754_pow+0x96a>
 80032d6:	f04f 0a00 	mov.w	sl, #0
 80032da:	e720      	b.n	800311e <__ieee754_pow+0x7de>
 80032dc:	4621      	mov	r1, r4
 80032de:	e7d6      	b.n	800328e <__ieee754_pow+0x94e>
 80032e0:	f04f 0b00 	mov.w	fp, #0
 80032e4:	f8df c078 	ldr.w	ip, [pc, #120]	; 8003360 <__ieee754_pow+0xa20>
 80032e8:	f7ff bbba 	b.w	8002a60 <__ieee754_pow+0x120>
 80032ec:	f04f 0b00 	mov.w	fp, #0
 80032f0:	f04f 0c00 	mov.w	ip, #0
 80032f4:	f7ff bbb4 	b.w	8002a60 <__ieee754_pow+0x120>
 80032f8:	4640      	mov	r0, r8
 80032fa:	4649      	mov	r1, r9
 80032fc:	f7ff bb3d 	b.w	800297a <__ieee754_pow+0x3a>
 8003300:	9200      	str	r2, [sp, #0]
 8003302:	f7ff bb89 	b.w	8002a18 <__ieee754_pow+0xd8>
 8003306:	2300      	movs	r3, #0
 8003308:	f7ff bb73 	b.w	80029f2 <__ieee754_pow+0xb2>
 800330c:	f3af 8000 	nop.w
 8003310:	652b82fe 	.word	0x652b82fe
 8003314:	3c971547 	.word	0x3c971547
 8003318:	00000000 	.word	0x00000000
 800331c:	3fe62e43 	.word	0x3fe62e43
 8003320:	fefa39ef 	.word	0xfefa39ef
 8003324:	3fe62e42 	.word	0x3fe62e42
 8003328:	0ca86c39 	.word	0x0ca86c39
 800332c:	be205c61 	.word	0xbe205c61
 8003330:	72bea4d0 	.word	0x72bea4d0
 8003334:	3e663769 	.word	0x3e663769
 8003338:	c5d26bf1 	.word	0xc5d26bf1
 800333c:	3ebbbd41 	.word	0x3ebbbd41
 8003340:	af25de2c 	.word	0xaf25de2c
 8003344:	3f11566a 	.word	0x3f11566a
 8003348:	16bebd93 	.word	0x16bebd93
 800334c:	3f66c16c 	.word	0x3f66c16c
 8003350:	5555553e 	.word	0x5555553e
 8003354:	3fc55555 	.word	0x3fc55555
 8003358:	3fe00000 	.word	0x3fe00000
 800335c:	000fffff 	.word	0x000fffff
 8003360:	3ff00000 	.word	0x3ff00000
 8003364:	4090cbff 	.word	0x4090cbff
 8003368:	3f6f3400 	.word	0x3f6f3400

0800336c <__ieee754_sqrt>:
 800336c:	f8df c158 	ldr.w	ip, [pc, #344]	; 80034c8 <__ieee754_sqrt+0x15c>
 8003370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003374:	ea3c 0c01 	bics.w	ip, ip, r1
 8003378:	4606      	mov	r6, r0
 800337a:	460d      	mov	r5, r1
 800337c:	460c      	mov	r4, r1
 800337e:	460a      	mov	r2, r1
 8003380:	4607      	mov	r7, r0
 8003382:	4603      	mov	r3, r0
 8003384:	d10f      	bne.n	80033a6 <__ieee754_sqrt+0x3a>
 8003386:	4602      	mov	r2, r0
 8003388:	460b      	mov	r3, r1
 800338a:	f7fd f8ad 	bl	80004e8 <__aeabi_dmul>
 800338e:	4602      	mov	r2, r0
 8003390:	460b      	mov	r3, r1
 8003392:	4630      	mov	r0, r6
 8003394:	4629      	mov	r1, r5
 8003396:	f7fc fef1 	bl	800017c <__adddf3>
 800339a:	4606      	mov	r6, r0
 800339c:	460d      	mov	r5, r1
 800339e:	4630      	mov	r0, r6
 80033a0:	4629      	mov	r1, r5
 80033a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033a6:	2900      	cmp	r1, #0
 80033a8:	dc0e      	bgt.n	80033c8 <__ieee754_sqrt+0x5c>
 80033aa:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80033ae:	ea5c 0707 	orrs.w	r7, ip, r7
 80033b2:	d0f4      	beq.n	800339e <__ieee754_sqrt+0x32>
 80033b4:	b141      	cbz	r1, 80033c8 <__ieee754_sqrt+0x5c>
 80033b6:	4602      	mov	r2, r0
 80033b8:	460b      	mov	r3, r1
 80033ba:	f7fc fedd 	bl	8000178 <__aeabi_dsub>
 80033be:	4602      	mov	r2, r0
 80033c0:	460b      	mov	r3, r1
 80033c2:	f7fd f9bb 	bl	800073c <__aeabi_ddiv>
 80033c6:	e7e8      	b.n	800339a <__ieee754_sqrt+0x2e>
 80033c8:	1521      	asrs	r1, r4, #20
 80033ca:	d075      	beq.n	80034b8 <__ieee754_sqrt+0x14c>
 80033cc:	07cc      	lsls	r4, r1, #31
 80033ce:	f04f 0400 	mov.w	r4, #0
 80033d2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80033d6:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 80033da:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80033de:	bf5e      	ittt	pl
 80033e0:	0fd9      	lsrpl	r1, r3, #31
 80033e2:	005b      	lslpl	r3, r3, #1
 80033e4:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 80033e8:	0fd9      	lsrs	r1, r3, #31
 80033ea:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80033ee:	2516      	movs	r5, #22
 80033f0:	4620      	mov	r0, r4
 80033f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80033f6:	107f      	asrs	r7, r7, #1
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	1846      	adds	r6, r0, r1
 80033fc:	4296      	cmp	r6, r2
 80033fe:	bfde      	ittt	le
 8003400:	1b92      	suble	r2, r2, r6
 8003402:	1870      	addle	r0, r6, r1
 8003404:	1864      	addle	r4, r4, r1
 8003406:	0052      	lsls	r2, r2, #1
 8003408:	3d01      	subs	r5, #1
 800340a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800340e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8003412:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003416:	d1f0      	bne.n	80033fa <__ieee754_sqrt+0x8e>
 8003418:	4629      	mov	r1, r5
 800341a:	f04f 0e20 	mov.w	lr, #32
 800341e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8003422:	4282      	cmp	r2, r0
 8003424:	eb06 0c05 	add.w	ip, r6, r5
 8003428:	dc02      	bgt.n	8003430 <__ieee754_sqrt+0xc4>
 800342a:	d113      	bne.n	8003454 <__ieee754_sqrt+0xe8>
 800342c:	459c      	cmp	ip, r3
 800342e:	d811      	bhi.n	8003454 <__ieee754_sqrt+0xe8>
 8003430:	f1bc 0f00 	cmp.w	ip, #0
 8003434:	eb0c 0506 	add.w	r5, ip, r6
 8003438:	da43      	bge.n	80034c2 <__ieee754_sqrt+0x156>
 800343a:	2d00      	cmp	r5, #0
 800343c:	db41      	blt.n	80034c2 <__ieee754_sqrt+0x156>
 800343e:	f100 0801 	add.w	r8, r0, #1
 8003442:	1a12      	subs	r2, r2, r0
 8003444:	4640      	mov	r0, r8
 8003446:	459c      	cmp	ip, r3
 8003448:	bf88      	it	hi
 800344a:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800344e:	eba3 030c 	sub.w	r3, r3, ip
 8003452:	4431      	add	r1, r6
 8003454:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8003458:	f1be 0e01 	subs.w	lr, lr, #1
 800345c:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8003460:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003464:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003468:	d1db      	bne.n	8003422 <__ieee754_sqrt+0xb6>
 800346a:	4313      	orrs	r3, r2
 800346c:	d006      	beq.n	800347c <__ieee754_sqrt+0x110>
 800346e:	1c48      	adds	r0, r1, #1
 8003470:	bf0b      	itete	eq
 8003472:	4671      	moveq	r1, lr
 8003474:	3101      	addne	r1, #1
 8003476:	3401      	addeq	r4, #1
 8003478:	f021 0101 	bicne.w	r1, r1, #1
 800347c:	1063      	asrs	r3, r4, #1
 800347e:	0849      	lsrs	r1, r1, #1
 8003480:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8003484:	07e2      	lsls	r2, r4, #31
 8003486:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800348a:	bf48      	it	mi
 800348c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8003490:	460e      	mov	r6, r1
 8003492:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8003496:	e782      	b.n	800339e <__ieee754_sqrt+0x32>
 8003498:	0ada      	lsrs	r2, r3, #11
 800349a:	3815      	subs	r0, #21
 800349c:	055b      	lsls	r3, r3, #21
 800349e:	2a00      	cmp	r2, #0
 80034a0:	d0fa      	beq.n	8003498 <__ieee754_sqrt+0x12c>
 80034a2:	02d5      	lsls	r5, r2, #11
 80034a4:	d50a      	bpl.n	80034bc <__ieee754_sqrt+0x150>
 80034a6:	f1c1 0420 	rsb	r4, r1, #32
 80034aa:	fa23 f404 	lsr.w	r4, r3, r4
 80034ae:	1e4d      	subs	r5, r1, #1
 80034b0:	408b      	lsls	r3, r1
 80034b2:	4322      	orrs	r2, r4
 80034b4:	1b41      	subs	r1, r0, r5
 80034b6:	e789      	b.n	80033cc <__ieee754_sqrt+0x60>
 80034b8:	4608      	mov	r0, r1
 80034ba:	e7f0      	b.n	800349e <__ieee754_sqrt+0x132>
 80034bc:	0052      	lsls	r2, r2, #1
 80034be:	3101      	adds	r1, #1
 80034c0:	e7ef      	b.n	80034a2 <__ieee754_sqrt+0x136>
 80034c2:	4680      	mov	r8, r0
 80034c4:	e7bd      	b.n	8003442 <__ieee754_sqrt+0xd6>
 80034c6:	bf00      	nop
 80034c8:	7ff00000 	.word	0x7ff00000

080034cc <with_errno>:
 80034cc:	b570      	push	{r4, r5, r6, lr}
 80034ce:	4604      	mov	r4, r0
 80034d0:	460d      	mov	r5, r1
 80034d2:	4616      	mov	r6, r2
 80034d4:	f7ff f944 	bl	8002760 <__errno>
 80034d8:	4629      	mov	r1, r5
 80034da:	6006      	str	r6, [r0, #0]
 80034dc:	4620      	mov	r0, r4
 80034de:	bd70      	pop	{r4, r5, r6, pc}

080034e0 <xflow>:
 80034e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80034e2:	4615      	mov	r5, r2
 80034e4:	461c      	mov	r4, r3
 80034e6:	b180      	cbz	r0, 800350a <xflow+0x2a>
 80034e8:	4610      	mov	r0, r2
 80034ea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80034ee:	e9cd 0100 	strd	r0, r1, [sp]
 80034f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80034f6:	4628      	mov	r0, r5
 80034f8:	4621      	mov	r1, r4
 80034fa:	f7fc fff5 	bl	80004e8 <__aeabi_dmul>
 80034fe:	2222      	movs	r2, #34	; 0x22
 8003500:	b003      	add	sp, #12
 8003502:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003506:	f7ff bfe1 	b.w	80034cc <with_errno>
 800350a:	4610      	mov	r0, r2
 800350c:	4619      	mov	r1, r3
 800350e:	e7ee      	b.n	80034ee <xflow+0xe>

08003510 <__math_uflow>:
 8003510:	2200      	movs	r2, #0
 8003512:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003516:	f7ff bfe3 	b.w	80034e0 <xflow>

0800351a <__math_oflow>:
 800351a:	2200      	movs	r2, #0
 800351c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8003520:	f7ff bfde 	b.w	80034e0 <xflow>

08003524 <fabs>:
 8003524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003528:	4770      	bx	lr

0800352a <finite>:
 800352a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800352e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8003532:	0fc0      	lsrs	r0, r0, #31
 8003534:	4770      	bx	lr
	...

08003538 <scalbn>:
 8003538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800353a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800353e:	4604      	mov	r4, r0
 8003540:	460d      	mov	r5, r1
 8003542:	4617      	mov	r7, r2
 8003544:	460b      	mov	r3, r1
 8003546:	b996      	cbnz	r6, 800356e <scalbn+0x36>
 8003548:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800354c:	4303      	orrs	r3, r0
 800354e:	d039      	beq.n	80035c4 <scalbn+0x8c>
 8003550:	4b33      	ldr	r3, [pc, #204]	; (8003620 <scalbn+0xe8>)
 8003552:	2200      	movs	r2, #0
 8003554:	f7fc ffc8 	bl	80004e8 <__aeabi_dmul>
 8003558:	4b32      	ldr	r3, [pc, #200]	; (8003624 <scalbn+0xec>)
 800355a:	4604      	mov	r4, r0
 800355c:	429f      	cmp	r7, r3
 800355e:	460d      	mov	r5, r1
 8003560:	da0f      	bge.n	8003582 <scalbn+0x4a>
 8003562:	a32b      	add	r3, pc, #172	; (adr r3, 8003610 <scalbn+0xd8>)
 8003564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003568:	f7fc ffbe 	bl	80004e8 <__aeabi_dmul>
 800356c:	e006      	b.n	800357c <scalbn+0x44>
 800356e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003572:	4296      	cmp	r6, r2
 8003574:	d10a      	bne.n	800358c <scalbn+0x54>
 8003576:	4602      	mov	r2, r0
 8003578:	f7fc fe00 	bl	800017c <__adddf3>
 800357c:	4604      	mov	r4, r0
 800357e:	460d      	mov	r5, r1
 8003580:	e020      	b.n	80035c4 <scalbn+0x8c>
 8003582:	460b      	mov	r3, r1
 8003584:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8003588:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800358c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8003590:	19b9      	adds	r1, r7, r6
 8003592:	4291      	cmp	r1, r2
 8003594:	dd0e      	ble.n	80035b4 <scalbn+0x7c>
 8003596:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800359a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800359e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80035a2:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80035a6:	4820      	ldr	r0, [pc, #128]	; (8003628 <scalbn+0xf0>)
 80035a8:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80035ac:	a31a      	add	r3, pc, #104	; (adr r3, 8003618 <scalbn+0xe0>)
 80035ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b2:	e7d9      	b.n	8003568 <scalbn+0x30>
 80035b4:	2900      	cmp	r1, #0
 80035b6:	dd08      	ble.n	80035ca <scalbn+0x92>
 80035b8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80035bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80035c0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80035c4:	4620      	mov	r0, r4
 80035c6:	4629      	mov	r1, r5
 80035c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035ca:	f111 0f35 	cmn.w	r1, #53	; 0x35
 80035ce:	da12      	bge.n	80035f6 <scalbn+0xbe>
 80035d0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80035d4:	429f      	cmp	r7, r3
 80035d6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 80035da:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 80035de:	dcdc      	bgt.n	800359a <scalbn+0x62>
 80035e0:	a30b      	add	r3, pc, #44	; (adr r3, 8003610 <scalbn+0xd8>)
 80035e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e6:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 80035ea:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80035ee:	480f      	ldr	r0, [pc, #60]	; (800362c <scalbn+0xf4>)
 80035f0:	f041 011f 	orr.w	r1, r1, #31
 80035f4:	e7b8      	b.n	8003568 <scalbn+0x30>
 80035f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80035fa:	3136      	adds	r1, #54	; 0x36
 80035fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003600:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8003604:	4620      	mov	r0, r4
 8003606:	4629      	mov	r1, r5
 8003608:	2200      	movs	r2, #0
 800360a:	4b09      	ldr	r3, [pc, #36]	; (8003630 <scalbn+0xf8>)
 800360c:	e7ac      	b.n	8003568 <scalbn+0x30>
 800360e:	bf00      	nop
 8003610:	c2f8f359 	.word	0xc2f8f359
 8003614:	01a56e1f 	.word	0x01a56e1f
 8003618:	8800759c 	.word	0x8800759c
 800361c:	7e37e43c 	.word	0x7e37e43c
 8003620:	43500000 	.word	0x43500000
 8003624:	ffff3cb0 	.word	0xffff3cb0
 8003628:	8800759c 	.word	0x8800759c
 800362c:	c2f8f359 	.word	0xc2f8f359
 8003630:	3c900000 	.word	0x3c900000

08003634 <_init>:
 8003634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003636:	bf00      	nop
 8003638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800363a:	bc08      	pop	{r3}
 800363c:	469e      	mov	lr, r3
 800363e:	4770      	bx	lr

08003640 <_fini>:
 8003640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003642:	bf00      	nop
 8003644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003646:	bc08      	pop	{r3}
 8003648:	469e      	mov	lr, r3
 800364a:	4770      	bx	lr
